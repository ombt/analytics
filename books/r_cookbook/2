#
# standard names for probability distributions
#
# dnorm - normal density
# pnorm - normal distribution function
# qnorm - normal quartile function
# rnorm - normal random variates
#
# discrete distrubutions
#
# binomial - binom(n=number of trials,
#                  p=probability of success for one trial)
# geometric - geom(p=probability of success for one trial)
# hypergeometric - hyper(m=number of white balls in urn,
#                        n=number of black bals in urn,
#                        k=number of balls drawn from urn)
# negative binomial - nbinom(size=number of successful trials,
#                            either prob = probability of successful
#                            trial or mu = mean)
#
# continuous distributions
#
# beta - beta(shape1, shape2)
# cauchy - cauchy(location, scale)
# chi-squared - chisq(df = degrees of inspection)
# exponential - exp(rate)
# F - f(df1,df2) = degrees of freedom,
# gamma  - gamma(rate, either rate or scale)
# log-normal <-- lnorm(meanlog = mean on log scale)
# logistic <- logis(location, scale)
# normal <- norm(mean, sd=standard deviation0
# student's t - t(df=degrees of separaions),
# uniform <- unif(min=lower limit, max= upper definition
# weibull <- weibull(shape, scale)
# wilcoxon -<- wilcox(m=number of samples in first example; 
#                     n=second=number-of-observations in second
#			sample.
# 
# use help(name) to ge help
#
# 8.1 - count the enumber of combinations of n items taken k at 
# a time.
# 
# choose(n,k)`
#
n=10
k=4
choose(n,k)

# how many ways can we choose 3 items from 5 items
choose(5,3)
# how many ways can we choose 3 items from 50)
choose(50,3)
# how many ways can we select 30 items from 50 items
choose(50,20)

# 8.2 - combination formula is:
#
#  c = n!/r!(n-r)!

# ch 8.2 - generating combination - generate all combinations
# of n items taken k at a time.
#
# combo(items, k) 
#
# # generate all combos from 1 to 5 taken 3 at a time.
#
combn(1:5,3)
#
combn(c("t1", "t2", "t3", "t3", "t4", "t5"), 3)
#

# 8.3 - generate random numbers.
#

runif(1)

runif(10)

runif(1, min=03, max=3)

rnorm(1)

rnorm(1, mean=100, sd=15)

rbinom(1, size=10, prob=0.5)

rpois(1, lambda=10)

rexp(1, rate=0.1)

rgamma(1, shape=2, rate=0.1)

rnorm(1, mean=c(-10,0,10), sd=1)

means <- rnorm(100, mean=0, sd=0.2)
rnorm(100, mean=means, sd=1)

