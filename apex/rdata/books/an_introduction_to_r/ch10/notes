
writing functions -

1) how to write a function -

> name <- function (arg1, arg2, ...) expression

2) defining new binary operators -

 %anything%

 > "%!%" <- function(X,y) { ... }

3) named arguments and defaults - 

> fun1 <- function(data, data.frame, graph, limit) {
    [function body omitted]
}

which can be called in any of the following ways:

 > ans <- fun1(d, df, TRUE, 20)
 > ans <- fun1(d, df, graph=TRUE, limit=20)
 > ans <- fun1(data=d, limit=20, graph=TRUE, data.frame=df)

are all equivalent.

4) giving defaults values for arguments -

> func1 <- function(x,y,z=0.0) { ... }

5) the '...' argument -

use to past a list of remaining arguments to a function call within
the function defined using the '...' argument.

6) assignments within functions -

all assignments are local to the function. 

to change variables outside the function, then use:

superassignment operation <<- or the function assign().

7) recursive functions and defining functions within functions -
any function defined in another function is only accessible within
that function.

8) scoping -

> f <- function(x) { y8x; }
> f <- function(x) { y*x; }
> f(2)
Error in f(2) : object 'y' not found
> y=4
> f(2)
[1] 8
> y
[1] 4
> f <- function(x) { y=y*x; y; }
> y=5
> y
[1] 5
> f(20)
[1] 100
> y
[1] 5

another example of assigning to a global variable -

> f <- function(x) { y=y*x; z <<- y; y; }
> ls()
[1] "f" "y"
> z
Error: object 'z' not found
> y
[1] 5
> f(30)
[1] 150
> ls()
[1] "f" "y" "z"
> z
[1] 150

9) customizing the environment -

Users can customize their environment in several different ways. There is a
site initialization file and every directory can have its own special
initialization file. Finally, the special functions .First and .Last can be
used.

The location of the site initialization file is taken from the value of the
R_PROFILE environment variable. If that variable is unset, the file
Rprofile.site in the R home subdirectory etc is used.  This file should contain
the commands that you want to execute every time R is started under your
system. A second, personal, profile file named .Rprofile3 can be placed in any
directory. If R is invoked in that directory then that file will be sourced.
This file gives individual users control over their workspace and allows for
different startup procedures in different working directories.  If no .Rprofile
file is found in the startup directory, then R looks for a .Rprofile file in
the user’s home directory and uses that (if it exists). If the environment
variable R_PROFILE_USER is set, the file it points to is used instead of the
.Rprofile files.

Any function named .First() in either of the two profile files or in the .RData
image has a special status. It is automatically performed at the beginning of
an R session and may be used to initialize the environment. For example, the
definition in the example below alters the prompt to $ and sets up various
other useful things that can then be taken for granted in the rest of the
session.

> .First <- function()
{
    options(prompt="$ ", continue="+\t") # $ is the prompt
    options(digits=5, length=999)        # custom numbers and printout
    x11()                                # for graphics
    par(pch = "+")                       # plotting character
    source(file.path(Sys.getenv("HOME"), 
           "R", "mystuff.R"))            # my personal functions
    library(MASS)                        # attach a package
}

Similarly a function .Last(), if defined, is (normally) executed at 
the very end of the session.

An example is given below.
> .Last <- function()
{
    graphics.off()                 # a small safety measure.
    cat(paste(date(),"\nAdios\n")) # Is it time for lunch?
}

1) classes, generic functions and object orientation -

The class of an object determines how it will be treated by what are known as
generic functions.  Put the other way round, a generic function performs a task
or action on its arguments specific to the class of the argument itself. If the
argument lacks any class attribute, or has a class not catered for specifically
by the generic function in question, there is always a default action provided.


