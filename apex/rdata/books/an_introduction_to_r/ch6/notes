
list and data frames -

1) R list is an object consisting of an ordered collection of objects
known as components.

the components need not be of the same mode or type. a list could
consists of (as an example): a logical value, a matrix, a complex vector,
a character array, a function and so on.

> Lst <- list(name="fred", wife="mary", no.children=3,
              child.ages=c(4,7,9))

2) how list contents can be accessed:

> Lst <- list(name="fred", wife="mary", no.children=3,
+               child.ages=c(4,7,9))

> Lst
$name
[1] "fred"

$wife
[1] "mary"

$no.children
[1] 3

$child.ages
[1] 4 7 9

> Lst[[1]]
[1] "fred"

> Lst[[2]]
[1] "mary"

> Lst[[3]]
[1] 3

> Lst[[4]]
[1] 4 7 9

> Lst[[4]][2]
[1] 7

more examples:

> Lst <- list(name="fred", wife="mary", no.children=3,
+               child.ages=c(4,7,9))

> Lst
$name
[1] "fred"

$wife
[1] "mary"

$no.children
[1] 3

$child.ages
[1] 4 7 9

> Lst[[1]]
[1] "fred"

> Lst[[2]]
[1] "mary"

> Lst[[3]]
[1] 3

> Lst[[4]]
[1] 4 7 9

> Lst[[4]][2]
[1] 7

> Lst$name
[1] "fred"

> Lst$child.ages
[1] 4 7 9

> Lst$child.ages[1]
[1] 4

> Lst$child.ages[1,3]
Error in Lst$child.ages[1, 3] : incorrect number of dimensions

> Lst$child.ages[1:2]
[1] 4 7

> Lst$child.ages[-1]
[1] 7 9

> Lst$child.ages
[1] 4 7 9

> Lst$child.ages
[1] 4 7 9

> Lst$child.ages[c(1,2)]
[1] 4 7

these are the same also:

> Lst[["name"]]
[1] "fred"
> Lst$name
[1] "fred"

3) constructing and modifying lists:

> lst2 <- Lst
> lst2
$name
[1] "fred"

$wife
[1] "mary"

$no.children
[1] 3

$child.ages
[1] 4 7 9

> lst2$poopy <- 3*(1:3)
> lst2[[5]]
[1] 3 6 9
> lst2
$name
[1] "fred"

$wife
[1] "mary"

$no.children
[1] 3

$child.ages
[1] 4 7 9

$poopy
[1] 3 6 9

4) concatenating lists -

> A <- list(x=1:3,y=4:7)
> B <- list(x=1:4,y=5:7)
> C <- list(x=2:4,y=5:8)

> A
$x
[1] 1 2 3

$y
[1] 4 5 6 7

> B
$x
[1] 1 2 3 4

$y
[1] 5 6 7

> C
$x
[1] 2 3 4

$y
[1] 5 6 7 8

> list.ABC <- c(A,B,C)
> list.ABC
$x
[1] 1 2 3

$y
[1] 4 5 6 7

$x
[1] 1 2 3 4

$y
[1] 5 6 7

$x
[1] 2 3 4

$y
[1] 5 6 7 8

> list.ABC[["x"]]
[1] 1 2 3

> list.ABC
$x
[1] 1 2 3

$y
[1] 4 5 6 7

$x
[1] 1 2 3 4

$y
[1] 5 6 7

$x
[1] 2 3 4

$y
[1] 5 6 7 8

> list.ABC$x
[1] 1 2 3

> list.ABC$Y
NULL

> list.ABC$y
[1] 4 5 6 7

> list.ABC$y$x
Error in list.ABC$y$x : $ operator is invalid for atomic vectors

> labels(list.ABC)
[1] "x" "y" "x" "y" "x" "y"

5) data frames -

A data frame is a list with class "data.frame". There are restrictions on 
lists that may be made into data frames, namely

- The components must be vectors (numeric, character, or logical), 
factors, numeric matrices, lists, or other data frames.

- Matrices, lists, and data frames provide as many variables to the 
new data frame as they have columns, elements, or variables, respectively.

- Numeric vectors, logicals and factors are included as is, and by 
default1 character vectors are coerced to be factors, whose levels are 
the unique values appearing in the vector.

- Vector structures appearing as variables of the data frame must all 
have the same length, and matrix structures must all have the same 
row size.  A data frame may for many purposes be regarded as a matrix 
with columns possibly of differing modes and attributes. It may be 
displayed in matrix form, and its rows and columns extracted using matrix 
indexing conventions.

6) making data frames -

Objects satisfying the restrictions placed on the columns (components) of a
data frame may be used to form one using the function data.frame:

> accountants <- data.frame(home=statef, loot=incomes, shot=incomef)

A list whose components conform to the restrictions of a data frame may be
coerced into a data frame using the function as.data.frame()

The simplest way to construct a data frame from scratch is to use the
read.table() function to read an entire data frame from an external file.

7) attaching and detaching data frames or lists:

attach() and detach()

The $ notation, such as accountants$home, for list components is not 
always very convenient.  A useful facility would be somehow to make the components of a list or data frame temporarily visible as variables under 
their component name, without the need to quote the list name explicitly 
each time.

The attach() function takes a ‘database’ such as a list or data frame as its
argument. Thus suppose lentils is a data frame with three variables lentils$u,
lentils$v, lentils$w. The attach

> attach(lentils)

places the data frame in the search path at position 2, and provided there are
no variables u, v or w in position 1, u, v and w are available as variables
from the data frame in their own right.

At this point an assignment such as

> u <- v+w

does not replace the component u of the data frame, but rather masks it with another variable
u in the working directory at position 1 on the search path. To make a permanent change to
the data frame itself, the simplest way is to resort once again to the $ notation:

> lentils$u <- v+w

However the new value of component u is not visible until the data frame is detached and
attached again.

To detach a data frame, use the function

> detach()

More precisely, this statement detaches from the search path the entity currently at
position 2. Thus in the present context the variables u, v and w would be no longer visible,
except under the list notation as lentils$u and so on. Entities at positions greater than 2
on the search path can be detached by giving their number to detach, but it is much safer to
always use a name, for example by detach(lentils) or detach("lentils")

Note: In R lists and data frames can only be attached at position 2 or above, and
what is attached is a copy of the original object. You can alter the attached values
via assign, but the original list or data frame is unchanged.

Working with data frames

A useful convention that allows you to work with many different problems comfortably together
in the same working directory is
- gather together all variables for any well defined and separate problem in a data frame
under a suitably informative name;
- when working with a problem attach the appropriate data frame at position 2, and use the
working directory at level 1 for operational quantities and temporary variables;
- before leaving a problem, add any variables you wish to keep for future reference to the
data frame using the $ form of assignment, and then detach();
- finally remove all unwanted variables from the working directory and keep it as clean of
left-over temporary variables as possible.
In this way it is quite simple to work with many problems in the same directory, all of which
have variables named x, y and z, for example.

Attaching arbitrary lists

attach() is a generic function that allows not only directories and data frames to be attached
to the search path, but other classes of object as well. In particular any object of mode "list"
may be attached in the same way:
Chapter 6: Lists and data frames 29

> attach(any.old.list)

Anything that has been attached can be detached by detach, by position number or, preferably,
by name.

Managing the search path

The function search shows the current search path and so is a very useful way to keep track of
which data frames and lists (and packages) have been attached and detached. Initially it gives

> search()
[1] ".GlobalEnv" "Autoloads" "package:base"

where .GlobalEnv is the workspace.2
After lentils is attached we have

> search()
[1] ".GlobalEnv" "lentils" "Autoloads" "package:base"
> ls(2)
[1] "u" "v" "w"

and as we see ls (or objects) can be used to examine the contents of any position on the search
path.

Finally, we detach the data frame and confirm it has been removed from the search path.

> detach("lentils")
> search()
[1] ".GlobalEnv" "Autoloads" "package:base"

