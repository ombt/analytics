\dt
v=as.vector(c())
length(v)
library(ggplot2)
install.packages(ggplot2)
install.packages("ggplot2")
library(ggplot2)
library()
q()
ls()
ls(*.query)
ls("*.query")
source("rlib/u0x_postgresql_utils.R")
source("rlib/u0x_postgresql_utils.R")
source("rlib/u0x_postgresql_utils.R")
ls()
load_data(db,"time")
source("rlib/u0x_postgresql_utils.R")
load_data(db,"time")
as.vector(c())
source("rlib/u0x_postgresql_utils.R")
load_data(db,"time")
source("rlib/u0x_postgresql_utils.R")
load_data(db,"time")
source("rlib/u0x_postgresql_utils.R")
load_data(db,"time")
source("rlib/u0x_postgresql_utils.R")
load_data(db,"time")
source("rlib/u0x_postgresql_utils.R")
load_data(db,"time")
source("rlib/u0x_postgresql_utils.R")
load_data(db,"time")
source("rlib/u0x_postgresql_utils.R")
load_data(db,"time")
source("rlib/u0x_postgresql_utils.R")
load_data(db,"time")
load_data(db,"time", routes = c("r1","r2"))
load_data(db,"time", routes = c("r1","r2"))
source("rlib/u0x_postgresql_utils.R")
load_data(db,"time")
load_data(db,"time", routes = c("r1"))
load_data(db,"time", routes = c())
load_data(db,"time", routes = c("r1","r2"))
source("rlib/u0x_postgresql_utils.R")
load_data(db,"time", routes = c("r1","r2"))
load_data(db,"time", routes = c("r1"))
load_data(db,"time", routes = c("r1","r2"))
v <- as.vector(c("a"))
v
length(v)
v <- as.vector(c("aaaaaa"))
length(v)
typeof(v)
v <- as.vector(c("aaaaaa","bbbb"))
typeof(v)
load_data(db,"time", routes = c("r1","r2"))
v <- as.vector(c("aaaaaa","bbbb"))
length(v)
load_data(db,"time", not_routes = c("r1","r2"))
load_data(db,"time", barcodes = c("r1","r2"))
load_data(db,"time", barcodes = c(1,2))
load_data(db,"time", not_barcodes = c(1,2))
load_data(db,"time")
load_data(db,"time", routes)
load_data(db,"time", routes=c())
load_data(db,"time", routes=c())
load_data(db,"time", routes=c(1,2))
source("rlib/u0x_postgresql_utils.R")
load_data(db,"time", routes=c(1,2))
source("rlib/u0x_postgresql_utils.R")
load_data(db,"time", routes=c(1,2))
load_data(db,"time", routes=c(1,2))
source("rlib/u0x_postgresql_utils.R")
load_data(db,"time", routes=c(1,2))
source("rlib/u0x_postgresql_utils.R")
load_data(db,"time", routes=c(1,2))
source("rlib/u0x_postgresql_utils.R")
load_data(db,"time", routes=c(1,2))
source("rlib/u0x_postgresql_utils.R")
load_data(db,"time", routes=c(1,2))
k
source("rlib/u0x_postgresql_utils.R")
load_data(db,"time", routes=c(1,2))
source("rlib/u0x_postgresql_utils.R")
db
pg_close_db(db)
pg_open_db
db = pg_open_db("testing")
mtm=load_data(db,"time")
mtm=load_data(db,"time")
x="d"
length(x)
x=""
length(x)
pg_close_db(db)
source("rlib/u0x_postgresql_utils.R")
db = pg_open_db("testing")
mtm=load_data(db,"time")
nrow(mtm)
mtm=load_data(db,"machines",machines=c(1,2))
mtm=load_data(db,"machine",machines=c(1,2))
mtm=load_data(db,"count",machines=c(1,2))
nrow(mtm)
mtm=load_data(db,"count",machines=c(3))
nrow(mtm)
mtm=load_data(db,"count",machines=c(5))
nrow(mtm)
mtm=load_data(db,"count",machines=c(5),lanes=1)
nrow(mtm)
mtm=load_data(db,"count",machines=c(5),lanes=2)
nrow(mtm)
mtm=load_data(db,"count",machines=c(5),lanes=3)
nrow(mtm)
mtm=load_data(db,"count",machines=c(5),lanes=c(1,2))
nrow(mtm)
mtm=load_data(db,"count",machines=c(4,5),lanes=c(1,2))
nrow(mtm)
swap
x="a"
y="b"
x < y
x > y
x <= y
x><= y
x >- y
x >= y
x=1
sprintf("%s", x)
sprintf("%rds", x)
sprintf("%d", x)
source("rlib/u0x_postgresql_utils.R")
source("rlib/u0x_postgresql_utils.R")
source("rlib/u0x_postgresql_utils.R")
mtm=load_data(db,"count",machines=c(4,5),lanes=c(1,2))
nrow(mtm)
mtm=load_data(db,"count",range_machines=c(4,5),range_lanes=c(1,2))
nrow(mtm)
source("rlib/u0x_postgresql_utils.R")
mtm=load_data(db,"count",range_machines=c(4,5),range_lanes=c(1,2))
mtm=load_data(db,"count",range_machines=c(4,5),range_lanes=c(1,2),debug=TRUE)
source("rlib/u0x_postgresql_utils.R")
mtm=load_data(db,"count",range_machines=c(4,5),range_lanes=c(1,2),debug=TRUE)
nrow(mtm)
source("rlib/u0x_postgresql_utils.R")
mtm=load_data(db,"count",range_machines=c(4,5),range_lanes=c(1,2))
nrow(mtm)
mtm=load_data(db,"count",range_machines=c(4,5),range_lanes=c(1))
source("rlib/u0x_postgresql_utils.R")
mtm=load_data(db,"count",range_machines=c(4,5),range_lanes=c(1))
mtm=load_data(db,"count",range_machines=c(4,5),range_lanes=c(1,2))
mtm=load_data(db,"count",range_machines=c(4,5),lanes=c(1))
nrow(mtm)
mtm=load_data(db,"count",range_machines=c(4,5),lanes=1)
nrow(mtm)
q()
q()
lf
ls()
source("rlib/u0x_postgresql_utils.R")
mtm=load_data(db,"count",range_machines=c(4,5),lanes=1)
q()
library()
db = pg_open_db("training_data")
m.mqt = load_data(db,"mount_quality_trace",machines=5)
ls()
q()
ls()
m.mqt = load_data(db,"mount_quality_trace",machines=5)
db = pg_open_db("training_data")
m.mqt = load_data(db,"mount_quality_trace",machines=5)
names(m.mqt)
nrow(m.mqt[,"_machine_order"])
nrow(m.mqt[,2])
nrow(m.mqt[[2]])
head(m.mqt[[2]])
unique(m.mqt[[2]])
unique(m.mqt[["_machine_order"]])
unique(m.mqt[[c("_machine_order","_nhadd")]])
unique(m.mqt[,c("_machine_order","_nhadd")])
unique(m.mqt[,c("_nhadd")])
q()
source("rlib/u0x_postgresql_utils.R")
ls()
load_data
operation
source("rlib/u0x_postgresql_utils.R")
source("rlib/u0x_postgresql_utils.R")
source("rlib/u0x_postgresql_utils.R")
source("rlib/u0x_postgresql_utils.R")
source("rlib/u0x_postgresql_utils.R")
pg_close_db(db)
db = pg_open_db("training_data")
operation:q
operation:q
source("rlib/u0x_postgresql_utils.R")
db = pg_open_db("training_data")
xx = get_operation_value(db,'count","min(dpc._timestamp)")
xx = get_operation_value(db,"count","min(dpc._timestamp)")
xx = get_operation_value(db,"count","min(dpc._timestamp)", debug=TRUE)
source("rlib/u0x_postgresql_utils.R")
source("rlib/u0x_postgresql_utils.R")
xx = get_operation_value(db,"count","min(dpc._timestamp)", debug=TRUE)
xx = get_operation_value(db,"count","min(dpc._timestamp),max(dpc._timestamp")
xx = get_operation_value(db,"count","min(dpc._timestamp),max(dpc._timestamp)")
xx = get_operation_value(db,"count","min(dpc._timestamp),max(dpc._timestamp)", machines=c(1))
xx
xx = get_operation_value(db,"count","min(dpc._timestamp),max(dpc._timestamp)", machines=c(2))
xx
get_operation_value(db,"count","min(dpc._timestamp),max(dpc._timestamp)", machines=c(3))
get_operation_value(db,"count","min(dpc._timestamp),max(dpc._timestamp)", machines=c(5))
get_operation_value(db,"count","min(dpc._timestamp),max(dpc._timestamp)", machines=c())
get_operation_value(db,"count","min(dpc._timestamp),max(dpc._timestamp)", machines=c(2))
get_operation_value(db,"count","min(dpc._timestamp),max(dpc._timestamp)", machines=c(2,3))
get_operation_value(db,"count","min(dpc._timestamp),max(dpc._timestamp)", machines=c(2,3),lanes=1)
get_operation_value(db,"count","min(dpc._timestamp),max(dpc._timestamp)", machines=c(2,3),lanes=2)
get_operation_value(db,"time","min(dpc._timestamp),max(dpc._timestamp)", machines=c(2,3),lanes=2)
get_operation_value(db,"time","min(dpt._timestamp),max(dpt._timestamp)", machines=c(2,3),lanes=2)
get_operation_value(db,"time","min(dpt._timestamp),max(dpt._timestamp)", machines=c(2,3),lanes=2)
get_operation_value(db,"time","min(dpt._timestamp)", machines=c(2,3),lanes=2)
source("rlib/u0x_postgresql_utils.R")
get_operation_value(db,"time","min(dpt._timestamp),max(dpt._timestamp)", machines=c(2,3),lanes=2)
get_operation_value(db,"time","min(dpt._timestamp),max(dpt._timestamp)", machines=c(2,3),lanes=2,debug=TRUE)
get_operation_value(db,"time","min(dpt._timestamp)", machines=c(2,3),lanes=2,debug=TRUE)
get_operation_value(db,"time","count(*)", machines=c(2,3),lanes=2,debug=TRUE)
source("rlib/u0x_postgresql_utils.R")
get_operation_value(db,"time","count(*)", machines=c(2,3),lanes=2,debug=TRUE)
get_operation_value(db,"count","count(*)", machines=c(2,3),lanes=2,debug=TRUE)
get_operation_value(db,"time","count(*)", machines=c(2,3),lanes=2,debug=TRUE)
source("rlib/u0x_postgresql_utils.R")
get_operation_value(db,"time","count(*)", machines=c(2,3),lanes=2,debug=TRUE)
source("rlib/u0x_postgresql_utils.R")
get_operation_value(db,"time","count(*)", machines=c(2,3),lanes=2,debug=TRUE)
get_operation_value(db,"time","min(dpt._timestamp)", machines=c(2,3),lanes=2,debug=TRUE)
get_operation_value(db,"time","min(dpt._timestamp)", machines=c(2,3),lanes=2)
get_operation_value(db,"time","min(dpt._timestamp), max(dpt._timestamp)", machines=c(2,3),lanes=2)
get_operation_value(db,"time","min(dpt._timestamp), max(dpt._timestamp)")
source("rlib/u0x_postgresql_utils.R")
get_operation_value(db,"time","min(dpt._timestamp), max(dpt._timestamp)")
get_operation_value(db,"time","min(dpt._timestamp), max(dpt._timestamp)", machines=c(2,3),lanes=2)
source("rlib/u0x_postgresql_utils.R")
get_operation_value(db,"time","min(dpt._timestamp), max(dpt._timestamp)", machines=c(2,3),lanes=2)
\q
q()
source("rlib/u0x_postgresql_utils.R")
ls()
source("rlib/u0x_postgresql_utils.R")
ls()
q()
ls()
ls
ls()
pg_u0x_get_operation_value
db=pg_open_db("training_data")
pg_u0x_get_operation_value(db,"count","min(ftf._filename_timestamp), max(ftf._filename_timestamp)")
list.files("rlib")
list.files("rlib",pattern=(".*.R$"))
rlist=list.files("rlib",pattern=(".*.R$"))
rlist
for r in rlist
for (Rfile in rlist)
do
for (Rfile in rlist) {
print(Rfile)
}
source("source_all.R")
source("source_all.R")
source("source_all.R")
source("source_all.R")
source("source_all.R")
source("source_all.R")
lf
ls()
db=pg_open_db("training")
db=pg_open_db("training_data")
db
data = pg_aoi_get_operation(db,"all","min(filename_timestamp)")
data = pg_aoi_get_operation_value(db,"all","min(filename_timestamp)")
data = pg_aoi_get_operation_value(db,"all","min(ftf._filename_timestamp)")
data
data = pg_aoi_get_operation_value(db,"all","max(ftf._filename_timestamp)")
data
data = pg_aoi_get_operation_value(db,"all","count(ftf._filename_timestamp)")
date
data
data = pg_u0x_get_operation_value(db,"all","count(ftf._filename_timestamp)")
data = pg_u0x_get_operation_value(db,"count","count(ftf._filename_timestamp)")
data
data = pg_u0x_get_operation_value(db,"count","count(ftf._filename_timestamp)")
data
data = pg_u0x_get_operation_value(db,"mount_quality_trace","min(ftf._filename_timestamp)")
data
min_max_mqt_tstamps = pg_u0x_get_operation_value(db,"mount_quality_trace","min(ftf._filename_timestamp),max(ftf._filename_timestamp")
min_max_mqt_tstamps = pg_u0x_get_operation_value(db,"mount_quality_trace","min(ftf._filename_timestamp), max(ftf._filename_timestamp")
min_max_mqt_tstamps = pg_u0x_get_operation_value(db,"mount_quality_trace","min(ftf._filename_timestamp), max(ftf._filename_timestamp", debug=TRUE)
min_max_mqt_tstamps = pg_u0x_get_operation_value(db,"mount_quality_trace","min(ftf._filename_timestamp), max(ftf._filename_timestamp)")
min_max_mqt_tstamps
tstamp_to_datetime(min_max_mqt_tstamps$min)
tstamp_to_datetime(min_max_mqt_tstamps$max)
#min_max_mqt_tstamps = pg_u0x_get_operation_value(db,"mount_quality_trace","min(ftf._filename_timestamp), max(ftf._filename_timestamp)")
 pg_u0x_get_operation_value(db,"mount_quality_trace","min(ftf._filename_timestamp), max(ftf._filename_timestamp)", machines=1)
tstamp_to_datetime(1478757609)
tstamp_to_datetime(1479493267)
\dt
db=pg_open_db(
db=pg_open_db("training_data")
db
tr_count=pg_u0x_load_count(db)
nrow(tr_count)
tr_time=pg_u0x_load_time(db)
tr_feeder=pg_u0x_load_feeder(db)
nrow(tr_feeder)
tr_nozzle=pg_u0x_load_nozzle(db)
nrow(tr_nozzle)
gc()
tr_aoi=pg_aoi_load_all(db)
tr_aoi=pg_aoi_load_all(db,debug=TRUE)
tr_aoi=pg_aoi_load_data(db,"all")
tr_aoi=pg_aoi_load_data(db,"all",debug=TRUE)
source("rlib/aoi_postgresql_utils.R")
tr_aoi=pg_aoi_load_data(db,"all",debug=TRUE)
tr_aoi=pg_aoi_load_data(db,"all")
nrow(tr_aoi)
tr_mqt=pg_u0x_load_data(db,"mount_quality_trace")
nrow(tr_mqt)
head(tr_mqt)
sum
sum(tr_mqt[["_tcy"]])
sum(tr_mqt[["_tcx"]])
sum(tr_mqt[["_tlx"]])
sum(tr_mqt[["_tly"]])
mean(tr_mqt[["_tly"]])
sd(tr_mqt[["_tly"]])
names(tr_mqt)
count
nrow(unique(tr_mqt[["_pcb_id"]]))
xx=unique(tr_mqt[["_pcb_id"]])
head(xx)
nrow(xx)
str(xx)
ncol(xx)
length(xx)
length(tr_mqt[["_pcb_id"]])
length(tr_mqt[["_filename_id"]])
min(tr_mqt[["_filename_id"]])
max(tr_mqt[["_filename_id"]])
length(unique(tr_mqt[["_filename_id"]]))
length(unique(tr_mqt[["_filename_id"]]))/5
class(tr_mqt)
str(tr_mqt)
q()
help.start()
options("browser")
options("browser")="firefox"
q()
ls()
head(xx)
Sys.getenv()
pwd
cd
cd
[wd
pwd
q()
lf('tr*")
lf("tr*")
length(tr_count)
typeof(tr_count)
typeof(tr_mqt)
is.data.frame(tr_mqt)
is.data.frame(tr_count)
ls(pattern="tr_[acfnt].*")
rm(list=ls(pattern="tr_[acfnt].*"))
lf("tr*")
lf("pg*")
db=pg_open_db("training_data")
tr_aoi=pg_aoi_load_data(db,"all")
is.data.frame(lf("tr_*"))
is.data.frame(tr_aoi)
is.data.frame(tr_mqt)
lf("tr_*")
tr_count=pg_u0x_load_data(db,"count")
tr_time=pg_u0x_load_data(db,"time")
tr_feeder=pg_u0x_load_data(db,"feeder")
tr_nozzle=pg_u0x_load_data(db,"nozzle")
lf("tr_*")
q()
lf()
lf("min*")
min_max_mqt_tstamps
lf("*stamp*")
to.vector(min_max_mqt_tstamps)
to.list(min_max_mqt_tstamps)
as.vector(min_max_mqt_tstamps)
type.of(min_max_mqt_tstamps)
typeof(min_max_mqt_tstamps)
source("rlib/generic_utils.R")
tstamp_to_datetime(min_max_mqt_tstamps)
tstamp_to_datetime(min_max_mqt_tstamps[[1]])
tstamp_to_datetime(min_max_mqt_tstamps[[2]])
tstamp_to_datetime(min_max_mqt_tstamps)
source("rlib/generic_utils.R")
datetime_to_tstamp(c(tstamp_to_datetime(min_max_mqt_tstamps)))
datetime_to_tstamp(
c(tstamp_to_datetime(min_max_mqt_tstamps))
datetime_to_tstamp(c(tstamp_to_datetime(min_max_mqt_tstamps))[c(1:2)])
datetime_to_tstamp(tstamp_to_datetime(min_max_mqt_tstamps)[[1]])
datetime_to_tstamp("2016-11-10 00:00:09 CST")
datetime_to_tstamp("2016-11-10 00:00:09")
datetime_to_tstamp("2016/11/10 00:00:09")
q()
db=pg_open_db("training_data")
tr
trd
trd <- data.frame()
trd[["aoi"]] = pg_aoi_load_data_view(db,"all")
typeof(trd)
rm(trd)
trd <- list()
trd[["aoi"]] = pg_aoi_load_data_view(db,"all")
nrows(trd$aoi)
nrow(trd$aoi)
trd[["time"]] = pg_u0x_load_data_view(db,"time")
trd[["count"]] = pg_u0x_load_data_view(db,"count")
trd[["feeder"]] = pg_u0x_load_data_view(db,"feeder")
trd[["nozzle"]] = pg_u0x_load_data_view(db,"nozzle")
trd[["mqt"]] = pg_u0x_load_data_view(db,"mountqualitytrace")
trd[["mqt"]] = pg_u0x_load_data_view(db,"mount_quality_trace")
nrow(trd)
nrow(trd$mqt)
names(trd$mqt)
q()
pwd
lf()
names(trd)
names(trd$aoi)
names(trd$aoi)
names(trd$count)
names(trd$count[["_pcb_id"]])
nrow(trd$count[["_pcb_id"]])
length(trd$count[["_pcb_id"]])
length(trd$count[,trd$count[["_pcb_id"]] == trd$aoi[["_pcbid"]]])
length(trd$count[,trd$count[["_pcb_id"]] == trd$aoi[["_pcbid"]]])
names(trd$aoi)
names(trd$count)
length(trd$count[trd$count[["_pcb_id"]] == trd$aoi[["_pcbid"]],"_pcb_id"])
nrow(trd$count[trd$count[["_pcb_id"]] == trd$aoi[["_pcbid"]],"_pcb_id"])
nrow(trd$count[trd$count[["_pcb_id"]] in trd$aoi[["_pcbid"]],"_pcb_id"])
nrow(trd$count[trd$count[["_pcb_id"]] in (trd$aoi[["_pcbid"]]),"_pcb_id"])
nrow(trd$count[trd$count[["_pcb_id"]] %in% trd$aoi[["_pcbid"]],"_pcb_id"])
length(trd$count[trd$count[["_pcb_id"]] %in% trd$aoi[["_pcbid"]],"_pcb_id"])
length(trd$count[trd$count[["_pcb_id"]] %in% trd$aoi[["_pcbid"]],])
#trd$count[trd$count[["_pcb_id"]] %in% trd$aoi[["_pcbid"]],])
trd_w_aoi_pcbid = list()
trd_w_aoi_pcbid["count"]] = trd$count[trd$count[["_pcb_id"]] %in% trd$aoi[["_pcbid"]],])
trd_w_aoi_pcbid["count"]] = trd$count[trd$count[["_pcb_id"]] %in% trd$aoi[["_pcbid"]],]
trd_w_aoi_pcbid[["count"]] = trd$count[trd$count[["_pcb_id"]] %in% trd$aoi[["_pcbid"]],]
trd_w_aoi_pcbid[["time"]] = trd$time[trd$time[["_pcb_id"]] %in% trd$aoi[["_pcbid"]],]
trd_w_aoi_pcbid[["feeder"]] = trd$feeder[trd$feeder[["_pcb_id"]] %in% trd$aoi[["_pcbid"]],]
trd_w_aoi_pcbid[["nozzle"]] = trd$feeder[trd$mqt[["_pcb_id"]] %in% trd$aoi[["_pcbid"]],]
trd_w_aoi_pcbid[["nozzle"]] = trd$nozzle[trd$nozzle[["_pcb_id"]] %in% trd$aoi[["_pcbid"]],]
trd_w_aoi_pcbid[["mqt"]] = trd$mqt[trd$mqt[["_pcb_id"]] %in% trd$aoi[["_pcbid"]],]
names(trd_w_aoi_pcbid)
names(trd)
trd_w_aoi_pcbid[["aoi"]] = trd$aoi
names(trd)
names(trd_w_aoi_pcbid)
gc()
names(trd_w_aoi_pcbid$count)
unique(trd_w_aoi_pcbid[["count"]]$_pcb_id)
unique(trd_w_aoi_pcbid[["count"]][["_pcb_id"]]
)
nrow(unique(trd_w_aoi_pcbid[["count"]][["_pcb_id"]])
nrow(unique(trd_w_aoi_pcbid[["count"]][["_pcb_id"]]))
length(unique(trd_w_aoi_pcbid[["count"]][["_pcb_id"]]))
names(trd_w_aoi_pcbid$count)
names(trd_w_aoi_pcbid$count[["_machine_order"]])
unique(trd_w_aoi_pcbid$count[["_machine_order"]])
names(trd_w_aoi_pcbid$mqt)
help(rowSum)
help(rowSums)
names(trd_w_aoi_pcbid$mqt)
names(trd_w_aoi_pcbid$count
)
total_error_count = rowSums(trd_w_aoi_pcbid$count[,c("_tdmiss","_thmiss",_tmmiss","_tpmiss","_trmiss","_trsmiss")])
total_error_count = rowSums(trd_w_aoi_pcbid$count[,c("_tdmiss","_thmiss","_tmmiss","_tpmiss","_trmiss","_trsmiss")])
total_error_count = rowSums(trd_w_aoi_pcbid$count[,c("_tdmiss","_thmiss","_tmmiss","_tpmiss","_trmiss","_trsmiss")],rm.na=TRUE)
total_error_count = rowSums(trd_w_aoi_pcbid$count[,c("_tdmiss","_thmiss","_tmmiss","_tpmiss","_trmiss","_trsmiss")])
help(rowSums)
total_error_count = rowSums(trd_w_aoi_pcbid$count[,c("_tdmiss","_thmiss","_tmmiss","_tpmiss","_trmiss","_trsmiss")],na.rm=TRUE)
nrow(total_error_count)
length(total_error_count)
trd_w_aoi_pcbid$count[["total_error_count"]] = rowSums(trd_w_aoi_pcbid$count[,c("_tdmiss","_thmiss","_tmmiss","_tpmiss","_trmiss","_trsmiss")],na.rm=TRUE)
trd_w_aoi_pcbid$count[["total_error_count"]] = rowSums(trd_w_aoi_pcbid$count[,c("_tdmiss","_thmiss","_tmmiss","_tpmiss","_trmiss","_trsmiss")],na.rm=TRUE)
names(trd_w_aoi_pcbid$count)
nrow(trd_w_aoi_pcbid$count$total_error_count)
length(trd_w_aoi_pcbid$count$total_error_count)
length(trd_w_aoi_pcbid$count$"_tpickup"))
length(trd_w_aoi_pcbid$count$"_tpickup")
length(trd_w_aoi_pcbid$count$_tpickup)
length(trd_w_aoi_pcbid$count[["_tpickup"]])
trd_w_aoi_pcbid$count[["total_error_count"]] = NULL
trd_w_aoi_pcbid$count[["total_error_count"]]
names(trd_w_aoi_pcbid$count)
save.history()
write.history()
lf("*hist*")
lf("*hist*",envpos=2)
lf("*hist*",env.pos=2)
lf("*hist*",env.pos=3)
lf("*hist*",env.pos=4)
lf("*hist*",env.pos=5)
savehistory()
