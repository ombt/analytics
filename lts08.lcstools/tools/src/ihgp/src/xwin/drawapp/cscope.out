cscope 11 $HOME/src/xwin/osrc 0000197878
	@append.c

2 
	~<°dio.h
>

3 
	~<X11/Xlib.h
>

4 
	~<X11/Xutû.h
>

5 
	~"ªtu∫s.h
"

6 
	~"debug.h
"

7 
	~"myxlib.h
"

11 
	$AµídKeySèãMesßge
(
°©e
)

12 
°©e
;

14 
°rög
[
BUFSIZ
];

17 
	`°r˝y
(
°rög
, " ");

18 
°©e
 & 
Buâ⁄1Mask
)

20 
	`°rˇt
(
°rög
, "Button1 ");

22 
°©e
 & 
Buâ⁄2Mask
)

24 
	`°rˇt
(
°rög
, "Button2 ");

26 
°©e
 & 
Buâ⁄3Mask
)

28 
	`°rˇt
(
°rög
, "Button3 ");

30 
°©e
 & 
Buâ⁄4Mask
)

32 
	`°rˇt
(
°rög
, "Button4 ");

34 
°©e
 & 
Buâ⁄5Mask
)

36 
	`°rˇt
(
°rög
, "Button5 ");

38 
°©e
 & 
Shi·Mask
)

40 
	`°rˇt
(
°rög
, "Shift ");

42 
°©e
 & 
LockMask
)

44 
	`°rˇt
(
°rög
, "Lock ");

46 
°©e
 & 
C⁄åﬁMask
)

48 
	`°rˇt
(
°rög
, "Control ");

50 
°©e
 & 
Mod1Mask
)

52 
	`°rˇt
(
°rög
, "Mod1 ");

54 
°©e
 & 
Mod2Mask
)

56 
	`°rˇt
(
°rög
, "Mod2 ");

58 
°©e
 & 
Mod3Mask
)

60 
	`°rˇt
(
°rög
, "Mod3 ");

62 
°©e
 & 
Mod4Mask
)

64 
	`°rˇt
(
°rög
, "Mod4 ");

66 
°©e
 & 
Mod5Mask
)

68 
	`°rˇt
(
°rög
, "Mod5 ");

72 
	`°æí
(
°rög
Ë> 4Ë
	`¥ötf
("%s\n", string);

76 
	}
}

	@args.c

2 
	~<°dio.h
>

3 
	~"ªtu∫s.h
"

4 
	~"debug.h
"

5 
	~"myxlib.h
"

9 
	$FödP¨amëî
(
¨gc
, 
¨gv
, 
look_f‹
)

10 
¨gc
;

11 **
¨gv
;

12 *
look_f‹
;

14 
cou¡
, 
Àngth
;

17 
Àngth
 = 
	`°æí
(
look_f‹
);

18 
cou¡
 = 1;

19 
cou¡
 < 
¨gc
)

22 
	`°∫cmp
(
look_f‹
, 
¨gv
[
cou¡
], 
Àngth
) == 0)

25 
cou¡
++;

26 
cou¡
 < 
¨gc
)

27 (
¨gv
[
cou¡
]);

29 (
¨gv
[
cou¡
-1]);

32 
cou¡
++;

36 ((*)
NULL
);

37 
	}
}

	@bitmap.c

2 
	~<°dio.h
>

3 
	~<X11/Xlib.h
>

4 
	~<X11/Xutû.h
>

5 
	~"ªtu∫s.h
"

6 
	~"debug.h
"

7 
	~"myxlib.h
"

10 
Pixm≠


11 
	$LﬂdBôm≠
(
di•œy
, 
wödow
, 
fûíame
, 
width
, 
height
)

12 
Di•œy
 *
di•œy
;

13 
Wödow
 
wödow
;

14 *
fûíame
;

15 *
width
, *
height
;

17 
x_hŸ•Ÿ
, 
y_hŸ•Ÿ
;

18 
°©us
;

19 
Pixm≠
 
pixm≠
;

22 
°©us
 = 
	`XRódBôm≠Fûe
(
di•œy
, 
wödow
, 
fûíame
,

23 
width
, 
height
, &
pixm≠
, &
x_hŸ•Ÿ
, &
y_hŸ•Ÿ
);

24 
°©us
 !
Bôm≠Suc˚ss
)

26 
pixm≠
 = (
Pixm≠
)
N⁄e
;

30 (
pixm≠
);

31 
	}
}

35 
	$SaveBôm≠
(
di•œy
, 
fûíame
, 
bôm≠
, 
width
, 
height
)

36 
Di•œy
 *
di•œy
;

37 *
fûíame
;

38 
Pixm≠
 
bôm≠
;

39 
width
, 
height
;

41 (
	`XWrôeBôm≠Fûe
(
di•œy
, 
fûíame
,

42 
bôm≠
, 
width
, 
height
, -1, -1));

43 
	}
}

	@classhnt.c

2 
	~<°dio.h
>

3 
	~<X11/Xlib.h
>

4 
	~<X11/Xutû.h
>

5 
	~"ªtu∫s.h
"

6 
	~"debug.h
"

7 
	~"myxlib.h
"

11 
	$SëCœssHöts
(
di•œy
, 
wödow
, 
ªs_«me
, 
ªs_˛ass
)

12 
Di•œy
 *
di•œy
;

13 
Wödow
 
wödow
;

14 *
ªs_«me
, *
ªs_˛ass
;

16 
XCœssHöt
 
˛ass_höts
;

19 
˛ass_höts
.
ªs_˛ass
 =Ñes_class;

20 
˛ass_höts
.
ªs_«me
 =Ñes_name;

23 
	`XSëCœssHöt
(
di•œy
, 
wödow
, &
˛ass_höts
);

27 
	}
}

	@color.c

2 
	~<°dio.h
>

3 
	~<X11/Xlib.h
>

4 
	~<X11/Xutû.h
>

5 
	~"ªtu∫s.h
"

6 
	~"debug.h
"

7 
	~"myxlib.h
"

11 
	$AŒocNamedCﬁ‹
(
di•œy
, 
cﬁ‹m≠
, 
cﬁ‹«me
, 
deÁu…_cﬁ‹
)

12 
Di•œy
 *
di•œy
;

13 
Cﬁ‹m≠
 
cﬁ‹m≠
;

14 *
cﬁ‹«me
;

15 
deÁu…_cﬁ‹
;

17 
XCﬁ‹
 
h¨dw¨ecﬁ‹
, 
exa˘cﬁ‹
;

18 
cﬁ‹
;

19 
°©us
;

22 
°©us
 = 
	`XAŒocNamedCﬁ‹
(
di•œy
, 
cﬁ‹m≠
, 
cﬁ‹«me
,

23 &
h¨dw¨ecﬁ‹
, &
exa˘cﬁ‹
);

24 
°©us
 != 0)

26 
cﬁ‹
 = 
h¨dw¨ecﬁ‹
.
pixñ
;

30 
cﬁ‹
 = 
deÁu…_cﬁ‹
;

34 (
cﬁ‹
);

35 
	}
}

	@colormap.c

2 
	~<°dio.h
>

3 
	~<X11/Xlib.h
>

4 
	~<X11/Xutû.h
>

5 
	~"ªtu∫s.h
"

6 
	~"debug.h
"

7 
	~"myxlib.h
"

11 
	$SëUpCﬁ‹m≠
(
di•œy
, 
s¸ìn
, 
wödow
, 
visuÆ
, 
cﬁ‹m≠
)

12 
Di•œy
 *
di•œy
;

13 
s¸ìn
;

14 
Wödow
 
wödow
;

15 
VisuÆ
 *
visuÆ
;

16 
Cﬁ‹m≠
 *
cﬁ‹m≠
;

18 
°©us
 = 
FÆ£
;

21 
visuÆ
 =
	`DeÁu…VisuÆ
(
di•œy
, 
s¸ìn
))

23 *
cﬁ‹m≠
 = 
	`DeÁu…Cﬁ‹m≠
(
di•œy
, 
s¸ìn
);

24 
°©us
 = 
True
;

28 
visuÆ
 =
C›yFromP¨ít
)

29 
visuÆ
 = 
	`DeÁu…VisuÆ
(
di•œy
, 
s¸ìn
);

30 *
cﬁ‹m≠
 = 
	`XCª©eCﬁ‹m≠
(
di•œy
, 
wödow
, 
visuÆ
, 
AŒocN⁄e
);

31 *
cﬁ‹m≠
 !
N⁄e
)

33 
	`XSëWödowCﬁ‹m≠
(
di•œy
, 
wödow
, *
cﬁ‹m≠
);

34 
°©us
 = 
True
;

38 *
cﬁ‹m≠
 = 
	`DeÁu…Cﬁ‹m≠
(
di•œy
, 
s¸ìn
);

43 (
°©us
);

44 
	}
}

	@connect.c

2 
	~<°dio.h
>

3 
	~<X11/Xlib.h
>

4 
	~"ªtu∫s.h
"

5 
	~"debug.h
"

6 
	~"myxlib.h
"

9 
Di•œy
 *

10 
	$C⁄√˘ToSîvî
(
di•œy_«me
, 
s¸ìn
, 
roŸwödow
)

11 *
di•œy_«me
;

12 *
s¸ìn
;

13 
Wödow
 *
roŸwödow
;

15 
Di•œy
 *
di•œy
;

18 
di•œy
 = 
	`XO≥nDi•œy
(
di•œy_«me
);

19 
di•œy
 =(
Di•œy
 *)
NULL
)

21 
	`ERRORS
("cannot connectÅo X server.\n",

22 
	`XDi•œyName
(
di•œy_«me
), 
EINVAL
);

23 
	`exô
(2);

27 *
s¸ìn
 = 
	`DeÁu…S¸ìn
(
di•œy
);

30 *
roŸwödow
 = 
	`RoŸWödow
(
di•œy
, *
s¸ìn
);

33 (
di•œy
);

34 
	}
}

	@da_draw.c

2 
	~<°dio.h
>

3 
	~<˘y≥.h
>

4 
	~<X11/Xlib.h
>

5 
	~"ªtu∫s.h
"

6 
	~"debug.h
"

7 
	~"myxlib.h
"

8 
	~"toﬁkô.h
"

9 
	~"døw≠p.h
"

12 
	gdøwög_°rög
[400];

13 
Wödow
 
	gdøwög_wödow
;

14 
Pixm≠
 
	gdøwög_pixm≠
;

15 
GC
 
	gpixm≠_gc
;

16 
GC
 
	gdøwög_gc
;

19 
døwög_mode
;

20 
døwög_cﬁ‹
;

21 
bœck
, 
whôe
;

25 
	$DøwIãm
(
di•œy
, 
sh≠e
, 
x1
, 
y1
, 
x2
, 
y2
)

26 
Di•œy
 *
di•œy
;

27 
sh≠e
;

28 
x1
, 
y1
, 
x2
, 
y2
;

30 
ch™ged_Êag
;

32 
	`MaöèöUndo
(
di•œy
);

33 
	`DøwSh≠e
(
di•œy
, 
døwög_wödow
, 
døwög_gc
, 
sh≠e
,

34 
x1
, 
y1
, 
x2
, 
y2
);

35 
	`DøwSh≠e
(
di•œy
, 
døwög_pixm≠
, 
pixm≠_gc
, 
sh≠e
,

36 
x1
, 
y1
, 
x2
, 
y2
);

37 
ch™ged_Êag
 = 
BITMAP_CHANGED
;

39 
	}
}

43 
	$DøwSh≠e
(
di•œy
, 
døwabÀ
, 
gc
, 
sh≠e
, 
x1
, 
y1
, 
x2
, 
y2
)

44 
Di•œy
 *
di•œy
;

45 
DøwabÀ
 
døwabÀ
;

46 
GC
 
gc
;

47 
sh≠e
;

48 
x1
, 
y1
, 
x2
, 
y2
;

50 
width
, 
height
;

52 
height
 = 
y2
 - 
y1
;

53 
width
 = 
x2
 - 
x1
;

55 
sh≠e
)

57 
DRAW_LINE
:

58 
	`XDøwLöe
(
di•œy
, 
døwabÀ
, 
gc
, 
x1
, 
y1
, 
x2
, 
y2
);

60 
DRAW_POINTS
:

61 
	`XDøwPoöt
(
di•œy
, 
døwabÀ
, 
gc
, 
x2
, 
y2
);

63 
DRAW_RECT
:

64 (
height
 > 1Ë&& (
width
 > 1))

66 
	`XDøwRe˘™gÀ
(
di•œy
, 
døwabÀ
, 
gc
,

67 
x1
, 
y1
, 
width
, 
height
);

70 
FILL_RECT
:

71 (
height
 > 1Ë&& (
width
 > 1))

73 
	`XFûlRe˘™gÀ
(
di•œy
, 
døwabÀ
, 
gc
,

74 
x1
, 
y1
, 
width
, 
height
);

77 
DRAW_OVAL
:

78 (
height
 > 1Ë&& (
width
 > 1))

80 
	`DøwOvÆ
(
di•œy
, 
døwabÀ
, 
gc
, 
x1
, 
y1
, 
width
, 
height
);

83 
FILL_OVAL
:

84 (
height
 > 1Ë&& (
width
 > 1))

86 
	`FûlOvÆ
(
di•œy
, 
døwabÀ
, 
gc
, 
x1
, 
y1
, 
width
, 
height
);

89 
DRAW_TEXT
:

90 
	`°æí
(
døwög_°rög
) > 0)

92 
	`XDøwImageSåög
(
di•œy
, 
døwabÀ
, 
gc
, 
x1
, 
y1
,

93 
døwög_°rög
, 
	`°æí
(drawing_string));

98 
	}
}

102 
	$SëDøwAµCﬁ‹
(
di•œy
, 
cﬁ‹
)

103 
Di•œy
 *
di•œy
;

104 
cﬁ‹
;

106 
døwög_mode
 = 
NOT_DRAWING
;

107 
døwög_cﬁ‹
 = 
cﬁ‹
;

108 
døwög_cﬁ‹
 =
DRAWING_BLACK
)

110 
	`XSëF‹eground
(
di•œy
, 
døwög_gc
, 
bœck
);

111 
	`XSëBackground
(
di•œy
, 
døwög_gc
, 
whôe
);

112 
	`XSëF‹eground
(
di•œy
, 
pixm≠_gc
, 1L);

113 
	`XSëBackground
(
di•œy
, 
pixm≠_gc
, 0L);

117 
	`XSëF‹eground
(
di•œy
, 
døwög_gc
, 
whôe
);

118 
	`XSëBackground
(
di•œy
, 
døwög_gc
, 
bœck
);

119 
	`XSëF‹eground
(
di•œy
, 
pixm≠_gc
, 0L);

120 
	`XSëBackground
(
di•œy
, 
pixm≠_gc
, 1L);

123 
	}
}

	@da_edit.c

2 
	~<°dio.h
>

3 
	~<˘y≥.h
>

4 
	~<X11/Xlib.h
>

5 
	~<X11/keysym.h
>

6 
	~<X11/keysymdef.h
>

7 
	~"ªtu∫s.h
"

8 
	~"debug.h
"

9 
	~"myxlib.h
"

10 
	~"toﬁkô.h
"

11 
	~"døw≠p.h
"

14 
	gdøwög_œ°_x
 = 0;

15 
	gdøwög_œ°_y
 = 0;

16 
	gdøwög_x
 = 0;

17 
	gdøwög_y
 = 0;

18 
	gdøwög_°rög
[400];

19 
Wödow
 
	gdøwög_wödow
;

20 
GC
 
	gupd©e_gc
;

21 
GC
 
	gdøwög_gc
;

22 
GC
 
	gx‹_gc
;

23 
	gedôög_width
 = 0;

24 
	gedôög_height
 = 0;

27 
døwög_mode
;

28 
døwög_cﬁ‹
;

29 
døwög_sh≠e
;

30 
Pixm≠
 
døwög_pixm≠
;

31 
GC
 
pixm≠_gc
;

32 
XF⁄tSåu˘
 *
døw≠p_f⁄t
;

33 
bœck
, 
whôe
;

37 
	$Cª©eEdôögGCs
(
di•œy
, 
wödow
)

38 
Di•œy
 *
di•œy
;

39 
Wödow
 
wödow
;

41 
x‹_gc
 = 
	`Cª©eX‹GC
(
di•œy
, 
wödow
, 
bœck
, 
whôe
);

42 
døwög_gc
 = 
	`Cª©eGC
(
di•œy
, 
wödow
, 
bœck
, 
whôe
);

43 
upd©e_gc
 = 
	`Cª©eGC
(
di•œy
, 
wödow
, 
bœck
, 
whôe
);

44 
	`XSëF⁄t
(
di•œy
, 
døwög_gc
, 
døw≠p_f⁄t
->
fid
);

45 
	`XSëF⁄t
(
di•œy
, 
x‹_gc
, 
døw≠p_f⁄t
->
fid
);

47 
	}
}

51 
	$Cª©eEdôögWödow
(
di•œy
, 
∑ª¡
, 
¨gc
, 
¨gv
, 
x
, 
y
, 
width
, 
height
,

52 
evítmask
, 
visuÆ
)

53 
Di•œy
 *
di•œy
;

54 
Wödow
 
∑ª¡
;

55 
¨gc
;

56 **
¨gv
;

57 
x
, 
y
, 
width
, 
height
;

58 
evítmask
;

59 
VisuÆ
 *
visuÆ
;

61 
id
, 
°©us
, 
i
;

62 *
∑ømëî
;

65 
∑ømëî
 = 
	`FödP¨amëî
(
¨gc
, 
¨gv
, "-size");

66 
∑ømëî
 !(*)
NULL
)

68 
i
 = 
	`ssˇnf
(
∑ømëî
, "%dx%d", &
edôög_width
, &
edôög_height
);

69 
i
 < 1Ë
edôög_width
 = 
width
;

70 
edôög_width
 < 16)Éditing_width = 16;

71 
i
 < 2Ë
edôög_height
 = 
height
;

72 
edôög_height
 < 16)Éditing_height = 16;

76 
edôög_width
 = 
width
;

77 
edôög_height
 = 
height
;

81 
id
 = 
	`Cª©eToﬁWödow
(
di•œy
, 
∑ª¡
, 
x
, 
y
, 
edôög_width
,

82 
edôög_height
, 
bœck
, 
whôe
, 
evítmask
, 
visuÆ
);

83 
	`ToﬁSëGroup
(
id
, -99);

86 
	`ToﬁSëFun˘i⁄s
(
id
, 
EdôögDøwFunc
, 
EdôögEvítFunc
, 
NuŒU£rFunc
);

89 
døwög_wödow
 = 
	`ToﬁGëWödow
(
id
);

92 
	`Cª©eEdôögGCs
(
di•œy
, 
døwög_wödow
);

95 
°©us
 = 
	`Cª©eDøwögPixm≠
(
di•œy
, 
∑ª¡
, 
edôög_width
,

96 
edôög_height
);

97 
°©us
 =
True
)

99 
°©us
 = 
	`Cª©eUndoPixm≠
(
di•œy
, 
∑ª¡
, 
edôög_width
,

100 
edôög_height
);

102 
°©us
 =
FÆ£
)

104 
	`ERROR
("Áûuª cª©ög bô m≠s.", 
EINVAL
);

105 
	`XClo£Di•œy
(
di•œy
);

106 
	`exô
(2);

108 *
døwög_°rög
 = 0;

110 
	}
}

114 
	$ResizeEdôögWödow
(
width
, 
height
)

115 
width
, 
height
;

117 (
edôög_width
 !
width
Ë|| (
edôög_height
 !
height
))

119 
	`ToﬁResize
(
EDITING_WINDOW
, 
width
, 
height
);

120 
edôög_width
 = 
width
;

121 
edôög_height
 = 
height
;

124 
	}
}

128 
	$EdôögDøwFunc
(
di•œy
, 
id
, 
evít
)

129 
Di•œy
 *
di•œy
;

130 
id
;

131 
XExpo£Evít
 *
evít
;

133 
	`Upd©eWödowFromBôm≠
(
di•œy
, 
døwög_wödow
, 
upd©e_gc
,

134 
døwög_pixm≠
, 
evít
, 
edôög_width
, 
edôög_height
);

136 
	}
}

140 
	$EdôögU£rFunc
(
id
)

141 
id
;

144 
	}
}

148 
	$EdôögEvítFunc
(
di•œy
, 
id
, 
evít
, 
keysym
, 
°rög
)

149 
Di•œy
 *
di•œy
;

150 
id
;

151 
XEvít
 *
evít
;

152 
KeySym
 
keysym
;

153 *
°rög
;

155 
døwög_mode
 =
DRAWING
)

157 
	`DøwSh≠e
(
di•œy
, 
døwög_wödow
, 
x‹_gc
, 
døwög_sh≠e
,

158 
døwög_œ°_x
, 
døwög_œ°_y
, 
døwög_x
, 
døwög_y
);

160 
evít
->
ty≥
)

162 
MŸi⁄NŸify
:

163 
døwög_mode
 =
DRAWING
)

165 
døwög_x
 = 
evít
->
xbuâ⁄
.
x
;

166 
døwög_y
 = 
evít
->
xbuâ⁄
.
y
;

169 
Buâ⁄Pªss
:

170 
døwög_mode
 !
DRAWING
)

172 
døwög_mode
 = 
DRAWING
;

173 
døwög_œ°_x
 = 
evít
->
xbuâ⁄
.
x
;

174 
døwög_œ°_y
 = 
evít
->
xbuâ⁄
.
y
;

175 
døwög_x
 = 
evít
->
xbuâ⁄
.
x
;

176 
døwög_y
 = 
evít
->
xbuâ⁄
.
y
;

177 *
døwög_°rög
 = 0;

180 
Buâ⁄Rñó£
:

181 
døwög_mode
 =
DRAWING
)

183 
døwög_mode
 = 
NOT_DRAWING
;

184 
døwög_x
 = 
evít
->
xbuâ⁄
.
x
;

185 
døwög_y
 = 
evít
->
xbuâ⁄
.
y
;

186 
	`DøwIãm
(
di•œy
, 
døwög_sh≠e
, 
døwög_œ°_x
,

187 
døwög_œ°_y
, 
døwög_x
, 
døwög_y
);

190 
KeyPªss
:

191 
døwög_sh≠e
 =
DRAW_TEXT
)

193 
døwög_mode
 = 
DRAWING
;

194 
	`EdôText
(
di•œy
, 
id
, 
keysym
, 
°rög
);

198 
døwög_mode
 =
DRAWING
)

200 
	`DøwSh≠e
(
di•œy
, 
døwög_wödow
, 
x‹_gc
, 
døwög_sh≠e
,

201 
døwög_œ°_x
, 
døwög_œ°_y
, 
døwög_x
, 
døwög_y
);

204 
	}
}

208 
	$SëDøwögCﬁ‹
(
id
)

209 
id
;

211 
Di•œy
 *
di•œy
;

212 
di•œy
 = 
	`ToﬁGëDi•œy
(
id
);

213 
	`SëDøwAµCﬁ‹
(
di•œy
, 
id
);

215 
	}
}

219 
	$WùeOut
(
id
)

220 
id
;

222 
ﬁd_cﬁ‹
;

223 
Di•œy
 *
di•œy
;

224 
di•œy
 = 
	`ToﬁGëDi•œy
(
id
);

225 
ﬁd_cﬁ‹
 = 
døwög_cﬁ‹
;

226 
	`SëDøwAµCﬁ‹
(
di•œy
, 
DRAWING_WHITE
);

227 
	`DøwIãm
(
di•œy
, 
FILL_RECT
, 0, 0, 
edôög_width
, 
edôög_height
);

228 
	`SëDøwAµCﬁ‹
(
di•œy
, 
ﬁd_cﬁ‹
);

229 
	`UnhighlightPushBuâ⁄
(
id
);

230 
	`XFlush
(
di•œy
);

232 
	}
}

235 
	$EdôText
(
di•œy
, 
id
, 
keysym
, 
°rög
)

236 
Di•œy
 *
di•œy
;

237 
id
;

238 
KeySym
 
keysym
;

239 *
°rög
;

241 
Àngth
;

242 
keysym
 < 255)

244 
	`i•röt
(
keysym
))

246 
	`°rˇt
(
døwög_°rög
, 
°rög
);

251 
keysym
)

253 
XK_Rëu∫
:

254 
	`DøwIãm
(
di•œy
, 
døwög_sh≠e
, 
døwög_œ°_x
,

255 
døwög_œ°_y
, 
døwög_x
, 
døwög_y
);

256 
døwög_mode
 = 
NOT_DRAWING
;

257 *
døwög_°rög
 = 0;

260 
XK_Dñëe
:

261 
XK_BackS∑˚
:

262 
Àngth
 = 
	`°æí
(
døwög_°rög
);

263 
Àngth
 > 0)

265 
	`ToﬁRedøw
(
id
);

266 
Àngth
--;

267 
døwög_°rög
[
Àngth
] = 0;

268 
Àngth
 > 0)

270 
	`DøwSh≠e
(
di•œy
, 
døwög_wödow
,

271 
x‹_gc
, 
døwög_sh≠e
,

272 
døwög_œ°_x
, 
døwög_œ°_y
,

273 
døwög_x
, 
døwög_y
);

280 
	}
}

	@da_file.c

2 
	~<°dio.h
>

3 
	~<˘y≥.h
>

4 
	~<°rög.h
>

5 
	~<X11/Xlib.h
>

6 
	~<X11/Xutû.h
>

7 
	~"ªtu∫s.h
"

8 
	~"debug.h
"

9 
	~"myxlib.h
"

10 
	~"toﬁkô.h
"

11 
	~"døw≠p.h
"

14  
	#MAX_CHARS
 400

	)
17 
	gda_fûíame
[
MAX_CHARS
+1];

20 
	$P›UpLﬂdFûe
(
id
)

21 
id
;

24 
	`SëDülogD©a
("");

25 
	`SëDülogProm±
("enterÇame of fileÅoÜoad");

26 
	`SëDülogCÆlback
(
LﬂdFûe
);

29 
	`P›UpDülog
();

30 
	`UnhighlightPushBuâ⁄
(
id
);

32 
	}
}

35 
	$LﬂdFûe
(
id
)

36 
id
;

38 
fûíame
[200];

39 
Wödow
 
maö_wödow
;

41 
	`UnhighlightPushBuâ⁄
(
id
);

42 
	`P›DownDülog
(-1);

43 
	`GëDülogD©a
(
fûíame
);

44 
	`LﬂdDøw≠pFûe
(
	`ToﬁGëDi•œy
(
id
), 
maö_wödow
, 
fûíame
);

46 
	}
}

49 
	$LﬂdDøw≠pFûe
(
di•œy
, 
wödow
, 
fûíame
)

50 
Di•œy
 *
di•œy
;

51 
Wödow
 
wödow
;

52 *
fûíame
;

54 
width
, 
height
;

55 
Pixm≠
 
√w_bôm≠
;

56 
Pixm≠
 
døwög_pixm≠
;

57 
GC
 
pixm≠_gc
;

58 
edôög_width
, 
edôög_height
;

60 
√w_bôm≠
 = 
	`LﬂdBôm≠
(
di•œy
, 
wödow
, 
fûíame
, &
width
, &
height
);

61 
√w_bôm≠
 =(
Pixm≠
Ë
N⁄e
)

63 
	`ERRORS
("îr‹Üﬂdög bôm≠ fûe.", 
fûíame
, 
EINVAL
);

66 (
edôög_width
 !
width
Ë|| (
edôög_height
 !
height
))

68 
	`De°royUndoPixm≠
(
di•œy
);

69 
	`De°royDøwPixm≠
(
di•œy
);

70 
	`Cª©eUndoPixm≠
(
di•œy
, 
wödow
, 
width
, 
height
);

71 
	`Cª©eDøwögPixm≠
(
di•œy
, 
wödow
, 
width
, 
height
);

72 
	`ResizeEdôögWödow
(
width
, 
height
);

74 
	`C›yPœ√
(
di•œy
, 
√w_bôm≠
, 
døwög_pixm≠
, 
pixm≠_gc
,

75 0, 0, 
width
, 
height
, width, height);

76 
	`XFlush
(
di•œy
);

77 
	`XFªePixm≠
(
di•œy
, 
√w_bôm≠
);

78 
	`ToﬁRedøw
(
EDITING_WINDOW
);

79 
	`SëFûeName
(
di•œy
, 
wödow
, 
fûíame
);

80 
	`XFlush
(
di•œy
);

82 
	}
}

85 
	$CheckF‹FûeLﬂd
(
di•œy
, 
wödow
, 
¨gc
, 
¨gv
)

86 
Di•œy
 *
di•œy
;

87 
Wödow
 
wödow
;

88 
¨gc
;

89 **
¨gv
;

91 *
fûíame
;

92 
fûíame
 = 
	`FödP¨amëî
(
¨gc
, 
¨gv
, "-file");

93 
fûíame
 =(*)
NULL
)

95 
fûíame
 = 
	`FödP¨amëî
(
¨gc
, 
¨gv
, "-load");

97 
fûíame
 !(*)
NULL
)

99 
	`LﬂdDøw≠pFûe
(
di•œy
, 
wödow
, 
fûíame
);

102 
	}
}

105 
	$SaveFûe
(
id
)

106 
id
;

108 
edôög_width
, 
edôög_height
;

109 
Pixm≠
 
døwög_pixm≠
;

110 
ch™ged_Êag
;

111 
°©us
;

112 
Di•œy
 *
di•œy
;

114 
di•œy
 = 
	`ToﬁGëDi•œy
(
id
);

115 
	`GëDülogD©a
(
da_fûíame
);

116 
°©us
 = 
	`SaveBôm≠
(
di•œy
, 
da_fûíame
, 
døwög_pixm≠
,

117 
edôög_width
, 
edôög_height
);

118 
°©us
 !
Bôm≠Suc˚ss
)

120 
	`ERRORS
("îr‹ i¿ßvög bôm≠Åÿfûe.", 
da_fûíame
, 
î∫o
);

124 
ch™ged_Êag
 = 
BITMAP_SAVED
;

126 
	`UnhighlightPushBuâ⁄
(
id
);

128 
	}
}

131 
	$SëFûeName
(
di•œy
, 
wödow
, 
fûíame
)

132 
Di•œy
 *
di•œy
;

133 
Wödow
 
wödow
;

134 *
fûíame
;

136 
wödow_«me
[400];

137 
ch™ged_Êag
;

139 
	`°∫˝y
(
da_fûíame
, 
fûíame
, 
MAX_CHARS
);

140 
da_fûíame
[
MAX_CHARS
] = 0;

141 
	`SëDülogD©a
(
da_fûíame
);

142 
	`•rötf
(
wödow_«me
, "DøwAµ: %s", 
da_fûíame
);

143 
	`SëWödowName
(
di•œy
, 
wödow
, 
wödow_«me
);

144 
ch™ged_Êag
 = 
BITMAP_CHANGED
;

146 
	}
}

149 
	$Quô
(
id
)

150 
id
;

152 
ch™ged_Êag
;

153 
quô_Êag
 = 0;

155 
quô_Êag
 > 0Ë
	`SaveFûe
(
id
);

156 
ch™ged_Êag
 =
BITMAP_CHANGED
)

158 
	`SëDülogD©a
(
da_fûíame
);

159 
	`SëDülogProm±
("FileÇot saved. Save it?");

160 
	`SëDülogCÆlback
(
Quô
);

161 
	`SëDülogC™˚lCÆlback
(
RóŒyQuô
);

162 
quô_Êag
 = 1;

163 
	`P›UpDülog
();

167 
	`exô
(0);

169 
	}
}

172 
	$RóŒyQuô
(
id
)

173 
id
;

175 
	`exô
(0);

176 
	}
}

	@da_meta.c

2 
	~<°dio.h
>

3 
	~<X11/Xlib.h
>

4 
	~"ªtu∫s.h
"

5 
	~"debug.h
"

6 
	~"myxlib.h
"

7 
	~"toﬁkô.h
"

8 
	~"døw≠p.h
"

12 
	$H™dÀMëaKey
(
°rög
)

13 *
°rög
;

15 
XEvít
 
evít
;

16 
KeySym
 
keysym
;

17 
id
 = -1;

18 
°rög
[0])

48 
id
 >= 0)

50 
keysym
 = 0;

51 
evít
.
ty≥
 = 
Buâ⁄Pªss
;

52 
	`PushBuâ⁄Evít
(
	`ToﬁGëDi•œy
(
id
), id, &
evít
,

53 
keysym
, 
°rög
);

56 
	}
}

	@da_pix.c

2 
	~<°dio.h
>

3 
	~<X11/Xlib.h
>

4 
	~"ªtu∫s.h
"

5 
	~"debug.h
"

6 
	~"myxlib.h
"

7 
	~"toﬁkô.h
"

8 
	~"døw≠p.h
"

11 
Pixm≠
 
	gdøwög_pixm≠
;

12 
GC
 
	gpixm≠_gc
;

15 
XF⁄tSåu˘
 *
døw≠p_f⁄t
;

19 
	$Cª©eDøwögPixm≠
(
di•œy
, 
∑ª¡
, 
width
, 
height
)

20 
Di•œy
 *
di•œy
;

21 
Wödow
 
∑ª¡
;

22 
width
, 
height
;

25 
døwög_pixm≠
 = 
	`XCª©ePixm≠
(
di•œy
, 
∑ª¡
, 
width
, 
height
, 1);

28 
pixm≠_gc
 = 
	`Cª©eGC
(
di•œy
, 
døwög_pixm≠
, 0L, 0L);

31 
	`XFûlRe˘™gÀ
(
di•œy
, 
døwög_pixm≠
, 
pixm≠_gc
, 0, 0, 
width
, 
height
);

34 
	`XSëF‹eground
(
di•œy
, 
pixm≠_gc
, 1L);

37 
	`XSëF⁄t
(
di•œy
, 
pixm≠_gc
, 
døw≠p_f⁄t
->
fid
);

38 (
døwög_pixm≠
 !(
Pixm≠
)
N⁄e
Ë&& (
pixm≠_gc
 !(
GC
)None))

39 (
True
);

41 (
FÆ£
);

42 
	}
}

46 
	$De°royDøwPixm≠
(
di•œy
)

47 
Di•œy
 *
di•œy
;

49 
	`XFªePixm≠
(
di•œy
, 
døwög_pixm≠
);

50 
	`XFªeGC
(
di•œy
, 
pixm≠_gc
);

52 
	}
}

	@da_undo.c

2 
	~<°dio.h
>

3 
	~<X11/Xlib.h
>

4 
	~"ªtu∫s.h
"

5 
	~"debug.h
"

6 
	~"myxlib.h
"

7 
	~"toﬁkô.h
"

8 
	~"døw≠p.h
"

11 
Pixm≠
 
	gundo_pixm≠
;

12 
GC
 
	gundo_gc
;

16 
	$Cª©eUndoPixm≠
(
di•œy
, 
∑ª¡
, 
width
, 
height
)

17 
Di•œy
 *
di•œy
;

18 
Wödow
 
∑ª¡
;

19 
width
, 
height
;

22 
undo_pixm≠
 = 
	`XCª©ePixm≠
(
di•œy
, 
∑ª¡
, 
width
, 
height
, 1);

23 
undo_pixm≠
 =(
Pixm≠
)
N⁄e
Ë(
FÆ£
);

26 
undo_gc
 = 
	`Cª©eGC
(
di•œy
, 
undo_pixm≠
, 0L, 0L);

29 
	`XFûlRe˘™gÀ
(
di•œy
, 
undo_pixm≠
, 
undo_gc
, 0, 0, 
width
, 
height
);

32 
	`XSëF‹eground
(
di•œy
, 
undo_gc
, 1L);

33 (
True
);

34 
	}
}

38 
	$De°royUndoPixm≠
(
di•œy
)

39 
Di•œy
 *
di•œy
;

41 
	`XFªePixm≠
(
di•œy
, 
undo_pixm≠
);

42 
	`XFªeGC
(
di•œy
, 
undo_gc
);

44 
	}
}

48 
	$MaöèöUndo
(
di•œy
)

49 
Di•œy
 *
di•œy
;

51 
edôög_width
, 
edôög_height
;

52 
Pixm≠
 
døwög_pixm≠
;

55 
	`C›yPœ√
(
di•œy
, 
døwög_pixm≠
, 
undo_pixm≠
, 
undo_gc
,

56 0, 0, 
edôög_width
, 
edôög_height
,Éditing_width,

57 
edôög_height
);

59 
	}
}

62 
	$Undo
(
id
)

63 
id
;

65 
døwög_cﬁ‹
;

66 
edôög_width
, 
edôög_height
;

67 
Pixm≠
 
døwög_pixm≠
;

68 
GC
 
døwög_gc
, 
pixm≠_gc
;

69 
Wödow
 
døwög_wödow
;

70 
ﬁd_cﬁ‹
;

71 
Di•œy
 *
di•œy
;

74 
di•œy
 = 
	`ToﬁGëDi•œy
(
id
);

75 
ﬁd_cﬁ‹
 = 
døwög_cﬁ‹
;

76 
	`SëDøwAµCﬁ‹
(
di•œy
, 
DRAWING_BLACK
);

77 
	`C›yPœ√
(
di•œy
, 
undo_pixm≠
, 
døwög_pixm≠
, 
pixm≠_gc
,

78 0, 0, 
edôög_width
, 
edôög_height
,Éditing_width,

79 
edôög_height
);

80 
	`C›yPœ√
(
di•œy
, 
undo_pixm≠
, 
døwög_wödow
, 
døwög_gc
,

81 0, 0, 
edôög_width
, 
edôög_height
,Éditing_width,

82 
edôög_height
);

83 
	`SëDøwAµCﬁ‹
(
di•œy
, 
ﬁd_cﬁ‹
);

84 
	`UnhighlightPushBuâ⁄
(
id
);

85 
	`XFlush
(
di•œy
);

87 
	}
}

	@debug.h

1 #i‚de‡
__DEBUG_H


2  
	#__DEBUG_H


	)
4 
	~<î∫o.h
>

7 #ifde‡
DEBUG


8  
	#TRACE
(Ë
	`Ârötf
(
°dîr
, "%s'%d\n", 
__FILE__
, 
__LINE__
)

	)
9  
	#DUMPS
(
°r
Ë
	`Ârötf
(
°dîr
, "%s'%d: <%s>\n", 
__FILE__
, 
__LINE__
, (°r))

	)
10  
	#DUMPL
(
°r
Ë
	`Ârötf
(
°dîr
, "%s'%d: <%lu>\n", 
__FILE__
, 
__LINE__
, (°r))

	)
11  
	#DUMPX
(
°r
Ë
	`Ârötf
(
°dîr
, "%s'%d: <%lx>\n", 
__FILE__
, 
__LINE__
, (°r))

	)
12  
	#DUMPI
(
°r
Ë
	`Ârötf
(
°dîr
, "%s'%d: <%d>\n", 
__FILE__
, 
__LINE__
, (°r))

	)
13  
	#DUMPF
(
°r
Ë
	`Ârötf
(
°dîr
, "%s'%d: <%lf>\n", 
__FILE__
, 
__LINE__
, ()(°r))

	)
14  
	#RETURN
(
ªtvÆ
Ë{ 
	`TRACE
(); ‘ëvÆ); }

	)
16  
	#TRACE
(Ë

	)
17  
	#DUMPS
(
°r
Ë

	)
18  
	#DUMPL
(
°r
Ë

	)
19  
	#DUMPX
(
°r
Ë

	)
20  
	#DUMPI
(
°r
Ë

	)
21  
	#DUMPF
(
°r
Ë

	)
22  
	#RETURN
(
ªtvÆ
Ë‘ëvÆ)

	)
24  
	#ERROR
(
îrmsg
, 
îrvÆ
) \

25 
	`Ârötf
(
°dîr
, "%s'%d: %†”ºno=%d)\n", 
__FILE__
, 
__LINE__
, 
îrmsg
, 
îrvÆ
)

	)
26  
	#ERRORS
(
îrmsg
, 
îrd©a
, 
îrvÆ
) \

27 
	`Ârötf
(
°dîr
, "%s'%d: %†(d©®%s,Éºno=%d)\n", 
__FILE__
, 
__LINE__
, 
îrmsg
, 
îrd©a
, 
îrvÆ
)

	)
28  
	#ERRORI
(
îrmsg
, 
îrd©a
, 
îrvÆ
) \

29 
	`Ârötf
(
°dîr
, "%s'%d: %†(d©®%d,Éºno=%d)\n", 
__FILE__
, 
__LINE__
, 
îrmsg
, ()
îrd©a
, 
îrvÆ
)

	)
	@dialog.c

2 
	~<°dio.h
>

3 
	~<X11/Xlib.h
>

4 
	~"ªtu∫s.h
"

5 
	~"debug.h
"

6 
	~"myxlib.h
"

7 
	~"toﬁkô.h
"

10  
	#BUTTON_WIDTH
 60

	)
13 
Wödow
 
	gdülog_wödow
 = (Wödow)
N⁄e
;

14 
	gdül1_buâ⁄
 = -1;

15 
	gdül2_buâ⁄
 = -1;

16 
	gdül_œbñ
 = -1;

17 
	gdül_edô
 = -1;

18 
	gdülog_up
 = 
FÆ£
;

21 
	gbœck
, 
	gwhôe
, 
	glightgªy
;

24 
Wödow


25 
	$Cª©eDülog
(
di•œy
, 
∑ª¡
, 
ow√r
, 
visuÆ
, 
cﬁ‹m≠
, 
f⁄t_°ru˘
,

26 
≠p_«me
, 
¥om±
, 
ˇŒback
)

27 
Di•œy
 *
di•œy
;

28 
Wödow
 
∑ª¡
, 
ow√r
;

29 
VisuÆ
 *
visuÆ
;

30 
Cﬁ‹m≠
 
cﬁ‹m≠
;

31 
XF⁄tSåu˘
 *
f⁄t_°ru˘
;

32 *
≠p_«me
;

33 *
¥om±
;

34 (*
ˇŒback
)();

36 
x
, 
y
, 
width
, 
height
;

37 
Wödow
 
wödow
;

38 
GC
 
gc
;

39 
buâ⁄_height
;

42 
	`QuîyPoöãr
(
di•œy
, &
x
, &
y
);

43 
width
 = 
BUTTON_WIDTH
*3;

44 
height
 = 
	`F⁄tHeight
(
f⁄t_°ru˘
)*7;

47 
wödow
 = 
	`Cª©eTønsõ¡Wödow
(
di•œy
, 
∑ª¡
, 
ow√r
,

48 
x
, 
y
, 
width
, 
height
, 
bœck
, 
lightgªy
,

49 
KeyPªssMask
, 
visuÆ
, 
cﬁ‹m≠
,

50 
≠p_«me
, "Pop-Up Dialog");

53 
gc
 = 
	`Cª©eGC
(
di•œy
, 
wödow
, 
bœck
, 
whôe
);

54 
	`XSëF⁄t
(
di•œy
, 
gc
, 
f⁄t_°ru˘
->
fid
);

57 
buâ⁄_height
 = 
	`F⁄tHeight
(
f⁄t_°ru˘
)+10;

58 
dül_œbñ
 = 
	`Cª©eTextLabñ
(
di•œy
, 
wödow
, 6, 5,

59 (
width
-12), 
buâ⁄_height
, 
gc
, 
f⁄t_°ru˘
, 
¥om±
);

62 
dül_edô
 = 
	`Cª©eTextE¡ry
(
di•œy
, 
wödow
, 6, (
buâ⁄_height
+10),

63 (
width
-12), 
buâ⁄_height
, 
gc
, 
f⁄t_°ru˘
,

64 "", 
ˇŒback
);

67 
dül1_buâ⁄
 = 
	`Cª©ePushBuâ⁄
(
di•œy
, 
wödow
, 6,

68 (
height
 - 
buâ⁄_height
 - 10),

69 
BUTTON_WIDTH
, 
buâ⁄_height
, 
gc
,

70 
f⁄t_°ru˘
, "OK", 
ˇŒback
);

71 
dül2_buâ⁄
 = 
	`Cª©ePushBuâ⁄
(
di•œy
, 
wödow
,

72 (
width
 - 
BUTTON_WIDTH
 - 10),

73 (
height
 - 
buâ⁄_height
 - 10),

74 
BUTTON_WIDTH
, 
buâ⁄_height
, 
gc
,

75 
f⁄t_°ru˘
, "C™˚l", 
P›DownDülog
);

76 
dülog_wödow
 = 
wödow
;

79 (
wödow
);

80 
	}
}

84 
	$P›DownDülog
(
id
)

85 
id
;

87 
Di•œy
 *
di•œy
;

88 
id
 >0Ë
	`UnhighlightPushBuâ⁄
(id);

89 (
dülog_wödow
 !(
Wödow
)
N⁄e
Ë&& (
dülog_up
 =
True
))

91 
di•œy
 = 
	`ToﬁGëDi•œy
(
id
);

92 
	`XUnm≠Wödow
(
di•œy
, 
dülog_wödow
);

93 
	`XFlush
(
di•œy
);

94 
dülog_up
 = 
FÆ£
;

97 
	}
}

101 
	$P›UpDülog
()

103 
Di•œy
 *
di•œy
;

104 
x
, 
y
;

105 (
dülog_wödow
 !(
Wödow
)
N⁄e
Ë&& (
dülog_up
 =
FÆ£
))

107 
di•œy
 = 
	`ToﬁGëDi•œy
(0);

108 
	`QuîyPoöãr
(
di•œy
, &
x
, &
y
);

109 
	`XMoveWödow
(
di•œy
, 
dülog_wödow
, 
x
, 
y
);

110 
	`XM≠Rai£d
(
di•œy
, 
dülog_wödow
);

111 
	`XM≠Subwödows
(
di•œy
, 
dülog_wödow
);

112 
	`XFlush
(
di•œy
);

113 
dülog_up
 = 
True
;

116 
	}
}

120 
	$GëDülogD©a
(
d©a
)

121 *
d©a
;

123 
dül_edô
 > 0)

124 
	`ToﬁGëName
(
dül_edô
, 
d©a
);

126 
	}
}

130 
	$SëDülogCÆlback
(
ˇŒback
)

131 (*
ˇŒback
)();

133 
dül1_buâ⁄
 >= 0)

134 
	`ToﬁSëU£rFunc
(
dül1_buâ⁄
, 
ˇŒback
);

135 
dül_edô
 >= 0)

136 
	`ToﬁSëU£rFunc
(
dül_edô
, 
ˇŒback
);

138 
	}
}

142 
	$SëDülogC™˚lCÆlback
(
ˇŒback
)

143 (*
ˇŒback
)();

145 
dül2_buâ⁄
 >= 0)

146 
	`ToﬁSëU£rFunc
(
dül2_buâ⁄
, 
ˇŒback
);

148 
	}
}

152 
	$SëDülogD©a
(
√w_d©a
)

153 *
√w_d©a
;

155 
dül_edô
 >= 0)

157 
	`ToﬁSëName
(
dül_edô
, 
√w_d©a
);

158 
	`ToﬁCÀ¨
(
dül_edô
);

159 
	`ToﬁRedøw
(
dül_edô
);

162 
	}
}

165 
	$SëDülogProm±
(
¥om±
)

166 *
¥om±
;

168 
dül_œbñ
 >= 0)

170 
	`ToﬁSëName
(
dül_œbñ
, 
¥om±
);

171 
	`ToﬁCÀ¨
(
dül_œbñ
);

172 
	`ToﬁRedøw
(
dül_œbñ
);

175 
	}
}

	@display.c

2 
	~<°dio.h
>

3 
	~<°rög.h
>

4 
	~<X11/Xlib.h
>

5 
	~<X11/Xutû.h
>

6 
	~"ªtu∫s.h
"

7 
	~"debug.h
"

8 
	~"myxlib.h
"

12 
	$FödDi•œyName
(
¨gc
, 
¨gv
, 
di•œy_«me
)

13 
¨gc
;

14 **
¨gv
;

15 *
di•œy_«me
;

17 *
±r
;

20 
±r
 = 
	`FödP¨amëî
(
¨gc
, 
¨gv
, "-disp");

21 
±r
 !(*)
NULL
)

23 
	`°r˝y
(
di•œy_«me
, 
±r
);

24 (
True
);

28 *
di•œy_«me
 = 0;

29 (
FÆ£
);

31 
	}
}

34 
Di•œy
 *

35 
	$O≥nDi•œy
(
¨gc
, 
¨gv
, 
s¸ìn
, 
roŸwödow
)

36 
¨gc
;

37 **
¨gv
;

38 *
s¸ìn
;

39 
Wödow
 *
roŸwödow
;

41 
di•œy_«me
[
BUFSIZ
];

42 
Di•œy
 *
di•œy
;

45 
	`FödDi•œyName
(
¨gc
, 
¨gv
, 
di•œy_«me
);

48 
di•œy
 = 
	`C⁄√˘ToSîvî
(
di•œy_«me
, 
s¸ìn
, 
roŸwödow
);

51 (
di•œy
);

52 
	}
}

	@drawapp.c

2 
	~<°dio.h
>

3 
	~<˘y≥.h
>

4 
	~<°rög.h
>

5 
	~<X11/Xlib.h
>

6 
	~<X11/Xutû.h
>

7 
	~"ªtu∫s.h
"

8 
	~"debug.h
"

9 
	~"myxlib.h
"

10 
	~"toﬁkô.h
"

11 
	~"døw≠p.h
"

14  
	#FONT_NAME
 "v¨übÀ"

	)
15  
	#FALLBACK_FONT_NAME
 "fixed"

	)
18  
	#EV_MASK
 (
Buâ⁄PªssMask
 | \

19 
Buâ⁄Rñó£Mask
 | \

20 
Buâ⁄MŸi⁄Mask
 | \

21 
KeyPªssMask
 | \

22 
ExposuªMask
)

	)
25  
	#MAX_WIDTH
 48

	)
26  
	#MAX_4_WIDTH
 192

	)
27  
	#BUTTON_WIDTH
 60

	)
30  
	#ICON_FILENAME
 "døw≠p.xbm"

	)
33 
	gbœck
, 
	gwhôe
, 
	glightgªy
, 
	gdimgªy
;

34 
	gdøwög_sh≠e
 = 
DRAW_LINE
;

35 
	gdøwög_mode
 = 
NOT_DRAWING
;

36 
	gdøwög_cﬁ‹
 = 
DRAWING_BLACK
;

37 
	gch™ged_Êag
 = 
BITMAP_SAVED
;

38 
XF⁄tSåu˘
 *
	gdøw≠p_f⁄t
;

39 
Wödow
 
	gmaö_wödow
;

43 
	$SëDøwögSh≠e
(
id
)

44 
id
;

46 
døwög_mode
 = 
NOT_DRAWING
;

47 
døwög_sh≠e
 = 
id
;

49 
	}
}

53 
	$Cª©eBuâ⁄s
(
di•œy
, 
wödow
, 
gc
, 
f⁄t_°ru˘
)

54 
Di•œy
 *
di•œy
;

55 
Wödow
 
wödow
;

56 
GC
 
gc
;

57 
XF⁄tSåu˘
 *
f⁄t_°ru˘
;

59 
y
, 
height
, 
id
;

62 
height
 = 
	`F⁄tHeight
(
f⁄t_°ru˘
)+4;

63 
y
 = 6;

66 
id
 = 
	`Cª©ePushBuâ⁄
(
di•œy
, 
wödow
, 6, 
y
, 
BUTTON_WIDTH
,

67 
height
, 
gc
, 
f⁄t_°ru˘
, "Löe", 
SëDøwögSh≠e
);

68 
	`ToﬁSëGroup
(
id
, 1);

69 
	`ToﬁSëSèã
(
id
, 
True
);

70 
id
 = 
	`Cª©ePushBuâ⁄
(
di•œy
, 
wödow
, 68, 
y
, 
BUTTON_WIDTH
,

71 
height
, 
gc
, 
f⁄t_°ru˘
, "Poöts", 
SëDøwögSh≠e
);

72 
	`ToﬁSëGroup
(
id
, 1);

73 
y
 +
height
 + 2;

75 
id
 = 
	`Cª©ePushBuâ⁄
(
di•œy
, 
wödow
, 6, 
y
, 
BUTTON_WIDTH
,

76 
height
, 
gc
, 
f⁄t_°ru˘
, "Re˘", 
SëDøwögSh≠e
);

77 
	`ToﬁSëGroup
(
id
, 1);

78 
id
 = 
	`Cª©ePushBuâ⁄
(
di•œy
, 
wödow
, 68, 
y
, 
BUTTON_WIDTH
,

79 
height
, 
gc
, 
f⁄t_°ru˘
, "Fû»Re˘", 
SëDøwögSh≠e
);

80 
	`ToﬁSëGroup
(
id
, 1);

81 
y
 +
height
 + 2;

83 
id
 = 
	`Cª©ePushBuâ⁄
(
di•œy
, 
wödow
, 6, 
y
, 
BUTTON_WIDTH
,

84 
height
, 
gc
, 
f⁄t_°ru˘
, "OvÆ", 
SëDøwögSh≠e
);

85 
	`ToﬁSëGroup
(
id
, 1);

86 
id
 = 
	`Cª©ePushBuâ⁄
(
di•œy
, 
wödow
, 68, 
y
, 
BUTTON_WIDTH
,

87 
height
, 
gc
, 
f⁄t_°ru˘
, "Fû»OvÆ", 
SëDøwögSh≠e
);

88 
	`ToﬁSëGroup
(
id
, 1);

89 
y
 +
height
 + 2;

91 
id
 = 
	`Cª©ePushBuâ⁄
(
di•œy
, 
wödow
, 6, 
y
, 
BUTTON_WIDTH
,

92 
height
, 
gc
, 
f⁄t_°ru˘
, "Text", 
SëDøwögSh≠e
);

93 
	`ToﬁSëGroup
(
id
, 1);

94 
y
 +
height
 + 12;

96 
id
 = 
	`Cª©ePushBuâ⁄
(
di•œy
, 
wödow
, 6, 
y
, 
BUTTON_WIDTH
,

97 
height
, 
gc
, 
f⁄t_°ru˘
, "Bœck", 
SëDøwögCﬁ‹
);

98 
	`ToﬁSëGroup
(
id
, 2);

99 
	`ToﬁSëSèã
(
id
, 
True
);

100 
id
 = 
	`Cª©ePushBuâ⁄
(
di•œy
, 
wödow
, 68, 
y
, 
BUTTON_WIDTH
,

101 
height
, 
gc
, 
f⁄t_°ru˘
, "Whôe", 
SëDøwögCﬁ‹
);

102 
	`ToﬁSëGroup
(
id
, 2);

103 
y
 +
height
 + 12;

105 
id
 = 
	`Cª©ePushBuâ⁄
(
di•œy
, 
wödow
, 6, 
y
, 
BUTTON_WIDTH
,

106 
height
, 
gc
, 
f⁄t_°ru˘
, " WùêOut", 
WùeOut
);

107 
id
 = 
	`Cª©ePushBuâ⁄
(
di•œy
, 
wödow
, 68, 
y
, 
BUTTON_WIDTH
,

108 
height
, 
gc
, 
f⁄t_°ru˘
, "Undo", 
Undo
);

109 
y
 +
height
 + 12;

111 
id
 = 
	`Cª©ePushBuâ⁄
(
di•œy
, 
wödow
, 6, 
y
, 
BUTTON_WIDTH
,

112 
height
, 
gc
, 
f⁄t_°ru˘
, "Save", 
SaveFûe
);

113 
id
 = 
	`Cª©ePushBuâ⁄
(
di•œy
, 
wödow
, 68, 
y
, 
BUTTON_WIDTH
,

114 
height
, 
gc
, 
f⁄t_°ru˘
, "Lﬂd...", 
P›UpLﬂdFûe
);

115 
y
 +
height
 + 2;

117 
id
 = 
	`Cª©ePushBuâ⁄
(
di•œy
, 
wödow
, 6, 
y
, 
BUTTON_WIDTH
,

118 
height
, 
gc
, 
f⁄t_°ru˘
, "Quô", 
Quô
);

120 
	}
}

124 
	$EvítLo›
(
di•œy
)

125 
Di•œy
 *
di•œy
;

127 
XEvít
 
evít
;

128 
d⁄e
 = 
FÆ£
;

129 
h™dÀd
;

130 
KeySym
 
keysym
;

131 
°rög
[100];

134  ! 
d⁄e
)

136 
	`XNextEvít
(
di•œy
, &
evít
);

137 
h™dÀd
 = 
	`ToﬁEvít
(&
evít
);

138 
evít
.
ty≥
 =
KeyPªss
)

140 
d⁄e
 = 
	`DecodeKeyPªss
(&
evít
, &
keysym
, 
°rög
);

141 
	`IsMëaKey
(&
evít
Ë=
True
)

143 
	`H™dÀMëaKey
(
°rög
);

148 
	}
}

151 
	$maö
(
¨gc
, 
¨gv
)

152 
¨gc
;

153 **
¨gv
;

155 
Di•œy
 *
di•œy
;

156 
Wödow
 
roŸwödow
;

157 
s¸ìn
;

158 
x
, 
y
, 
width
, 
height
;

159 
VisuÆ
 *
visuÆ
 = 
C›yFromP¨ít
;

160 
GC
 
gc
;

161 
°rög
[200];

162 
dïth
, 
°©us
;

163 
Cﬁ‹m≠
 
cﬁ‹m≠
;

164 
Wödow
 
dülog
;

166 #ifde‡
DEBUG


168 
_Xdebug
;

169 
_Xdebug
 = 1;

172 
di•œy
 = 
	`SèπupX
(
¨gc
, 
¨gv
, &
s¸ìn
, &
roŸwödow
,

173 &
bœck
, &
whôe
, "");

176 
	`°r˝y
(
°rög
, 
FONT_NAME
);

177 
døw≠p_f⁄t
 = 
	`LﬂdF⁄tName
(
di•œy
, 
¨gc
, 
¨gv
, 
°rög
,

178 
FALLBACK_FONT_NAME
);

181 #ifde‡
NOCOLOR


182 
visuÆ
 = 
	`DeÁu…VisuÆ
(
di•œy
, 
s¸ìn
);

183 
dïth
 = 
	`DeÁu…Dïth
(
di•œy
, 
s¸ìn
);

185 
°©us
 = 
	`SëUpVisuÆ
(
di•œy
, 
s¸ìn
, &
visuÆ
, &
dïth
);

186 
°©us
 =
FÆ£
)

188 
	`ERROR
("nÿP£udoCﬁ‹ VisuÆ wa†found, usög deÁu….", 
°©us
);

193 
x
 = 10;

194 
y
 = 10;

195 
width
 = (
BUTTON_WIDTH
*2)+
MAX_4_WIDTH
+24;

196 
height
 = (
	`F⁄tHeight
(
døw≠p_f⁄t
)+1)*14;

199 
maö_wödow
 = 
	`T›Wödow
(
di•œy
, 
roŸwödow
, 
¨gc
, 
¨gv
,

200 &
x
, &
y
, &
width
, &
height
, 
bœck
, 
whôe
,

201 
KeyPªssMask
, 
visuÆ
);

204 #ifde‡
NOCOLOR


205 
cﬁ‹m≠
 = 
	`DeÁu…Cﬁ‹m≠
(
di•œy
, 
s¸ìn
);

207 
°©us
 = 
	`SëUpCﬁ‹m≠
(
di•œy
, 
s¸ìn
, 
maö_wödow
, 
visuÆ
,

208 &
cﬁ‹m≠
);

209 
°©us
 < 1)

211 
	`ERROR
("SëUpCﬁ‹m≠ faûed.", ()
°©us
);

216 #ifde‡
NOCOLOR


217 
bœck
 = 
	`BœckPixñ
(
di•œy
, 
s¸ìn
);

218 
whôe
 = 
	`WhôePixñ
(
di•œy
, 
s¸ìn
);

219 
lightgªy
 = 
	`WhôePixñ
(
di•œy
, 
s¸ìn
);

220 
dimgªy
 = 
	`BœckPixñ
(
di•œy
, 
s¸ìn
);

222 
bœck
 = 
	`AŒocNamedCﬁ‹
(
di•œy
, 
cﬁ‹m≠
, "black",

223 
	`BœckPixñ
(
di•œy
, 
s¸ìn
));

224 
whôe
 = 
	`AŒocNamedCﬁ‹
(
di•œy
, 
cﬁ‹m≠
, "white",

225 
	`WhôePixñ
(
di•œy
, 
s¸ìn
));

226 
lightgªy
 = 
	`AŒocNamedCﬁ‹
(
di•œy
, 
cﬁ‹m≠
, "LightGrey",

227 
	`WhôePixñ
(
di•œy
, 
s¸ìn
));

228 
dimgªy
 = 
	`AŒocNamedCﬁ‹
(
di•œy
, 
cﬁ‹m≠
, "DimGrey",

229 
	`BœckPixñ
(
di•œy
, 
s¸ìn
));

233 
	`LﬂdIc⁄
(
di•œy
, 
maö_wödow
, 
ICON_FILENAME
, 
¨gv
[0]);

236 
gc
 = 
	`Cª©eGC
(
di•œy
, 
maö_wödow
, 
bœck
, 
lightgªy
);

239 
	`XSëF⁄t
(
di•œy
, 
gc
, 
døw≠p_f⁄t
->
fid
);

242 
	`Cª©eEdôögWödow
(
di•œy
, 
maö_wödow
, 
¨gc
, 
¨gv
, 136, 6,

243 
MAX_4_WIDTH
, MAX_4_WIDTH, 
EV_MASK
, 
visuÆ
);

246 
	`Cª©eBuâ⁄s
(
di•œy
, 
maö_wödow
, 
gc
, 
døw≠p_f⁄t
);

249 
dülog
 = 
	`Cª©eDülog
(
di•œy
, 
roŸwödow
, 
maö_wödow
, 
visuÆ
,

250 
cﬁ‹m≠
, 
døw≠p_f⁄t
, 
¨gv
[0],

251 "íã∏«mêo‡fûêtÿlﬂd", 
NuŒU£rFunc
);

254 
	`SëFûeName
(
di•œy
, 
maö_wödow
, "test.xbm");

257 
	`CheckF‹FûeLﬂd
(
di•œy
, 
maö_wödow
, 
¨gc
, 
¨gv
);

260 
	`XM≠Rai£d
(
di•œy
, 
maö_wödow
);

261 
	`XM≠Subwödows
(
di•œy
, 
maö_wödow
);

262 
	`XFlush
(
di•œy
);

265 
ch™ged_Êag
 = 
BITMAP_SAVED
;

268 
	`EvítLo›
(
di•œy
);

271 
	`Quô
(
QUIT_ID
);

274 
	`exô
(0);

275 
	}
}

	@drawapp.h

1 #i‚de‡
__DRAWAPP_H


2  
	#__DRAWAPP_H


	)
5  
	#EDITING_WINDOW
 0

	)
8  
	#DRAW_LINE
 1

	)
9  
	#DRAW_POINTS
 2

	)
10  
	#DRAW_RECT
 3

	)
11  
	#FILL_RECT
 4

	)
12  
	#DRAW_OVAL
 5

	)
13  
	#FILL_OVAL
 6

	)
14  
	#DRAW_TEXT
 7

	)
17  
	#NOT_DRAWING
 0

	)
18  
	#DRAWING
 1

	)
21  
	#DRAWING_BLACK
 8

	)
22  
	#DRAWING_WHITE
 9

	)
25  
	#WIPE_OUT
 10

	)
26  
	#UNDO_LAST
 11

	)
27  
	#SAVE_FILE
 12

	)
28  
	#LOAD_FILE
 13

	)
29  
	#QUIT_ID
 14

	)
32  
	#BITMAP_SAVED
 0

	)
33  
	#BITMAP_CHANGED
 1

	)
36 
Cª©eDøwPixm≠
();

37 
De°royDøwPixm≠
();

38 
Cª©eUndoPixm≠
();

39 
De°royUndoPixm≠
();

40 
MaöèöUndo
();

41 
Undo
();

42 
SëDøwögSh≠e
();

43 
Cª©eBuâ⁄
();

44 
EvítLo›
();

45 
maö
();

46 
DøwIãm
();

47 
DøwSh≠e
();

48 
SëDøwAµCﬁ‹
();

49 
P›UpLﬂdFûe
();

50 
LﬂdFûe
();

51 
LﬂdDøw≠pFûe
();

52 
CheckF‹FûeLﬂd
();

53 
SaveFûe
();

54 
SëFûeName
();

55 
Quô
();

56 
RóŒyQuô
();

57 
H™dÀMëaKey
();

58 
Cª©eEdôögGøphics
();

59 
Cª©eEdôögWödow
();

60 
ResizeEdôögWödow
();

61 
EdôögDøwFunc
();

62 
EdôögU£rFunc
();

63 
EdôögEvítFunc
();

64 
SëDøwögCﬁ‹
();

65 
WùeOut
();

66 
EdôText
();

	@drawstr.c

2 
	~<°dio.h
>

3 
	~<X11/Xlib.h
>

4 
	~<X11/Xutû.h
>

5 
	~"ªtu∫s.h
"

6 
	~"debug.h
"

7 
	~"myxlib.h
"

11 
	$DøwSåög
(
di•œy
, 
wödow
, 
gc
, 
x
, 
y
, 
°rög
)

12 
Di•œy
 *
di•œy
;

13 
Wödow
 
wödow
;

14 
GC
 
gc
;

15 
x
, 
y
;

16 *
°rög
;

19 
	`XDøwImageSåög
(
di•œy
, 
wödow
, 
gc
, 
x
, 
y
, 
°rög
, 
	`°æí
(string));

23 
	}
}

	@entry.c

2 
	~<°dio.h
>

3 
	~<˘y≥.h
>

4 
	~<°rög.h
>

5 
	~<X11/Xlib.h
>

6 
	~<X11/keysym.h
>

7 
	~<X11/keysymdef.h
>

8 
	~"ªtu∫s.h
"

9 
	~"debug.h
"

10 
	~"myxlib.h
"

11 
	~"toﬁkô.h
"

14  
	#ENTRY_EV_MASK
 (
KeyPªssMask
 | 
ExposuªMask
)

	)
17 
dimgªy
, 
lightgªy
, 
bœck
, 
whôe
;

21 
	$TextE¡ryEvít
(
di•œy
, 
id
, 
evít
, 
keysym
, 
°rög
)

22 
Di•œy
 *
di•œy
;

23 
id
;

24 
XEvít
 *
evít
;

25 
KeySym
 
keysym
;

26 *
°rög
;

28 
Àngth
;

29 
«me
[200];

31 
	`ToﬁGëName
(
id
, 
«me
);

32 
keysym
 < 255)

34 
	`i•röt
(
keysym
))

36 
	`°rˇt
(
«me
, 
°rög
);

37 
	`ToﬁSëName
(
id
, 
«me
);

38 
	`ToﬁSëF‹eground
(
id
, 
bœck
);

39 
	`ToﬁDøwName
(
id
);

44 
keysym
)

46 
XK_Rëu∫
:

47 
	`ToﬁExec
(
id
);

49 
XK_Dñëe
:

50 
XK_BackS∑˚
:

51 
Àngth
 = 
	`°æí
(
«me
);

52 
Àngth
 > 0)

54 
Àngth
--;

55 
«me
[
Àngth
] = '\0';

56 
	`ToﬁSëName
(
id
, 
«me
);

57 
	`ToﬁCÀ¨
(
id
);

58 
	`ToﬁHighlight
(
id
, 
dimgªy
, 
whôe
);

59 
	`ToﬁSëF‹eground
(
id
, 
bœck
);

60 
	`ToﬁDøwName
(
id
);

66 
	}
}

70 
	$TextE¡ryDøw
(
di•œy
, 
id
, 
evít
)

71 
Di•œy
 *
di•œy
;

72 
id
;

73 
XExpo£Evít
 *
evít
;

75 
evít
->
cou¡
 != 0) ;

76 
	`ToﬁHighlight
(
id
, 
dimgªy
, 
whôe
);

77 
	`ToﬁSëF‹eground
(
id
, 
bœck
);

78 
	`ToﬁDøwName
(
id
);

80 
	}
}

83 
	$Cª©eTextE¡ry
(
di•œy
, 
∑ª¡
, 
x
, 
y
, 
width
, 
height
, 
gc
, 
f⁄t_°ru˘
,

84 
«me
, 
ˇŒback
)

85 
Di•œy
 *
di•œy
;

86 
Wödow
 
∑ª¡
;

87 
x
, 
y
, 
width
, 
height
;

88 
XF⁄tSåu˘
 *
f⁄t_°ru˘
;

89 *
«me
;

90 (*
ˇŒback
)();

92 
VisuÆ
 *
visuÆ
 = 
C›yFromP¨ít
;

93 
id
;

95 
id
 = 
	`Cª©eToﬁWödow
(
di•œy
, 
∑ª¡
, 
x
, 
y
, 
width
, 
height
,

96 
lightgªy
,Üightgªy, 
ENTRY_EV_MASK
, 
visuÆ
);

97 
id
 >= 0)

99 
	`ToﬁSëName
(
id
, 
«me
);

100 
	`ToﬁSëGC
(
id
, 
gc
);

101 
	`ToﬁSëF‹eground
(
id
, 
bœck
);

102 
	`ToﬁSëBackground
(
id
, 
lightgªy
);

103 
	`ToﬁSëF⁄t
(
id
, 
f⁄t_°ru˘
);

104 
	`ToﬁSëGroup
(
id
, -97);

105 
	`ToﬁSëFun˘i⁄s
(
id
, 
TextE¡ryDøw
, 
TextE¡ryEvít
, 
ˇŒback
);

107 (
id
);

108 
	}
}

	@error.c

2 
	~<°dio.h
>

3 
	~<X11/Xlib.h
>

4 
	~<X11/Xutû.h
>

5 
	~<X11/X¥Ÿo.h
>

6 
	~"ªtu∫s.h
"

7 
	~"debug.h
"

8 
	~"myxlib.h
"

11 *
	gEº‹Codes
[] = {

137 
	$SëEº‹H™dÀrs
()

139 
	`XSëEº‹H™dÀr
(
Eº‹H™dÀr
);

140 
	`XSëIOEº‹H™dÀr
(
F©ÆEº‹H™dÀr
);

142 
	}
}

146 
	$Eº‹H™dÀr
(
di•œy
, 
evít
)

147 
Di•œy
 *
di•œy
;

148 
XEº‹Evít
 *
evít
;

150 
Àngth
 = 120;

151 
°rög
[130];

154 
	`XGëEº‹Text
(
di•œy
, 
evít
->
îr‹_code
, 
°rög
, 
Àngth
);

155 
	`Ârötf
(
°dîr
, "\n\nXÉrror:\n\t%s\n",

156 
°rög
);

157 
	`Ârötf
(
°dîr
, "\tserialÇumber ofÑequest: %ld\n",

158 ()
evít
->
£rül
);

159 
	`Ârötf
(
°dîr
, "\top code: %d.%d %s\n\tError Code: %d\n",

160 
evít
->
ªque°_code
,Évít->
mö‹_code
,

161 
Eº‹Codes
[
evít
->
ªque°_code
],Évít->
îr‹_code
);

162 
	`Ârötf
(
°dîr
, "\tresource id of failedÑequest: %ld\n",

163 ()
evít
->
ªsour˚id
);

164 
	`Ârötf
(
°dîr
, "\ton display %s.\n",

165 
	`Di•œySåög
(
di•œy
));

167 
	}
}

171 
	$F©ÆEº‹H™dÀr
(
di•œy
)

172 
Di•œy
 *
di•œy
;

175 
	`Ârötf
(
°dîr
, "XÉrror: fatal IOÉrror on display %s.\n",

176 
	`Di•œySåög
(
di•œy
));

177 
	`exô
(2);

178 
	}
}

	@fontht.c

2 
	~<°dio.h
>

3 
	~<X11/Xlib.h
>

4 
	~<X11/Xutû.h
>

5 
	~"ªtu∫s.h
"

6 
	~"debug.h
"

7 
	~"myxlib.h
"

11 
	$F⁄tHeight
(
f⁄t_°ru˘
)

12 
XF⁄tSåu˘
 *
f⁄t_°ru˘
;

15 (
f⁄t_°ru˘
->
as˚¡
 + f⁄t_°ru˘->
des˚¡
);

16 
	}
}

	@fontname.c

2 
	~<°dio.h
>

3 
	~<°rög.h
>

4 
	~<X11/Xlib.h
>

5 
	~<X11/Xutû.h
>

6 
	~"ªtu∫s.h
"

7 
	~"debug.h
"

8 
	~"myxlib.h
"

11 
XF⁄tSåu˘
 *

12 
	$LﬂdF⁄tName
(
di•œy
, 
¨gc
, 
¨gv
, 
f⁄t_«me
, 
ÁŒback_f⁄t_«me
)

13 
Di•œy
 *
di•œy
;

14 
¨gc
;

15 **
¨gv
;

16 *
f⁄t_«me
;

17 *
ÁŒback_f⁄t_«me
;

19 *
±r
;

20 
XF⁄tSåu˘
 *
f⁄t_°ru˘
;

23 
±r
 = 
	`FödP¨amëî
(
¨gc
, 
¨gv
, "-font");

24 
±r
 !(*)
NULL
)

26 
	`°r˝y
(
f⁄t_«me
, 
±r
);

30 
±r
 = 
	`FödP¨amëî
(
¨gc
, 
¨gv
, "-fn");

31 
±r
 !(*)
NULL
)

33 
	`°r˝y
(
f⁄t_«me
, 
±r
);

38 
f⁄t_°ru˘
 = 
	`LﬂdF⁄t
(
di•œy
, 
f⁄t_«me
, 
ÁŒback_f⁄t_«me
);

41 (
f⁄t_°ru˘
);

42 
	}
}

	@gc.c

2 
	~<°dio.h
>

3 
	~<X11/Xlib.h
>

4 
	~<X11/Xutû.h
>

5 
	~"ªtu∫s.h
"

6 
	~"debug.h
"

7 
	~"myxlib.h
"

10 
GC


11 
	$Cª©eGC
(
di•œy
, 
døwabÀ
, 
f‹ecﬁ‹
, 
backcﬁ‹
)

12 
Di•œy
 *
di•œy
;

13 
DøwabÀ
 
døwabÀ
;

14 
f‹ecﬁ‹
;

15 
backcﬁ‹
;

17 
XGCVÆues
 
xgcvÆues
;

18 
GC
 
gc
;

21 
xgcvÆues
.
f‹eground
 = 
f‹ecﬁ‹
;

22 
xgcvÆues
.
background
 = 
backcﬁ‹
;

25 
gc
 = 
	`XCª©eGC
(
di•œy
, 
døwabÀ
, (
GCF‹eground
 | 
GCBackground
),

26 &
xgcvÆues
);

29 (
gc
);

30 
	}
}

	@geometry.c

2 
	~<°dio.h
>

3 
	~<°rög.h
>

4 
	~<X11/Xlib.h
>

5 
	~<X11/Xutû.h
>

6 
	~"ªtu∫s.h
"

7 
	~"debug.h
"

8 
	~"myxlib.h
"

12 
	$FödGeomëry
(
¨gc
, 
¨gv
, 
geomëry
)

13 
¨gc
;

14 **
¨gv
;

15 *
geomëry
;

17 *
±r
;

20 
±r
 = 
	`FödP¨amëî
(
¨gc
, 
¨gv
, "-geom");

21 
±r
 !(*)
NULL
)

23 
	`°r˝y
(
geomëry
, 
±r
);

24 (
True
);

28 *
geomëry
 = 0;

29 (
FÆ£
);

31 
	}
}

35 
	$P¨£Geomëry
(
geomëry
, 
max_width
, 
max_height
, 
x
, 
y
, 
width
, 
height
)

36 *
geomëry
;

37 
max_width
, 
max_height
;

38 *
x
, *
y
, *
width
, *
height
;

40 
°©us
;

41 
x1
, 
y1
, 
width1
, 
height1
;

44 
°©us
 = 
	`XP¨£Geomëry
(
geomëry
, &
x1
, &
y1
, &
width1
, &
height1
);

45 
°©us
 & 
XVÆue
Ë*
x
 = 
x1
;

46 
°©us
 & 
YVÆue
Ë*
y
 = 
y1
;

47 
°©us
 & 
WidthVÆue
Ë*
width
 = 
width1
;

48 
°©us
 & 
HeightVÆue
Ë*
height
 = 
height1
;

49 
°©us
 & 
XNeg©ive
Ë*
x
 = 
max_width
 - *
width
 + *x;

50 
°©us
 & 
YNeg©ive
Ë*
y
 = 
max_height
 - *
height
 + *y;

54 
	}
}

58 
	$CheckGeomëry
(
¨gc
, 
¨gv
, 
max_width
, 
max_height
, 
x
, 
y
, 
width
, 
height
)

59 
¨gc
;

60 **
¨gv
;

61 
max_width
, 
max_height
;

62 *
x
, *
y
, *
width
, *
height
;

64 
geomëry
[
BUFSIZ
];

67 
	`FödGeomëry
(
¨gc
, 
¨gv
, 
geomëry
Ë=
True
)

70 
	`P¨£Geomëry
(
geomëry
, 
max_width
, 
max_height
,

71 
x
, 
y
, 
width
, 
height
);

76 
	}
}

	@icon.c

2 
	~<°dio.h
>

3 
	~<X11/Xlib.h
>

4 
	~<X11/Xutû.h
>

5 
	~"ªtu∫s.h
"

6 
	~"debug.h
"

7 
	~"myxlib.h
"

11 
	$LﬂdIc⁄
(
di•œy
, 
wödow
, 
fûíame
, 
ic⁄«me
)

12 
Di•œy
 *
di•œy
;

13 
Wödow
 
wödow
;

14 *
fûíame
, *
ic⁄«me
;

16 
Pixm≠
 
ic⁄
;

17 
ic⁄_width
, 
ic⁄_height
;

20 
ic⁄
 = 
	`LﬂdBôm≠
(
di•œy
, 
wödow
, 
fûíame
,

21 &
ic⁄_width
, &
ic⁄_height
);

22 
ic⁄
 !(
Pixm≠
)
N⁄e
)

25 
	`SëWödowIc⁄
(
di•œy
, 
wödow
, 
ic⁄
, 
ic⁄«me
);

30 
	}
}

34 
	$SëWödowIc⁄
(
di•œy
, 
wödow
, 
ic⁄
, 
ic⁄«me
)

35 
Di•œy
 *
di•œy
;

36 
Wödow
 
wödow
;

37 
Pixm≠
 
ic⁄
;

38 *
ic⁄«me
;

40 
XWMHöts
 *
wmhöts
;

43 
wmhöts
 = 
	`XGëWMHöts
(
di•œy
, 
wödow
);

44 
wmhöts
 =(
XWMHöts
 *)0)

46 
wmhöts
 = (
XWMHöts
 *)
	`mÆloc
((XWMHints));

47 
wmhöts
 =(
XWMHöts
 *)0Ë(
FÆ£
);

48 
wmhöts
->
Êags
 = 0;

52 
wmhöts
-> 
Êags
 |
Ic⁄Pixm≠Höt
;

53 
wmhöts
->
ic⁄_pixm≠
 = 
ic⁄
;

54 
	`XSëWMHöts
(
di•œy
, 
wödow
, 
wmhöts
);

55 
	`XFªe
(
wmhöts
);

58 
	`XSëIc⁄Name
(
di•œy
, 
wödow
, 
ic⁄«me
);

62 
	}
}

	@key.c

2 
	~<°dio.h
>

3 
	~<X11/Xlib.h
>

4 
	~<X11/Xutû.h
>

5 
	~"ªtu∫s.h
"

6 
	~"debug.h
"

7 
	~"myxlib.h
"

11 
	$DecodeKeyPªss
(
evít
, 
keysym
, 
°rög
)

12 
XKeyEvít
 *
evít
;

13 
KeySym
 *
keysym
;

14 *
°rög
;

16 
XCompo£Sètus
 
compo£°©us
;

17 
Àngth
;

20 *
keysym
 = 0;

21 *
°rög
 = 0;

24 (
evít
->
ty≥
 !
KeyPªss
Ë&& (evít->ty≥ =
KeyRñó£
))

26 (
FÆ£
);

30 
Àngth
 = 
	`XLookupSåög
(
evít
, 
°rög
, 1, 
keysym
, &
compo£°©us
);

31 
Àngth
 > 0)

32 
°rög
[1] = 0;

34 
°rög
[0] = 0;

37 (
	`IsMëaQ
(
evít
, 
°rög
));

38 
	}
}

42 
	$IsMëaKey
(
evít
)

43 
XEvít
 *
evít
;

45 (
evít
->
ty≥
 =
KeyPªss
Ë|| (evít->ty≥ =
KeyRñó£
))

47 (
evít
->
xkey
.
°©e
 & 
Mod1Mask
) ||

48 (
evít
->
xkey
.
°©e
 & 
Mod2Mask
))

50 (
True
);

53 (
FÆ£
);

54 
	}
}

58 
	$IsMëaQ
(
evít
, 
°rög
)

59 
XEvít
 *
evít
;

60 *
°rög
;

62 
°©us
;

64 
°©us
 = 
FÆ£
;

65 
	`IsMëaKey
(
evít
Ë=
True
)

67 *
°rög
 == 'Q' || *string == 'q')

69 
°©us
 = 
True
;

72 (
°©us
);

73 
	}
}

	@label.c

2 
	~<°dio.h
>

3 
	~<X11/Xlib.h
>

4 
	~<X11/Xutû.h
>

5 
	~"ªtu∫s.h
"

6 
	~"debug.h
"

7 
	~"myxlib.h
"

8 
	~"toﬁkô.h
"

11  
	#LABEL_EV_MASK
 
ExposuªMask


	)
14 
bœck
, 
lightgªy
;

19 
	$LabñDøw
(
di•œy
, 
id
, 
evít
)

20 
Di•œy
 *
di•œy
;

21 
id
;

22 
XExpo£Evít
 *
evít
;

24 
evít
->
cou¡
 == 0)

26 
	`ToﬁSëF‹eground
(
id
, 
bœck
);

27 
	`ToﬁDøwName
(
id
);

30 
	}
}

34 
	$Cª©eTextLabñ
(
di•œy
, 
∑ª¡
, 
x
, 
y
, 
width
, 
height
, 
gc
, 
f⁄t_°ru˘
, 
œbñ
)

35 
Di•œy
 *
di•œy
;

36 
Wödow
 
∑ª¡
;

37 
x
, 
y
, 
width
, 
height
;

38 
GC
 
gc
;

39 
XF⁄tSåu˘
 *
f⁄t_°ru˘
;

40 *
œbñ
;

42 
VisuÆ
 *
visuÆ
 = 
C›yFromP¨ít
;

43 
id
;

46 
id
 = 
	`Cª©eToﬁWödow
(
di•œy
, 
∑ª¡
, 
x
, 
y
, 
width
, 
height
,

47 
lightgªy
,Üightgªy, 
LABEL_EV_MASK
, 
visuÆ
);

48 
id
 >= 0)

50 
	`ToﬁSëName
(
id
, 
œbñ
);

51 
	`ToﬁSëGC
(
id
, 
gc
);

52 
	`ToﬁSëF‹eground
(
id
, 
bœck
);

53 
	`ToﬁSëBackground
(
id
, 
lightgªy
);

54 
	`ToﬁSëF⁄t
(
id
, 
f⁄t_°ru˘
);

55 
	`ToﬁSëGroup
(
id
, -999);

56 
	`ToﬁSëFun˘i⁄s
(
id
, 
LabñDøw
, 
NuŒEvítFunc
, 
NuŒU£rFunc
);

60 (
id
);

61 
	}
}

	@loadfont.c

2 
	~<°dio.h
>

3 
	~<X11/Xlib.h
>

4 
	~<X11/Xutû.h
>

5 
	~"ªtu∫s.h
"

6 
	~"debug.h
"

7 
	~"myxlib.h
"

10 
XF⁄tSåu˘
 *

11 
	$LﬂdF⁄t
(
di•œy
, 
f⁄t_«me
, 
ÁŒback_f⁄t_«me
)

12 
Di•œy
 *
di•œy
;

13 *
f⁄t_«me
;

14 *
ÁŒback_f⁄t_«me
;

16 
XF⁄tSåu˘
 *
f⁄t_°ru˘
;

19 
f⁄t_°ru˘
 = 
	`XLﬂdQuîyF⁄t
(
di•œy
, 
f⁄t_«me
);

20 
f⁄t_°ru˘
 =(
XF⁄tSåu˘
 *)0)

22 
f⁄t_°ru˘
 = 
	`XLﬂdQuîyF⁄t
(
di•œy
, 
ÁŒback_f⁄t_«me
);

23 
f⁄t_°ru˘
 =(
XF⁄tSåu˘
 *)0)

25 
	`ERRORS
("u«bÀÅÿlﬂd f⁄t.", 
f⁄t_«me
, 
EINVAL
);

26 
	`ERRORS
("u«bÀÅÿlﬂd f⁄t.", 
ÁŒback_f⁄t_«me
,

27 
EINVAL
);

28 
	`XClo£Di•œy
(
di•œy
);

29 
	`exô
(2);

34 (
f⁄t_°ru˘
);

35 
	}
}

	@myxlib.h

1 #i‚de‡
__MYXLIB_H


2  
	#__MYXLIB_H


	)
4 
	~<X11/Xlib.h
>

5 
	~<X11/Xutû.h
>

8 
PrötXInfo
();

9 
SëCœssHöts
();

10 
Di•œy
 *
C⁄√˘ToSîvî
();

11 
FûlSizeHöts
();

12 
SëSizeHöts
();

13 
Wödow
 
O≥nWödow
();

14 
SëSènd¨dHöts
();

15 
SëWMHöts
();

16 
SëWödowName
();

17 
GC
 
Cª©eGC
();

18 
DøwOvÆ
();

19 
FûlOvÆ
();

20 
AŒocNamedCﬁ‹
();

21 
SëUpCﬁ‹m≠
();

22 
SëUpVisuÆ
();

23 
F⁄tHeight
();

24 
XF⁄tSåu˘
 *
LﬂdF⁄t
();

25 
DøwSåög
();

26 
AµídKeySèãMesßge
();

27 
DecodeKeyPªsS
();

28 
IsMëaKey
();

29 
IsMëaQ
();

30 
Upd©eWödowFromBôm≠
();

31 
C›yPœ√
();

32 
Pixm≠
 
LﬂdBôm≠
();

33 
SaveBôm≠
();

34 
LﬂdIc⁄
();

35 
SëWödowIc⁄
();

36 
GC
 
Cª©eX‹GC
();

37 
FödDi•œyName
();

38 
Di•œy
 *
O≥nDi•œy
();

39 
FödGeomëry
();

40 
P¨£Geomëry
();

41 
CheckGeomëry
();

42 
CheckF‹Hñp
();

43 
PrötUßgeMesßge
();

44 *
FödP¨amëî
();

45 
XF⁄tSåu˘
 *
LﬂdF⁄tName
();

46 
Wödow
 
T›Wödow
();

47 
FödInôülSèã
();

48 
FödWödowName
();

49 
Di•œy
 *
SèπupX
();

50 
SëEº‹H™dÀrs
();

51 
Eº‹H™dÀr
();

52 
F©ÆEº‹H™dÀr
();

	@oval.c

2 
	~<°dio.h
>

3 
	~<X11/Xlib.h
>

4 
	~<X11/Xutû.h
>

5 
	~"ªtu∫s.h
"

6 
	~"debug.h
"

7 
	~"myxlib.h
"

10  
	#START_CIRCLE
 0

	)
11  
	#FULL_CIRCLE
 (360*64)

	)
15 
	$DøwOvÆ
(
di•œy
, 
døwabÀ
, 
gc
, 
x
, 
y
, 
width
, 
height
)

16 
Di•œy
 *
di•œy
;

17 
DøwabÀ
 
døwabÀ
;

18 
GC
 
gc
;

19 
x
, 
y
, 
width
, 
height
;

22 
width
 < 1) width = 1;

23 
height
 < 1) height = 1;

26 
	`XDøwArc
(
di•œy
, 
døwabÀ
, 
gc
, 
x
, 
y
, 
width
, 
height
,

27 
START_CIRCLE
, 
FULL_CIRCLE
);

31 
	}
}

35 
	$FûlOvÆ
(
di•œy
, 
døwabÀ
, 
gc
, 
x
, 
y
, 
width
, 
height
)

36 
Di•œy
 *
di•œy
;

37 
DøwabÀ
 
døwabÀ
;

38 
GC
 
gc
;

39 
x
, 
y
, 
width
, 
height
;

42 
width
 < 1) width = 1;

43 
height
 < 1) height = 1;

46 
	`XFûlArc
(
di•œy
, 
døwabÀ
, 
gc
, 
x
, 
y
, 
width
, 
height
,

47 
START_CIRCLE
, 
FULL_CIRCLE
);

51 
	}
}

	@pixmap.c

2 
	~<°dio.h
>

3 
	~<X11/Xlib.h
>

4 
	~<X11/Xutû.h
>

5 
	~"ªtu∫s.h
"

6 
	~"debug.h
"

7 
	~"myxlib.h
"

11 
	$Upd©eWödowFromBôm≠
(
di•œy
, 
wödow
, 
gc
, 
bôm≠
, 
evít
,

12 
max_width
, 
max_height
)

13 
Di•œy
 *
di•œy
;

14 
Wödow
 
wödow
;

15 
GC
 
gc
;

16 
Pixm≠
 
bôm≠
;

17 
XExpo£Evít
 *
evít
;

18 
max_width
, 
max_height
;

21 
	`C›yPœ√
(
di•œy
, 
bôm≠
, 
wödow
, 
gc
,

22 
evít
->
x
,Évít->
y
,Évít->
width
,Évít->
height
,

23 
max_width
, 
max_height
);

27 
	}
}

30 
	$C›yPœ√
(
di•œy
, 
§c_døw
, 
de°_døw
, 
gc
, 
x
, 
y
, 
width
, 
height
,

31 
max_width
, 
max_height
)

32 
Di•œy
 *
di•œy
;

33 
DøwabÀ
 
§c_døw
, 
de°_døw
;

34 
GC
 
gc
;

35 
x
, 
y
, 
width
, 
height
;

36 
max_width
, 
max_height
;

39 ((
x
+
width
Ë<
max_width
Ë&& ((
height
+
y
Ë<
max_height
) &&

40 (
x
 < 
max_width
Ë&& (
y
 < 
max_height
))

42 
	`XC›yPœ√
(
di•œy
, 
§c_døw
, 
de°_døw
, 
gc
,

43 
x
, 
y
, 
width
, 
height
, x, y, 0x1);

48 
	}
}

	@probDist.c

4 
	~<sy£¡.h
>

5 
	~<°dlib.h
>

6 
	~<sys/ty≥s.h
>

7 
	~<sys/time.h
>

8 
	~<î∫o.h
>

11 
	~"debug.h
"

12 
	~"¥obDi°.h
"

15 
	gProbDi°
::
	$ProbDi°
()

18 
°©us
 = 
OK
;

19 
	}
}

21 
	gProbDi°
::
	$ProbDi°
(c⁄° 
ProbDi°
 &)

24 
°©us
 = 
OK
;

25 
	}
}

27 
	gProbDi°
::~
	$ProbDi°
()

30 
°©us
 = 
OK
;

31 
	}
}

34 
	gProbDi°
 &

35 
	gProbDi°
::
›î©‹
=(c⁄° 
ProbDi°
 &)

37 (*
this
);

42 
	gProbDi°
::
	$£tSìd
(
my£ed
)

44 
	`§™d48
(
my£ed
);

45 
°©us
 = 
OK
;

46 (
OK
);

47 
	}
}

51 
	gProbDi°
::
	$øndomSam∂e
()

54 
	}
}

	@probDist.h

1 #i‚de‡
__PROBDIST_H


2  
	#__PROBDIST_H


	)
6 
	~"ªtu∫s.h
"

9 
˛ass
 
	gProbDi°
;

12 
˛ass
 
	cProbDi°
 {

13 
	mpublic
:

15 
ProbDi°
();

16 
ProbDi°
(const ProbDist &);

17 
	mvútuÆ
 ~
ProbDi°
();

20 
	mProbDi°
 &
	m›î©‹
=(c⁄° 
ProbDi°
 &);

23 
vútuÆ
 
£tSìd
();

24 
vútuÆ
 
øndomSam∂e
();

27 
ölöe
 
	$gëSètus
(Ë{ (
°©us
); }

29 
public
:

31 
°©us
;

32 
	}
};

	@pushb.c

2 
	~<°dio.h
>

3 
	~<X11/Xlib.h
>

4 
	~<X11/Xutû.h
>

5 
	~"ªtu∫s.h
"

6 
	~"debug.h
"

7 
	~"myxlib.h
"

8 
	~"toﬁkô.h
"

11  
	#PUSH_EV_MASK
 (
Buâ⁄Pªss
 | 
ExposuªMask
)

	)
14 
dimgªy
, 
lightgªy
, 
bœck
, 
whôe
;

18 
	$PushBuâ⁄Evít
(
di•œy
, 
id
, 
evít
, 
keysym
, 
°rög
)

19 
Di•œy
 *
di•œy
;

20 
id
;

21 
XEvít
 *
evít
;

22 
KeySym
 
keysym
;

23 *
°rög
;

26 
	`ToﬁHighlightGroup
(
id
, 
	`ToﬁGëGroup
(id), 
whôe
, 
dimgªy
);

29 
	`ToﬁSëSèã
(
id
, 
True
);

30 
	`ToﬁHighlight
(
id
, 
dimgªy
, 
whôe
);

31 
	`XFlush
(
di•œy
);

34 
	`ToﬁExec
(
id
);

36 
	}
}

40 
	$PushBuâ⁄Døw
(
di•œy
, 
id
, 
evít
)

41 
Di•œy
 *
di•œy
;

42 
id
;

43 
XExpo£Evít
 *
evít
;

46 
evít
->
cou¡
 != 0) ;

49 
	`ToﬁGëSèã
(
id
Ë=
True
)

50 
	`ToﬁHighlight
(
id
, 
dimgªy
, 
whôe
);

52 
	`ToﬁHighlight
(
id
, 
whôe
, 
dimgªy
);

55 
	`ToﬁSëF‹eground
(
id
, 
bœck
);

56 
	`ToﬁDøwName
(
id
);

58 
	}
}

61 
	$UnhighlightPushBuâ⁄
(
id
)

62 
id
;

64 
	`ToﬁSëSèã
(
id
, 
FÆ£
);

65 
	`ToﬁHighlight
(
id
, 
whôe
, 
dimgªy
);

67 
	}
}

71 
	$Cª©ePushBuâ⁄
(
di•œy
, 
∑ª¡
, 
x
, 
y
, 
width
, 
height
, 
gc
, 
f⁄t_°ru˘
,

72 
«me
, 
ˇŒback
)

73 
Di•œy
 *
di•œy
;

74 
Wödow
 
∑ª¡
;

75 
x
, 
y
, 
width
, 
height
;

76 
GC
 
gc
;

77 
XF⁄tSåu˘
 *
f⁄t_°ru˘
;

78 *
«me
;

79 (*
ˇŒback
)();

81 
VisuÆ
 *
visuÆ
 = 
C›yFromP¨ít
;

82 
id
;

85 
id
 = 
	`Cª©eToﬁWödow
(
di•œy
, 
∑ª¡
, 
x
, 
y
, 
width
, 
height
,

86 
lightgªy
,Üightgªy, 
PUSH_EV_MASK
, 
visuÆ
);

87 
id
 >= 0)

89 
	`ToﬁSëName
(
id
, 
«me
);

90 
	`ToﬁSëGC
(
id
, 
gc
);

91 
	`ToﬁSëF‹eground
(
id
, 
bœck
);

92 
	`ToﬁSëBackground
(
id
, 
lightgªy
);

93 
	`ToﬁSëF⁄t
(
id
, 
f⁄t_°ru˘
);

94 
	`ToﬁSëFun˘i⁄s
(
id
, 
PushBuâ⁄Døw
,

95 
PushBuâ⁄Evít
, 
ˇŒback
);

99 
	`ERRORI
("bad idÑëu∫ed from Cª©eToﬁWödow.", 
id
, 
EINVAL
);

103 (
id
);

104 
	}
}

	@query.c

2 
	~<°dio.h
>

3 
	~<X11/Xlib.h
>

4 
	~"ªtu∫s.h
"

5 
	~"debug.h
"

6 
	~"myxlib.h
"

7 
	~"toﬁkô.h
"

11 
	$QuîyPoöãr
(
di•œy
, 
x
, 
y
)

12 
Di•œy
 *
di•œy
;

13 *
x
, *
y
;

15 
°©us
, 
s¸ìn
;

16 
Wödow
 
roŸwödow
, 
chûdwödow
;

17 
roŸx
, 
roŸy
, 
chûdx
, 
chûdy
;

18 
buâ⁄_°©e
;

21 
s¸ìn
 = 
	`DeÁu…S¸ìn
(
di•œy
);

22 
°©us
 = 
	`XQuîyPoöãr
(
di•œy
, 
	`RoŸWödow
(di•œy, 
s¸ìn
),

23 &
roŸwödow
, &
chûdwödow
, &
roŸx
, &
roŸy
,

24 &
chûdx
, &
chûdy
, &
buâ⁄_°©e
);

25 
°©us
 =
True
)

27 *
x
 = 
roŸx
;

28 *
y
 = 
roŸy
;

32 *
x
 = 0;

33 *
y
 = 0;

38 
	}
}

	@returns.h

1 #i‚de‡
__RETURNS_H


2  
	#__RETURNS_H


	)
3  
	#OK
 0

	)
4  
	#NOTOK
 -1

	)
5  
	#NOMATCH
 -2

	)
	@sizehint.c

2 
	~<°dio.h
>

3 
	~<X11/Xlib.h
>

4 
	~<X11/Xutû.h
>

5 
	~"ªtu∫s.h
"

6 
	~"debug.h
"

7 
	~"myxlib.h
"

11 
	$FûlSizeHöts
(
x
, 
y
, 
width
, 
height
, 
sizehöts
)

12 
x
, 
y
, 
width
, 
height
;

13 
XSizeHöts
 *
sizehöts
;

16 
sizehöts
->
x
 = x;

17 
sizehöts
->
y
 = y;

18 
sizehöts
->
height
 = height;

19 
sizehöts
->
width
 = width;

20 
sizehöts
->
mö_height
 = 
height
;

21 
sizehöts
->
mö_width
 = 
width
;

22 
sizehöts
->
Êags
 = 
USPosôi⁄
 | 
USSize
 | 
PMöSize
;

23 #ifde‡
X11R4


24 
sizehöts
->
ba£_width
 = 
width
;

25 
sizehöts
->
ba£_height
 = 
height
;

26 
sizehöts
->
Êags
 |
PBa£Size
;

31 
	}
}

35 
	$SëSizeHöts
(
di•œy
, 
wödow
, 
x
, 
y
, 
width
, 
height
)

36 
Di•œy
 *
di•œy
;

37 
Wödow
 
wödow
;

38 
x
, 
y
, 
width
, 
height
;

40 
XSizeHöts
 
sizehöts
;

43 
	`FûlSizeHöts
(
x
, 
y
, 
width
, 
height
, &
sizehöts
);

46 #ifde‡
X11R4


47 
	`XSëWMN‹mÆHöts
(
di•œy
, 
wödow
, &
sizehöts
);

49 
	`XSëN‹mÆHöts
(
di•œy
, 
wödow
, &
sizehöts
);

54 
	}
}

	@startupx.c

2 
	~<°dio.h
>

3 
	~<X11/Xlib.h
>

4 
	~<X11/Xutû.h
>

5 
	~"ªtu∫s.h
"

6 
	~"debug.h
"

7 
	~"myxlib.h
"

10 
Di•œy
 *

11 
	$SèπupX
(
¨gc
, 
¨gv
, 
s¸ìn
, 
roŸwödow
, 
bœck
, 
whôe
, 
mesßge
)

12 
¨gc
;

13 **
¨gv
;

14 *
s¸ìn
;

15 
Wödow
 *
roŸwödow
;

16 *
bœck
, *
whôe
;

17 *
mesßge
;

19 
Di•œy
 *
di•œy
;

22 
	`CheckF‹Hñp
(
¨gc
, 
¨gv
, 
mesßge
Ë=
True
Ë
	`exô
(0);

25 
di•œy
 = 
	`O≥nDi•œy
(
¨gc
, 
¨gv
, 
s¸ìn
, 
roŸwödow
);

28 
	`SëEº‹H™dÀrs
();

31 *
bœck
 = 
	`BœckPixñ
(
di•œy
, *
s¸ìn
);

32 *
whôe
 = 
	`WhôePixñ
(
di•œy
, *
s¸ìn
);

35 (
di•œy
);

36 
	}
}

	@toolkit.c

2 
	~<°dio.h
>

3 
	~<˘y≥.h
>

4 
	~<°rög.h
>

5 
	~<X11/Xlib.h
>

6 
	~<X11/Xutû.h
>

7 
	~"ªtu∫s.h
"

8 
	~"debug.h
"

9 
	~"myxlib.h
"

10 
	~"toﬁkô.h
"

13  
	#MAX_NAME_LEN
 80

	)
16  
	#MAX_TOOL_WINDOWS
 40

	)
19  
	#ID_OK
(
WödowId
Ë(((WödowIdË>0Ë&& ((WödowIdË< 
toﬁ_max_id
))

	)
22  
	#TWA
(
WödowId
Ë
TWAºay
[(WödowId)]

	)
25 
	s
{

26 
Di•œy
 *
	mdi•œy
;

27 
Wödow
 
	m∑ª¡
;

28 
Wödow
 
	mwödow
;

29 
GC
 
	mgc
;

30 
XF⁄tSåu˘
 *
	mf⁄t
;

31 
	mwidth
, 
	mheight
;

32 
	m°©e
;

33 
	mgroup
;

34 
	mid
;

35 
	m«me
[
MAX_NAME_LEN
+1];

36 (*
	mdøwfunc
)();

37 (*
	mu£rfunc
)();

38 (*
	mevítfunc
)();

39 } 
	tToﬁWödow
;

42 
ToﬁWödow
 
	gTWAºay
[
MAX_TOOL_WINDOWS
+1];

43 
	gtoﬁ_max_id
 = 0;

47 
	$Cª©eToﬁWödow
(
di•œy
, 
∑ª¡
, 
x
, 
y
, 
width
, 
height
,

48 
b‹dîcﬁ‹
, 
backcﬁ‹
, 
evít_mask
, 
visuÆ
)

49 
Di•œy
 *
di•œy
;

50 
Wödow
 
∑ª¡
;

51 
x
, 
y
, 
width
, 
height
;

52 
b‹dîcﬁ‹
;

53 
backcﬁ‹
;

54 
evít_mask
;

55 
VisuÆ
 *
visuÆ
;

57 
id
;

60 
toﬁ_max_id
 >
MAX_TOOL_WINDOWS
)

62 
	`ERRORI
("toÿm™y id†i†u£.", 
toﬁ_max_id
, 
EINVAL
);

67 
id
 = 
toﬁ_max_id
;

68 
	`TWA
(
id
).
wödow
 = 
	`O≥nWödow
(
di•œy
, 
∑ª¡
, 
x
, 
y
, 
width
, 
height
,

69 
b‹dîcﬁ‹
, 
backcﬁ‹
, 
evít_mask
, 
visuÆ
);

72 
	`TWA
(
id
).
wödow
 =(
Wödow
)
N⁄e
)

74 
	`ERRORI
("övÆid wödow wa†ªtu∫ed.", 
	`TWA
(
id
).
wödow
, 
EINVAL
);

79 
	`TWA
(
id
).
di•œy
 = display;

80 
	`TWA
(
id
).
∑ª¡
 =Öarent;

81 
	`TWA
(
id
).
width
 = width;

82 
	`TWA
(
id
).
height
 = height;

83 
	`TWA
(
id
).
°©e
 = 
FÆ£
;

84 
	`TWA
(
id
).
group
 = 0;

85 
	`TWA
(
id
).
døwfunc
 = 
NuŒDøwFunc
;

86 
	`TWA
(
id
).
u£rfunc
 = 
NuŒU£rFunc
;

87 
	`TWA
(
id
).
u£rfunc
 = 
NuŒEvítFunc
;

88 
	`TWA
(
id
).
«me
[0] = 0;

91 
toﬁ_max_id
++;

94 (
id
);

95 
	}
}

98 
Di•œy
 *

99 
	$ToﬁGëDi•œy
(
id
)

100 
id
;

102 
	`ID_OK
(
id
))

104 (
	`TWA
(
id
).
di•œy
);

108 
	`ERRORI
("bad id vÆue.", 
id
, 
EINVAL
);

109 (
	`TWA
(0).
di•œy
);

111 
	}
}

114 
Wödow


115 
	$ToﬁGëWödow
(
id
)

116 
id
;

118 
	`ID_OK
(
id
))

120 (
	`TWA
(
id
).
wödow
);

124 
	`ERRORI
("bad id vÆue.", 
id
, 
EINVAL
);

125 (
	`TWA
(0).
wödow
);

127 
	}
}

131 
	$ToﬁSëBackground
(
id
, 
cﬁ‹
)

132 
id
;

133 
cﬁ‹
;

135 
	`ID_OK
(
id
))

137 
	`XSëBackground
(
	`TWA
(
id
).
di•œy
, TWA(id).
gc
, 
cﬁ‹
);

141 
	`ERRORI
("bad id vÆue.", 
id
, 
EINVAL
);

144 
	}
}

148 
	$ToﬁSëF‹eground
(
id
, 
cﬁ‹
)

149 
id
;

150 
cﬁ‹
;

152 
	`ID_OK
(
id
))

154 
	`XSëF‹eground
(
	`TWA
(
id
).
di•œy
, TWA(id).
gc
, 
cﬁ‹
);

158 
	`ERRORI
("bad id vÆue.", 
id
, 
EINVAL
);

161 
	}
}

165 
	$ToﬁSëGC
(
id
, 
gc
)

166 
id
;

167 
GC
 
gc
;

169 
	`ID_OK
(
id
))

171 
	`TWA
(
id
).
gc
 = gc;

175 
	`ERRORI
("bad id vÆue.", 
id
, 
EINVAL
);

178 
	}
}

182 
	$ToﬁSëF⁄t
(
id
, 
f⁄t_°ru˘
)

183 
id
;

184 
XF⁄tSåu˘
 *
f⁄t_°ru˘
;

186 
	`ID_OK
(
id
))

188 
	`TWA
(
id
).
f⁄t
 = 
f⁄t_°ru˘
;

189 
	`XSëF⁄t
(
	`TWA
(
id
).
di•œy
, TWA(id).
gc
,

190 
	`TWA
(
id
).
f⁄t
->
fid
);

194 
	`ERRORI
("bad id vÆue.", 
id
, 
EINVAL
);

197 
	}
}

201 
	$ToﬁGëGroup
(
id
)

202 
id
;

204 
	`ID_OK
(
id
))

206 (
	`TWA
(
id
).
group
);

210 
	`ERRORI
("bad id vÆue.", 
id
, 
EINVAL
);

213 
	}
}

217 
	$ToﬁSëGroup
(
id
, 
group
)

218 
id
;

219 
group
;

221 
	`ID_OK
(
id
))

223 
	`TWA
(
id
).
group
 = group;

227 
	`ERRORI
("bad id vÆue.", 
id
, 
EINVAL
);

230 
	}
}

234 
	$ToﬁGëSèã
(
id
)

235 
id
;

237 
	`ID_OK
(
id
))

239 (
	`TWA
(
id
).
°©e
);

243 
	`ERRORI
("bad id vÆue.", 
id
, 
EINVAL
);

244 (
FÆ£
);

246 
	}
}

250 
	$ToﬁSëSèã
(
id
, 
°©e
)

251 
id
;

252 
°©e
;

254 
	`ID_OK
(
id
))

256 
	`TWA
(
id
).
°©e
 = state;

259 
	}
}

263 
	$ToﬁGëName
(
id
, 
«me
)

264 
id
;

265 *
«me
;

267 
	`ID_OK
(
id
))

268 
	`°r˝y
(
«me
, 
	`TWA
(
id
).name);

270 *
«me
 = 0;

272 
	}
}

276 
	$ToﬁSëName
(
id
, 
«me
)

277 
id
;

278 *
«me
;

280 
	`ID_OK
(
id
Ë&& (
	`°æí
(
«me
Ë< 
MAX_NAME_LEN
))

282 
	`°r˝y
(
	`TWA
(
id
).
«me
,Çame);

286 
	`ERRORI
("bad id vÆue.", 
id
, 
EINVAL
);

289 
	}
}

293 
	$ToﬁCíãrText
(
id
, 
ãxt
)

294 
id
;

295 *
ãxt
;

297 
x
, 
y
, 
width
, 
height
;

299 
	`ID_OK
(
id
))

301 
height
 = 
	`F⁄tHeight
(
	`TWA
(
id
).
f⁄t
);

302 
width
 = 
	`XTextWidth
(
	`TWA
(
id
).
f⁄t
, 
ãxt
, 
	`°æí
(text));

303 
x
 = (
	`TWA
(
id
).
width
 - width)/2;

304 
y
 = (
	`TWA
(
id
).
height
 - height)/2 + TWA(id).
f⁄t
->
as˚¡
;

305 
	`XDøwImageSåög
(
	`TWA
(
id
).
di•œy
,

306 
	`TWA
(
id
).
wödow
, TWA(id).
gc
,

307 
x
, 
y
, 
ãxt
, 
	`°æí
(text));

311 
	`ERRORI
("bad id vÆue.", 
id
, 
EINVAL
);

314 
	}
}

318 
	$ToﬁDøwName
(
id
)

319 
id
;

321 
«me
[
MAX_NAME_LEN
+1];

322 
	`ToﬁGëName
(
id
, 
«me
);

323 
	`ToﬁCíãrText
(
id
, 
«me
);

325 
	}
}

329 
	$ToﬁSëFun˘i⁄s
(
id
, 
døwfunc
, 
evítfunc
, 
u£rfunc
)

330 
id
;

331 (*
døwfunc
)();

332 (*
evítfunc
)();

333 (*
u£rfunc
)();

335 
	`ID_OK
(
id
))

337 
	`TWA
(
id
).
døwfunc
 = drawfunc;

338 
	`TWA
(
id
).
evítfunc
 =Éventfunc;

339 
	`TWA
(
id
).
u£rfunc
 = userfunc;

343 
	`ERRORI
("bad id vÆue.", 
id
, 
EINVAL
);

346 
	}
}

350 
	$ToﬁSëU£rFunc
(
id
, 
u£rfunc
)

351 
id
;

352 (*
u£rfunc
)();

354 
	`ID_OK
(
id
))

356 
	`TWA
(
id
).
u£rfunc
 = userfunc;

360 
	`ERRORI
("bad id vÆue.", 
id
, 
EINVAL
);

363 
	}
}

367 
	$ToﬁExec
(
id
)

368 
id
;

370 
	`ID_OK
(
id
))

372 (*
	`TWA
(
id
).
u£rfunc
)(id);

376 
	`ERRORI
("bad id vÆue.", 
id
, 
EINVAL
);

379 
	}
}

384 
	$NuŒDøwFunc
(
di•œy
, 
id
, 
evít
, 
keysym
, 
°rög
)

385 
Di•œy
 *
di•œy
;

386 
id
;

387 
XExpo£Evít
 *
evít
;

388 
KeySym
 
keysym
;

389 *
°rög
;

391 
	}
}

394 
	$NuŒU£rFunc
(
id
)

395 
id
;

397 
	}
}

400 
	$NuŒEvítFunc
(
di•œy
, 
id
, 
evít
)

401 
Di•œy
 *
di•œy
;

402 
id
;

403 
XEvít
 *
evít
;

405 
	}
}

409 
	$ToﬁHighlightGroup
(
°©ic_id
, 
group
, 
t›
, 
bŸtom
)

410 
°©ic_id
;

411 
group
;

412 
t›
, 
bŸtom
;

414 
id
;

415 
id
 = 0; id < 
toﬁ_max_id
; id++)

417 (
	`ToﬁGëGroup
(
id
Ë=
group
Ë&& (id !
°©ic_id
))

419 
	`ToﬁHighlight
(
id
, 
t›
, 
bŸtom
);

423 
	}
}

427 
	$ToﬁHighlight
(
id
, 
t›
, 
bŸtom
)

428 
id
;

429 
t›
, 
bŸtom
;

432  ! 
	`ID_OK
(
id
)) ;

435 
	`ToﬁSëF‹eground
(
id
, 
t›
);

436 
	`ToﬁDøwLöe
(
id
, 0, 0, 
	`TWA
(id).
width
, 0);

437 
	`ToﬁDøwLöe
(
id
, 0, 1, 
	`TWA
(id).
width
-1, 1);

438 
	`ToﬁDøwLöe
(
id
, 0, 0, 0, 
	`TWA
(id).
height
);

439 
	`ToﬁDøwLöe
(
id
, 1, 1, 1, 
	`TWA
(id).
height
-1);

442 
	`ToﬁSëF‹eground
(
id
, 
bŸtom
);

443 
	`ToﬁDøwLöe
(
id
, 0, 
	`TWA
(id).
height
, TWA(id).
width
,

444 
	`TWA
(
id
).
height
);

445 
	`ToﬁDøwLöe
(
id
, 1, 
	`TWA
(id).
height
-1, TWA(id).
width
-1,

446 
	`TWA
(
id
).
height
-1);

447 
	`ToﬁDøwLöe
(
id
, 
	`TWA
(id).
width
, TWA(id).
height
,

448 
	`TWA
(
id
).
width
, 0);

449 
	`ToﬁDøwLöe
(
id
, 
	`TWA
(id).
width
-1, TWA(id).
height
-1,

450 
	`TWA
(
id
).
width
-1, 1);

452 
	}
}

456 
	$ToﬁDøwLöe
(
id
, 
x1
, 
y1
, 
x2
, 
y2
)

457 
id
;

458 
x1
, 
y1
, 
x2
, 
y2
;

460 
	`ID_OK
(
id
))

462 
	`XDøwLöe
(
	`TWA
(
id
).
di•œy
, TWA(id).
wödow
,

463 
	`TWA
(
id
).
gc
, 
x1
, 
y1
, 
x2
, 
y2
);

467 
	`ERRORI
("bad id vÆue.", 
id
, 
EINVAL
);

470 
	}
}

474 
	$ToﬁCÀ¨
(
id
)

475 
id
;

477 
	`ID_OK
(
id
))

479 
	`XCÀ¨Wödow
(
	`TWA
(
id
).
di•œy
, TWA(id).
wödow
);

483 
	`ERRORI
("bad id vÆue.", 
id
, 
EINVAL
);

486 
	}
}

490 
	$ToﬁRedøw
(
id
)

491 
id
;

493 
XEvít
 
evít
;

494 
	`ID_OK
(
id
))

496 
evít
.
xexpo£
.
x
 = 0;

497 
evít
.
xexpo£
.
y
 = 0;

498 
evít
.
xexpo£
.
width
 = 
	`TWA
(
id
).width;

499 
evít
.
xexpo£
.
height
 = 
	`TWA
(
id
).height;

500 
evít
.
xexpo£
.
cou¡
 = 0;

501 
	`Di•©chEvít
(
id
, &
evít
);

505 
	`ERRORI
("bad id vÆue.", 
id
, 
EINVAL
);

508 
	}
}

512 
	$ToﬁResize
(
id
, 
√w_width
, 
√w_height
)

513 
id
;

514 
√w_width
, 
√w_height
;

516 
	`ID_OK
(
id
))

518 (
	`TWA
(
id
).
width
 !
√w_width
) ||

519 (
	`TWA
(
id
).
height
 !
√w_height
))

521 
	`TWA
(
id
).
width
 = 
√w_width
;

522 
	`TWA
(
id
).
height
 = 
√w_height
;

523 
	`XResizeWödow
(
	`TWA
(
id
).
di•œy
, TWA(id).
wödow
,

524 
	`TWA
(
id
).
width
, TWA(id).
height
);

529 
	`ERRORI
("bad id vÆue.", 
id
, 
EINVAL
);

532 
	}
}

536 
	$ToﬁEvít
(
evít
)

537 
XEvít
 *
evít
;

539 
id
, 
i
;

542 
id
 = -1;

543 
i
 = 0; i < 
toﬁ_max_id
; i++)

545 
	`TWA
(
i
).
wödow
 =
evít
->
x™y
.window)

547 
id
 = 
i
;

553 
id
 >= 0)

555 
	`Di•©chEvít
(
id
, 
evít
);

556 (
True
);

558 
	`ERRORI
("nÿid found f‹ wödow.", 
evít
->
x™y
.
wödow
, 
EINVAL
);

559 (
FÆ£
);

560 
	}
}

564 
	$Di•©chEvít
(
id
, 
evít
)

565 
id
;

566 
XEvít
 *
evít
;

568 
d⁄e
 = 
FÆ£
;

569 
°rög
[100];

570 
KeySym
 
keysym
;

573 *
°rög
 = 0;

574 
keysym
 = 0;

577 
evít
->
ty≥
)

579 
Expo£
:

580 (*
	`TWA
(
id
).
døwfunc
)(TWA(id).
di•œy
, id, 
evít
);

582 
KeyPªss
:

583 
d⁄e
 = 
	`DecodeKeyPªss
(
evít
, &
keysym
, 
°rög
);

584 
Buâ⁄Pªss
:

585 
Buâ⁄Rñó£
:

586 
MŸi⁄NŸify
:

587 (*
	`TWA
(
id
).
evítfunc
)(TWA(id).
di•œy
, id,

588 
evít
, 
keysym
, 
°rög
);

590 
M≠pögNŸify
:

591 
	`XRe‰eshKeybﬂrdM≠pög
(
evít
);

594 (*
	`TWA
(
id
).
evítfunc
)(TWA(id).
di•œy
, id,

595 
evít
, 
keysym
, 
°rög
);

598 (
d⁄e
);

599 
	}
}

	@toolkit.h

1 #i‚de‡
__TOOLKIT_H


2  
	#__TOOLKIT_H


	)
5 
	~<X11/Xlib.h
>

6 
	~<X11/Xutû.h
>

7 
	~"myxlib.h
"

10 
Cª©eToﬁWödow
();

11 
Di•œy
 *
ToﬁGëDi•œy
();

12 
Wödow
 
ToﬁGëWödow
();

13 
ToﬁSëBackground
();

14 
ToﬁSëF‹eground
();

15 
ToﬁSëGC
();

16 
ToﬁSëF⁄t
();

17 
ToﬁGëGroup
();

18 
ToﬁSëGroup
();

19 
ToﬁGëSèã
();

20 
ToﬁSëSèã
();

21 
ToﬁGëName
();

22 
ToﬁSëName
();

23 
ToﬁCíãrText
();

24 
ToﬁDøwName
();

25 
ToﬁSëFun˘i⁄s
();

26 
ToﬁSëU£rFunc
();

27 
ToﬁExec
();

28 
NuŒDøwFunc
();

29 
NuŒU£rFunc
();

30 
NuŒEvítFunc
();

31 
ToﬁHighlightGroup
();

32 
ToﬁHighlight
();

33 
ToﬁDøwLöe
();

34 
ToﬁCÀ¨
();

35 
ToﬁRedøw
();

36 
ToﬁResize
();

37 
ToﬁEvít
();

38 
Di•©chEvít
();

39 
TextE¡ryEvít
();

40 
TextE¡ryDøw
();

41 
Cª©eTextLabñ
();

42 
PushBuâ⁄Evít
();

43 
PushBuâ⁄Døw
();

44 
UnhighlightPushBuâ⁄
();

45 
Cª©ePushBuâ⁄
();

46 
LabñDøw
();

47 
Cª©eTextLabñ
();

48 
Wödow
 
Cª©eDülog
();

49 
P›DownDülog
();

50 
P›UpDülog
();

51 
GëDülogD©a
();

52 
SëDülogCÆlback
();

53 
SëDülogC™˚lCÆlback
();

54 
SëDülogD©a
();

55 
SëDülogProm±
();

56 
QuîyPoöãr
();

57 
Cª©eTønsõ¡Wödow
();

	@topwind.c

2 
	~<°dio.h
>

3 
	~<X11/Xlib.h
>

4 
	~<X11/Xutû.h
>

5 
	~"ªtu∫s.h
"

6 
	~"debug.h
"

7 
	~"myxlib.h
"

10  
	#APPL_CLASS
 "Exam∂es"

	)
13 
Wödow


14 
	$T›Wödow
(
di•œy
, 
∑ª¡
, 
¨gc
, 
¨gv
, 
x
, 
y
, 
width
, 
height
,

15 
b‹dîcﬁ‹
, 
backcﬁ‹
, 
evít_mask
, 
visuÆ
)

16 
Di•œy
 *
di•œy
;

17 
Wödow
 
∑ª¡
;

18 
¨gc
;

19 **
¨gv
;

20 *
x
, *
y
;

21 *
width
, *
height
;

22 
b‹dîcﬁ‹
;

23 
backcﬁ‹
;

24 
evít_mask
;

25 
VisuÆ
 *
visuÆ
;

27 
Wödow
 
wödow
;

28 
s¸ìn
;

29 
öôül_°©e
;

32 
s¸ìn
 = 
	`DeÁu…S¸ìn
(
di•œy
);

33 
	`CheckGeomëry
(
¨gc
, 
¨gv
, 
	`Di•œyWidth
(
di•œy
, 
s¸ìn
),

34 
	`Di•œyHeight
(
di•œy
, 
s¸ìn
), 
x
, 
y
, 
width
, 
height
);

37 
wödow
 = 
	`O≥nWödow
(
di•œy
, 
∑ª¡
, *
x
, *
y
, *
width
, *
height
,

38 
b‹dîcﬁ‹
, 
backcﬁ‹
, 
evít_mask
, 
visuÆ
);

41 
	`SëSizeHöts
(
di•œy
, 
wödow
, *
x
, *
y
, *
width
, *
height
);

42 
	`SëCœssHöts
(
di•œy
, 
wödow
, 
¨gv
[0], 
APPL_CLASS
);

45 
	`FödWödowName
(
di•œy
, 
wödow
, 
¨gc
, 
¨gv
);

48 
öôül_°©e
 = 
	`FödInôülSèã
(
¨gc
, 
¨gv
);

49 
	`SëWMHöts
(
di•œy
, 
wödow
, 
öôül_°©e
);

52 
	`XSëComm™d
(
di•œy
, 
wödow
, 
¨gv
, 
¨gc
);

55 (
wödow
);

56 
	}
}

60 
	$FödInôülSèã
(
¨gc
, 
¨gv
)

61 
¨gc
;

62 **
¨gv
;

64 *
±r
;

65 
±r
 = 
	`FödP¨amëî
(
¨gc
, 
¨gv
, "-icon");

66 
±r
 !(*)
NULL
)

67 (
Ic⁄icSèã
);

69 (
N‹mÆSèã
);

70 
	}
}

74 
	$FödWödowName
(
di•œy
, 
wödow
, 
¨gc
, 
¨gv
)

75 
Di•œy
 *
di•œy
;

76 
Wödow
 
wödow
;

77 
¨gc
;

78 **
¨gv
;

80 *
±r
, 
wödow_«me
[300];

83 
	`°r˝y
(
wödow_«me
, 
¨gv
[0]);

86 
±r
 = 
	`FödP¨amëî
(
¨gc
, 
¨gv
, "-name");

87 
±r
 !(*)
NULL
)

89 
	`°r˝y
(
wödow_«me
, 
±r
);

93 
±r
 = 
	`FödP¨amëî
(
¨gc
, 
¨gv
, "-title");

94 
±r
 !(*)
NULL
)

96 
	`°r˝y
(
wödow_«me
, 
±r
);

99 
	`SëWödowName
(
di•œy
, 
wödow
, 
wödow_«me
);

103 
	}
}

	@tranwind.c

2 
	~<°dio.h
>

3 
	~<X11/Xlib.h
>

4 
	~"ªtu∫s.h
"

5 
	~"debug.h
"

6 
	~"myxlib.h
"

7 
	~"toﬁkô.h
"

11 
	$Cª©eTønsõ¡Wödow
(
di•œy
, 
∑ª¡
, 
ow√r
, 
x
, 
y
, 
width
, 
height
,

12 
b‹dî
, 
backcﬁ‹
, 
evít_mask
, 
visuÆ
, 
cﬁ‹m≠
,

13 
≠p_«me
, 
wöd_«me
)

14 
Di•œy
 *
di•œy
;

15 
Wödow
 
∑ª¡
, 
ow√r
;

16 
x
, 
y
, 
width
, 
height
;

17 
b‹dî
, 
backcﬁ‹
;

18 
evít_mask
;

19 
VisuÆ
 *
visuÆ
;

20 
Cﬁ‹m≠
 
cﬁ‹m≠
;

21 *
≠p_«me
, *
wöd_«me
;

23 
Wödow
 
wödow
;

26 
wödow
 = 
	`O≥nWödow
(
di•œy
, 
∑ª¡
, 
x
, 
y
, 
width
, 
height
,

27 
b‹dî
, 
backcﬁ‹
, 
evít_mask
, 
visuÆ
);

28 
wödow
 !(
Wödow
)
N⁄e
)

30 
	`XSëTønsõ¡F‹Höt
(
di•œy
, 
wödow
, 
ow√r
);

31 
	`SëSènd¨dHöts
(
di•œy
, 
wödow
, 
≠p_«me
, 
wöd_«me
,

32 
x
, 
y
, 
width
, 
height
);

33 
	`XSëWödowCﬁ‹m≠
(
di•œy
, 
wödow
, 
cﬁ‹m≠
);

34 
	`XSëWödowBackground
(
di•œy
, 
wödow
, 
backcﬁ‹
);

38 (
wödow
);

39 
	}
}

	@uniform.c

4 
	~<sy£¡.h
>

5 
	~<°dlib.h
>

6 
	~<sys/ty≥s.h
>

7 
	~<sys/time.h
>

8 
	~<m©h.h
>

9 
	~<î∫o.h
>

12 
	~"debug.h
"

13 
	~"unif‹m.h
"

16 
	gUnif‹m
::
	$Unif‹m
(): 
	$ProbDi°
()

18 
	`öô
();

19 
	}
}

21 
	gUnif‹m
::
	$Unif‹m
(
mö
, 
max
): 
	$ProbDi°
()

23 
	`öô
(
mö
, 
max
);

24 
	}
}

26 
	gUnif‹m
::
	$Unif‹m
(c⁄° 
Unif‹m
 &
§c
): 
	$ProbDi°
(src)

28 
	`öô
(
§c
);

29 
	}
}

32 
	gUnif‹m
::~
	$Unif‹m
()

35 
°©us
 = 
OK
;

36 
	}
}

40 
	gUnif‹m
::
	$öô
(
mö
, 
max
)

42 
möimum
 = 
mö
;

43 
maximum
 = 
max
;

44 
°©us
 = 
OK
;

45 (
OK
);

46 
	}
}

49 
	gUnif‹m
::
	$öô
(c⁄° 
Unif‹m
 &
§c
)

51 
möimum
 = 
§c
.minimum;

52 
maximum
 = 
§c
.maximum;

53 
°©us
 = 
OK
;

54 (
OK
);

55 
	}
}

58 
	gUnif‹m
 &

59 
	gUnif‹m
::
›î©‹
=(c⁄° 
Unif‹m
 &
§c
)

61 
this
 =&
§c
) (*this);

62 
	gProbDi°
::
›î©‹
=(
§c
);

63 
öô
(
§c
);

64 (*
	gthis
);

69 
	gUnif‹m
::
	$øndomSam∂e
()

71 (
möimum
+(
maximum
-möimum)*
	`dønd48
());

72 
	}
}

	@uniform.h

1 #i‚de‡
__UNIFORM_H


2  
	#__UNIFORM_H


	)
6 
	~"ªtu∫s.h
"

7 
	~"¥obDi°.h
"

10 
˛ass
 
	gUnif‹m
;

13 
˛ass
 
	cUnif‹m
: 
public
 
ProbDi°
 {

14 
public
:

16 
Unif‹m
();

17 
Unif‹m
(, );

18 
Unif‹m
(const Uniform &);

19 ~
Unif‹m
();

22 
	mUnif‹m
 &
	m›î©‹
=(c⁄° 
Unif‹m
 &);

25 
øndomSam∂e
();

28 
öô
(= 0.0, = 1.0);

29 
öô
(c⁄° 
Unif‹m
 &);

30 
ölöe
 
	$gëSètus
(Ë{ (
°©us
); }

32 
public
:

34 
möimum
;

35 
maximum
;

36 
	}
};

	@usage.c

2 
	~<°dio.h
>

3 
	~<°rög.h
>

4 
	~"ªtu∫s.h
"

5 
	~"debug.h
"

6 
	~"myxlib.h
"

9 #i‚de‡
True


10  
	#True
 1

	)
12 #i‚de‡
FÆ£


13  
	#FÆ£
 0

	)
18 
	$CheckF‹Hñp
(
¨gc
, 
¨gv
, 
exåa_mesßge
)

19 
¨gc
;

20 **
¨gv
;

21 *
exåa_mesßge
;

23 *
±r
;

26 
±r
 = 
	`FödP¨amëî
(
¨gc
, 
¨gv
, "-help");

27 
±r
 !(*)
NULL
)

29 
	`PrötUßgeMesßge
(
exåa_mesßge
);

30 (
True
);

34 (
FÆ£
);

35 
	}
}

38 
	$PrötUßgeMesßge
(
exåa_mesßge
)

39 *
exåa_mesßge
;

41 
	`Ârötf
(
°dîr
, "available options:\n");

42 
	`Ârötf
(
°dîr
, "\t-display displayname\n");

43 
	`Ârötf
(
°dîr
, "\t-geometry geometry specs\n");

44 
	`Ârötf
(
°dîr
, "\t-font fontÇame\n");

45 
	`Ârötf
(
°dîr
, "\t-fn fontÇame\n");

46 
	`Ârötf
(
°dîr
, "\t-title windowÅitle\n");

47 
	`Ârötf
(
°dîr
, "\t-name windowÅitle\n");

48 
	`Ârötf
(
°dîr
, "\t-iconic\n");

49 
exåa_mesßge
 && *extra_message)

50 
	`Ârötf
(
°dîr
, "%s\n", 
exåa_mesßge
);

52 
	}
}

	@visual.c

2 
	~<°dio.h
>

3 
	~<X11/Xlib.h
>

4 
	~<X11/Xutû.h
>

5 
	~"ªtu∫s.h
"

6 
	~"debug.h
"

7 
	~"myxlib.h
"

11 
	$SëUpVisuÆ
(
di•œy
, 
s¸ìn
, 
visuÆ
, 
dïth
)

12 
Di•œy
 *
di•œy
;

13 
s¸ìn
;

14 
VisuÆ
 **
visuÆ
;

15 *
dïth
;

17 
numbî_visuÆs
;

19 
XVisuÆInfo
 *
visuÆ_¨øy
;

20 
XVisuÆInfo
 
visuÆ_öfo_ãm∂©e
;

21 
°©us
 = 
FÆ£
;

24 
	`DeÁu…VisuÆ
(
di•œy
, 
s¸ìn
)->
˛ass
 =
P£udoCﬁ‹
)

27 *
visuÆ
 = 
	`DeÁu…VisuÆ
(
di•œy
, 
s¸ìn
);

28 *
dïth
 = 
	`DeÁu…Dïth
(
di•œy
, 
s¸ìn
);

29 
°©us
 = 
True
;

34 
visuÆ_öfo_ãm∂©e
.
˛ass
 = 
P£udoCﬁ‹
;

35 
visuÆ_öfo_ãm∂©e
.
s¸ìn
 = screen;

36 
visuÆ_¨øy
 = 
	`XGëVisuÆInfo
(
di•œy
,

37 (
VisuÆCœssMask
 | 
VisuÆS¸ìnMask
),

38 &
visuÆ_öfo_ãm∂©e
, &
numbî_visuÆs
);

39 (
numbî_visuÆs
 > 0Ë&& (
visuÆ_¨øy
 !
NULL
))

41 *
visuÆ
 = 
visuÆ_¨øy
[0].visual;

42 *
dïth
 = 
visuÆ_¨øy
[0].depth;

43 
	`XFªe
(
visuÆ_¨øy
);

44 
°©us
 = 
True
;

48 *
visuÆ
 = 
C›yFromP¨ít
;

49 
°©us
 = 
FÆ£
;

54 (
°©us
);

55 
	}
}

	@window.c

2 
	~<°dio.h
>

3 
	~<X11/Xlib.h
>

4 
	~<X11/Xutû.h
>

5 
	~"ªtu∫s.h
"

6 
	~"debug.h
"

7 
	~"myxlib.h
"

10  
	#BORDER_WIDTH
 2

	)
11  
	#APPL_CLASS
 "Exam∂es"

	)
14 
Wödow


15 
	$O≥nWödow
(
di•œy
, 
∑ª¡
, 
x
, 
y
, 
width
, 
height
, 
b‹dîcﬁ‹
,

16 
backcﬁ‹
, 
evít_mask
, 
visuÆ
)

17 
Di•œy
 *
di•œy
;

18 
Wödow
 
∑ª¡
;

19 
x
,
y
;

20 
width
, 
height
;

21 
b‹dîcﬁ‹
;

22 
backcﬁ‹
;

23 
evít_mask
;

24 
VisuÆ
 *
visuÆ
;

26 
Wödow
 
wödow
;

27 
XSëWödowAâribuãs
 
©åibuãs
;

28 
©å_mask
;

31 
©åibuãs
.
evít_mask
 =Évent_mask;

32 
©åibuãs
.
b‹dî_pixñ
 = 
b‹dîcﬁ‹
;

33 
©åibuãs
.
background_pixñ
 = 
backcﬁ‹
;

34 
©å_mask
 = 
CWEvítMask
 | 
CWBackPixñ
 | 
CWB‹dîPixñ
;

38 
©åibuãs
.
ovîride_ªdúe˘
 = 
True
;

39 
©å_mask
 |
CWOvîrideRedúe˘
;

43 
wödow
 = 
	`XCª©eWödow
(
di•œy
, 
∑ª¡
, 
x
, 
y
, 
width
, 
height
,

44 
BORDER_WIDTH
, 
C›yFromP¨ít
, 
I≈utOuçut
,

45 
visuÆ
, 
©å_mask
, &
©åibuãs
);

48 (
wödow
);

49 
	}
}

53 
	$SëSènd¨dHöts
(
di•œy
, 
wödow
, 
≠p_«me
, 
wöd_«me
, 
x
, 
y
,

54 
width
, 
height
)

55 
Di•œy
 *
di•œy
;

56 
Wödow
 
wödow
;

57 *
≠p_«me
;

58 *
wöd_«me
;

59 
x
, 
y
, 
width
, 
height
;

62 
	`SëSizeHöts
(
di•œy
, 
wödow
, 
x
, 
y
, 
width
, 
height
);

63 
	`SëWödowName
(
di•œy
, 
wödow
, 
≠p_«me
, 
APPL_CLASS
);

64 
	`SëWMHöts
(
di•œy
, 
wödow
, 
N‹mÆSèã
);

68 
	}
}

	@wmhints.c

2 
	~<°dio.h
>

3 
	~<X11/Xlib.h
>

4 
	~<X11/Xutû.h
>

5 
	~"ªtu∫s.h
"

6 
	~"debug.h
"

7 
	~"myxlib.h
"

11 
	$SëWMHöts
(
di•œy
, 
wödow
, 
öôül_°©e
)

12 
Di•œy
 *
di•œy
;

13 
Wödow
 
wödow
;

14 
öôül_°©e
;

16 
XWMHöts
 
wm_höts
;

19 
wm_höts
.
Êags
 = 
I≈utHöt
 | 
SèãHöt
;

22 
wm_höts
.
öôül_°©e
 = initial_state;

25 
wm_höts
.
öput
 = 
True
;

28 
	`XSëWMHöts
(
di•œy
, 
wödow
, &
wm_höts
);

32 
	}
}

	@wmname.c

2 
	~<°dio.h
>

3 
	~<X11/Xlib.h
>

4 
	~"ªtu∫s.h
"

5 
	~"debug.h
"

6 
	~"myxlib.h
"

10 
	$SëWödowName
(
di•œy
, 
wödow
, 
«me
)

11 
Di•œy
 *
di•œy
;

12 
Wödow
 
wödow
;

13 *
«me
;

16 
	`XSt‹eName
(
di•œy
, 
wödow
, 
«me
);

20 
	}
}

	@xor.c

2 
	~<°dio.h
>

3 
	~<X11/Xlib.h
>

4 
	~<X11/Xutû.h
>

5 
	~"ªtu∫s.h
"

6 
	~"debug.h
"

7 
	~"myxlib.h
"

10 
GC


11 
	$Cª©eX‹GC
(
di•œy
, 
døwabÀ
, 
f‹ecﬁ‹
, 
backcﬁ‹
)

12 
Di•œy
 *
di•œy
;

13 
DøwabÀ
 
døwabÀ
;

14 
f‹ecﬁ‹
;

15 
backcﬁ‹
;

17 
XGCVÆues
 
xgcvÆues
;

18 
GC
 
gc
;

21 
xgcvÆues
.
f‹eground
 = 
f‹ecﬁ‹
 ^ 
backcﬁ‹
;

22 
xgcvÆues
.
background
 = 0;

23 
xgcvÆues
.
fun˘i⁄
 = 
GXx‹
;

26 
gc
 = 
	`XCª©eGC
(
di•œy
, 
døwabÀ
,

27 (
GCFun˘i⁄
 | 
GCF‹eground
 | 
GCBackground
),

28 &
xgcvÆues
);

31 (
gc
);

32 
	}
}

	@/usr/include/ctype.h

8 #i‚de‡
_CTYPE_H


9  
	#_CTYPE_H


	)
11 #¥agm®
idít
 "@(#)ctype.h 1.19 95/01/28 SMI"

13 
	~<sys/„©uª_ã°s.h
>

15 #ifdef 
__˝lu•lus


19  
	#_U
 01

	)
20  
	#_L
 02

	)
21  
	#_N
 04

	)
22  
	#_S
 010

	)
23  
	#_P
 020

	)
24  
	#_C
 040

	)
25  
	#_B
 0100

	)
26  
	#_X
 0200

	)
28 #i‡
deföed
(
__STDC__
)

30 
iß um
();

31 
ißÕha
();

32 
is˙ål
();

33 
isdigô
();

34 
isgøph
();

35 
i¶owî
();

36 
i•röt
();

37 
i•un˘
();

38 
is•a˚
();

39 
isuµî
();

40 
isxdigô
();

41 
tﬁowî
();

42 
touµî
();

44 #i‡
deföed
(
__EXTENSIONS__
Ë|| ((
__STDC__
 == 0 && \

45 !
deföed
(
_POSIX_C_SOURCE
)Ë|| deföed(
_XOPEN_SOURCE
))

47 
ißscii
();

48 
tﬂscii
();

49 
_tﬁowî
();

50 
_touµî
();

54 
__˘y≥
[];

64 #i‡!#löt(
⁄
Ë&& !
deföed
(
__löt
)

66  
	#ißÕha
(
c
) ((
__˘y≥
 + 1)[c] & (
_U
 | 
_L
))

	)
67  
	#isuµî
(
c
) ((
__˘y≥
 + 1)[c] & 
_U
)

	)
68  
	#i¶owî
(
c
) ((
__˘y≥
 + 1)[c] & 
_L
)

	)
69  
	#isdigô
(
c
) ((
__˘y≥
 + 1)[c] & 
_N
)

	)
70  
	#isxdigô
(
c
) ((
__˘y≥
 + 1)[c] & 
_X
)

	)
71  
	#iß um
(
c
) ((
__˘y≥
 + 1)[c] & (
_U
 | 
_L
 | 
_N
))

	)
72  
	#is•a˚
(
c
) ((
__˘y≥
 + 1)[c] & 
_S
)

	)
73  
	#i•un˘
(
c
) ((
__˘y≥
 + 1)[c] & 
_P
)

	)
74  
	#i•röt
(
c
) ((
__˘y≥
 + 1)[c] & (
_P
 | 
_U
 | 
_L
 | 
_N
 | 
_B
))

	)
75  
	#isgøph
(
c
) ((
__˘y≥
 + 1)[c] & (
_P
 | 
_U
 | 
_L
 | 
_N
))

	)
76  
	#is˙ål
(
c
) ((
__˘y≥
 + 1)[c] & 
_C
)

	)
78 #i‡
deföed
(
__EXTENSIONS__
Ë|| ((
__STDC__
 == 0 && \

79 !
deföed
(
_POSIX_C_SOURCE
)Ë|| deföed(
_XOPEN_SOURCE
))

81  
	#ißscii
(
c
) (!((cË& ~0177))

	)
82  
	#_touµî
(
c
) ((
__˘y≥
 + 258)[c])

	)
83  
	#_tﬁowî
(
c
) ((
__˘y≥
 + 258)[c])

	)
84  
	#tﬂscii
(
c
) ((cË& 0177)

	)
92 
_˘y≥
[];

94 #i‡!
deföed
(
löt
Ë&& !deföed(
__löt
)

96  
	#ißÕha
(
c
) ((
_˘y≥
 + 1)[c] & (
_U
 | 
_L
))

	)
97  
	#isuµî
(
c
) ((
_˘y≥
 + 1)[c] & 
_U
)

	)
98  
	#i¶owî
(
c
) ((
_˘y≥
 + 1)[c] & 
_L
)

	)
99  
	#isdigô
(
c
) ((
_˘y≥
 + 1)[c] & 
_N
)

	)
100  
	#isxdigô
(
c
) ((
_˘y≥
 + 1)[c] & 
_X
)

	)
101  
	#iß um
(
c
) ((
_˘y≥
 + 1)[c] & (
_U
 | 
_L
 | 
_N
))

	)
102  
	#is•a˚
(
c
) ((
_˘y≥
 + 1)[c] & 
_S
)

	)
103  
	#i•un˘
(
c
) ((
_˘y≥
 + 1)[c] & 
_P
)

	)
104  
	#i•röt
(
c
) ((
_˘y≥
 + 1)[c] & (
_P
 | 
_U
 | 
_L
 | 
_N
 | 
_B
))

	)
105  
	#isgøph
(
c
) ((
_˘y≥
 + 1)[c] & (
_P
 | 
_U
 | 
_L
 | 
_N
))

	)
106  
	#is˙ål
(
c
) ((
_˘y≥
 + 1)[c] & 
_C
)

	)
107  
	#ißscii
(
c
) (!((cË& ~0177))

	)
108  
	#_touµî
(
c
) ((
_˘y≥
 + 258)[c])

	)
109  
	#_tﬁowî
(
c
) ((
_˘y≥
 + 258)[c])

	)
110  
	#tﬂscii
(
c
) ((cË& 0177)

	)
116 #ifdef 
__˝lu•lus


	@/usr/include/errno.h

8 #i‚de‡
_ERRNO_H


9  
	#_ERRNO_H


	)
11 #¥agm®
idít
 "@(#)errno.h 1.13 95/09/10 SMI"

17 
	~<sys/î∫o.h
>

19 #ifdef 
__˝lu•lus


23 #i‡(
deföed
(
_REENTRANT
Ë|| deföed(
_TS_ERRNO
) || \

24 
_POSIX_C_SOURCE
 - 0 >199506LË&& !(
deföed
(
löt
Ë|| 
	$deföed
(
__löt
))

25 *
	`___î∫o
();

26  
	#î∫o
 (*(
	`___î∫o
()))

	)
28 
î∫o
;

31 #ifdef 
__˝lu•lus


32 
	}
}

	@/usr/include/math.h

5 #i‚de‡
_MATH_H


6  
	#_MATH_H


	)
8 #ifde‡
__˝lu•lus


12 #¥agm®
idít
 "@(#)math.h 2.5 95/02/07"

14 #i‡
deföed
(
_POSIX_SOURCE
Ë&& !deföed(
_POSIX_C_SOURCE
)

15  
	#_POSIX_C_SOURCE
 1

	)
18 #ifde‡
__STDC__


19  
	#__P
(
p
) 
	)
p

21  
	#__P
(
p
) ()

	)
27 
	u_h_vÆ
 {

28 
_i
[2];

29 
_d
;

30 } 
	t_h_vÆ
;

32 #ifde‡
__STDC__


33 c⁄° 
_h_vÆ
 
__huge_vÆ
;

35 
_h_vÆ
 
__huge_vÆ
;

38  
	#HUGE_VAL
 
__huge_vÆ
.
_d


	)
40 #i‡
deföed
(
__EXTENSIONS__
Ë|| 
__STDC__
 - 0 == 0 && \

41 !
deföed
(
_POSIX_C_SOURCE
Ë|| deföed(
_XOPEN_SOURCE
)

45  
	#M_E
 2.7182818284590452354

	)
46  
	#M_LOG2E
 1.4426950408889634074

	)
47  
	#M_LOG10E
 0.43429448190325182765

	)
48  
	#M_LN2
 0.69314718055994530942

	)
49  
	#M_LN10
 2.30258509299404568402

	)
50  
	#M_PI
 3.14159265358979323846

	)
51  
	#M_PI_2
 1.57079632679489661923

	)
52  
	#M_PI_4
 0.78539816339744830962

	)
53  
	#M_1_PI
 0.31830988618379067154

	)
54  
	#M_2_PI
 0.63661977236758134308

	)
55  
	#M_2_SQRTPI
 1.12837916709551257390

	)
56  
	#M_SQRT2
 1.41421356237309504880

	)
57  
	#M_SQRT1_2
 0.70710678118654752440

	)
59 
signgam
;

61  
	#MAXFLOAT
 (()3.40282346638528860e+38)

	)
63 #i‡
deföed
(
__EXTENSIONS__
Ë|| !deföed(
_XOPEN_SOURCE
)

67 
	evîsi⁄
 {
	glibm_õì
 = -1, 
	gc_issue_4
, 
	g™si_1
, 
	g°ri˘_™si
};

69 #ifde‡
__STDC__


70 c⁄° 
vîsi⁄
 
_lib_vîsi⁄
;

72 
vîsi⁄
 
_lib_vîsi⁄
;

75 
	sex˚±i⁄
 {

76 
	gty≥
;

77 *
	g«me
;

78 
	g¨g1
;

79 
	g¨g2
;

80 
	gªtvÆ
;

83  
	#HUGE
 
MAXFLOAT


	)
85  
	#_ABS
(
x
) ((xË< 0 ? -(xË: (x))

	)
87  
	#_REDUCE
(
TYPE
, 
X
, 
XN
, 
C1
, 
C2
) { \

88 
x1
 = ()(
TYPE
)
X
, 
x2
 = X - x1; \

89 
X
 = 
x1
 - (
XN
Ë* (
C1
); X +
x2
; X -(XNË* (
C2
); }

	)
91  
	#DOMAIN
 1

	)
92  
	#SING
 2

	)
93  
	#OVERFLOW
 3

	)
94  
	#UNDERFLOW
 4

	)
95  
	#TLOSS
 5

	)
96  
	#PLOSS
 6

	)
98  
	#_POLY1
(
x
, 
c
) ((c)[0] * (xË+ (c)[1])

	)
99  
	#_POLY2
(
x
, 
c
) (
	`_POLY1
((x), (c)Ë* (xË+ (c)[2])

	)
100  
	#_POLY3
(
x
, 
c
) (
	`_POLY2
((x), (c)Ë* (xË+ (c)[3])

	)
101  
	#_POLY4
(
x
, 
c
) (
	`_POLY3
((x), (c)Ë* (xË+ (c)[4])

	)
102  
	#_POLY5
(
x
, 
c
) (
	`_POLY4
((x), (c)Ë* (xË+ (c)[5])

	)
103  
	#_POLY6
(
x
, 
c
) (
	`_POLY5
((x), (c)Ë* (xË+ (c)[6])

	)
104  
	#_POLY7
(
x
, 
c
) (
	`_POLY6
((x), (c)Ë* (xË+ (c)[7])

	)
105  
	#_POLY8
(
x
, 
c
) (
	`_POLY7
((x), (c)Ë* (xË+ (c)[8])

	)
106  
	#_POLY9
(
x
, 
c
) (
	`_POLY8
((x), (c)Ë* (xË+ (c)[9])

	)
113 
acos
 
__P
(());

114 
asö
 
__P
(());

115 
©™
 
__P
(());

116 
©™2
 
__P
((, ));

117 
cos
 
__P
(());

118 
sö
 
__P
(());

119 
èn
 
__P
(());

121 
cosh
 
__P
(());

122 
söh
 
__P
(());

123 
ènh
 
__P
(());

125 
exp
 
__P
(());

126 
‰exp
 
__P
((, *));

127 
ldexp
 
__P
((, ));

128 
log
 
__P
(());

129 
log10
 
__P
(());

130 
modf
 
__P
((, *));

132 
pow
 
__P
((, ));

133 
sqπ
 
__P
(());

135 
˚û
 
__P
(());

136 
Ábs
 
__P
(());

137 
Êo‹
 
__P
(());

138 
fmod
 
__P
((, ));

140 #i‡
deföed
(
__EXTENSIONS__
Ë|| 
__STDC__
 - 0 == 0 && \

141 !
deföed
(
_POSIX_C_SOURCE
Ë|| deföed(
_XOPEN_SOURCE
)

145 
îf
 
__P
(());

146 
îfc
 
__P
(());

147 
gamma
 
__P
(());

148 
hypŸ
 
__P
((, ));

149 
i¢™
 
__P
(());

150 
j0
 
__P
(());

151 
j1
 
__P
(());

152 
jn
 
__P
((, ));

153 
lgamma
 
__P
(());

154 
y0
 
__P
(());

155 
y1
 
__P
(());

156 
yn
 
__P
((, ));

158 #i‡
deföed
(
__EXTENSIONS__
Ë|| !deföed(
_XOPEN_SOURCE
) || \

159 
deföed
(
_XOPEN_SOURCE
Ë&& 
	g_XOPEN_SOURCE_EXTENDED
 - 0 == 1

163 
acosh
 
__P
(());

164 
asöh
 
__P
(());

165 
©™h
 
__P
(());

166 
cbπ
 
__P
(());

167 
logb
 
__P
(());

168 
√xè·î
 
__P
((, ));

169 
ªmaödî
 
__P
((, ));

170 
sˇlb
 
__P
((, ));

175 
expm1
 
__P
(());

176 
ûogb
 
__P
(());

177 
log1p
 
__P
(());

178 
röt
 
__P
(());

181 #i‡
deföed
(
__EXTENSIONS__
Ë|| !deföed(
_XOPEN_SOURCE
)

185 
m©hîr
 
__P
((
ex˚±i⁄
 *));

190 
signifiˇnd
 
__P
(());

195 
c›ysign
 
__P
((, ));

196 
sˇlbn
 
__P
((, ));

202 #ifde‡
_REENTRANT


203 
gamma_r
 
__P
((, *));

204 
lgamma_r
 
__P
((, *));

210 
modff
 
__P
((, *));

212 
	~<Êﬂtögpoöt.h
>

216 #ifde‡
__˝lu•lus


	@/usr/include/stdio.h

12 #i‚de‡
_STDIO_H


13  
	#_STDIO_H


	)
15 #¥agm®
idít
 "@(#)stdio.h 1.39 95/12/04 SMI"

17 
	~<sys/„©uª_ã°s.h
>

18 
	~<sys/va_li°.h
>

20 #ifdef 
__˝lu•lus


24 #i‚de‡
_SIZE_T


25  
	#_SIZE_T


	)
26 
	tsize_t
;

29 
	tÂos_t
;

31 #i‚de‡
NULL


32  
	#NULL
 0

	)
35  
	#BUFSIZ
 1024

	)
42 #i‡
deföed
(
_XOPEN_SOURCE
Ë&& (
_XOPEN_VERSION
 - 0 =4Ë&& !deföed(
_VA_LIST
)

43  
	#_VA_LIST


	)
44 
__va_li°
 
	tva_li°
;

47 #ifdef 
__STDC__


61 #i‡#machöe(
i386
Ë|| 
deföed
(
__i386
)

62  
	#_NFILE
 60

	)
63 #ñi‡#machöe(
µc
Ë|| 
deföed
(
__µc
)

64  
	#_NFILE
 20

	)
66  
	#_NFILE
 20

	)
69 #i‡
deföed
(
i386
Ë|| deföed(
__i386
)

70  
	#_NFILE
 60

	)
71 #ñi‡
deföed
(
__µc
)

72  
	#_NFILE
 20

	)
74  
	#_NFILE
 20

	)
78  
	#_SBFSIZ
 8

	)
80  
	#_IOFBF
 0000

	)
81  
	#_IOLBF
 0100

	)
82  
	#_IONBF
 0004

	)
83  
	#_IOEOF
 0020

	)
84  
	#_IOERR
 0040

	)
86  
	#_IOREAD
 0001

	)
87  
	#_IOWRT
 0002

	)
88  
	#_IORW
 0200

	)
89  
	#_IOMYBUF
 0010

	)
91 #i‚de‡
EOF


92  
	#EOF
 (-1)

	)
95  
	#FOPEN_MAX
 
_NFILE


	)
96  
	#FILENAME_MAX
 1024

	)
98  
	#SEEK_SET
 0

	)
99  
	#SEEK_CUR
 1

	)
100  
	#SEEK_END
 2

	)
101  
	#TMP_MAX
 17576

	)
103 #i‡
deföed
(
__EXTENSIONS__
Ë|| 
__STDC__
 - 0 == 0 || \

104 
deföed
(
_POSIX_C_SOURCE
Ë|| deföed(
_XOPEN_SOURCE
)

106  
	#L_˘îmid
 9

	)
107  
	#L_cu£rid
 9

	)
110 #i‡
deföed
(
__EXTENSIONS__
Ë|| ((
__STDC__
 - 0 == 0 && \

111 !
deföed
(
_POSIX_C_SOURCE
))Ë|| deföed(
_XOPEN_SOURCE
)

113  
	#P_tmpdú
 "/v¨/tmp/"

	)
116  
	#L_tm≤am
 25

	)
118 #i‡
deföed
(
__STDC__
)

119  
	#°dö
 (&
__iob
[0])

	)
120  
	#°dout
 (&
__iob
[1])

	)
121  
	#°dîr
 (&
__iob
[2])

	)
123  
	#°dö
 (&
_iob
[0])

	)
124  
	#°dout
 (&
_iob
[1])

	)
125  
	#°dîr
 (&
_iob
[2])

	)
129 
	s
{

130 #ifde‡
_STDIO_REVERSE


131 *
	g_±r
;

132 
	g_˙t
;

134 
	g_˙t
;

135 *
	g_±r
;

137 *
	g_ba£
;

138 
	g_Êag
;

139 
	g_fûe
;

140 } 
	tFILE
;

142 #i‡
deföed
(
__STDC__
)

143 
FILE
 
__iob
[
_NFILE
];

145 
FILE
 
_iob
[
_NFILE
];

147 
FILE
 *
_œ°buf
;

148 *
_bu„ndèb
[];

149 #i‚de‡
_STDIO_ALLOCATE


150 
_sibuf
[], 
_sobuf
[];

153 #i‡
deföed
(
__STDC__
)

155 
ªmove
(const *);

156 
ª«me
(const *, const *);

157 
FILE
 *
tmpfûe
();

158 *
tm≤am
(*);

159 #if 
deföed
(
__EXTENSIONS__
Ë|| deföed(
_REENTRANT
)

160 *
tm≤am_r
(*);

162 
f˛o£
(
FILE
 *);

163 
fÊush
(
FILE
 *);

164 
FILE
 *
f›í
(const *, const *);

165 
FILE
 *
‰e›í
(const *, const *, FILE *);

166 
£tbuf
(
FILE
 *, *);

167 
£tvbuf
(
FILE
 *, *, , 
size_t
);

169 
Ârötf
(
FILE
 *, const *, ...);

171 
fsˇnf
(
FILE
 *, const *, ...);

173 
¥ötf
(const *, ...);

175 
sˇnf
(const *, ...);

177 
•rötf
(*, const *, ...);

179 
ssˇnf
(const *, const *, ...);

180 
vÂrötf
(
FILE
 *, c⁄° *, 
__va_li°
);

181 
v¥ötf
(c⁄° *, 
__va_li°
);

182 
v•rötf
(*, c⁄° *, 
__va_li°
);

183 
fgëc
(
FILE
 *);

184 *
fgës
(*, , 
FILE
 *);

185 
Âutc
(, 
FILE
 *);

186 
Âuts
(c⁄° *, 
FILE
 *);

187 
gëc
(
FILE
 *);

188 
gëch¨
();

189 *
gës
(*);

190 
putc
(, 
FILE
 *);

191 
putch¨
();

192 
puts
(const *);

193 
ungëc
(, 
FILE
 *);

194 
size_t
 
‰ód
(*, size_t, size_t, 
FILE
 *);

195 
size_t
 
fwrôe
(c⁄° *, size_t, size_t, 
FILE
 *);

196 
fgëpos
(
FILE
 *, 
Âos_t
 *);

197 
f£ek
(
FILE
 *, , );

198 
f£ços
(
FILE
 *, c⁄° 
Âos_t
 *);

199 
·ñl
(
FILE
 *);

200 
ªwöd
(
FILE
 *);

201 
˛óªº
(
FILE
 *);

202 
„of
(
FILE
 *);

203 
„º‹
(
FILE
 *);

204 
≥º‹
(const *);

206 
__fûbuf
(
FILE
 *);

207 
__Êsbuf
(, 
FILE
 *);

212 #i‡
deföed
(
__EXTENSIONS__
Ë|| 
__STDC__
 == 0 || \

213 
deföed
(
_POSIX_C_SOURCE
Ë|| deföed(
_XOPEN_SOURCE
)

215 
FILE
 *
fd›í
(, const *);

216 *
˘îmid
(*);

217 
fûío
(
FILE
 *);

224 #if 
deföed
(
__EXTENSIONS__
Ë|| deföed(
_REENTRANT
) || \

225 (
	g_POSIX_C_SOURCE
 - 0 >= 199506L)

226 
Êockfûe
(
FILE
 *);

227 
·rylockfûe
(
FILE
 *);

228 
fu∆ockfûe
(
FILE
 *);

229 
gëc_u∆ocked
(
FILE
 *);

230 
gëch¨_u∆ocked
();

231 
putc_u∆ocked
(, 
FILE
 *);

232 
putch¨_u∆ocked
();

239 #i‡
deföed
(
__EXTENSIONS__
Ë|| 
__STDC__
 =0 || deföed(
_XOPEN_SOURCE
)

241 
FILE
 *
p›í
(const *, const *);

242 *
cu£rid
(*);

243 *
ãm≤am
(const *, const *);

244 
gë›t
(, *const *, const *);

245 #i‡!
deföed
(
_XOPEN_SOURCE
)

246 
gësub›t
(**, *const *, **);

248 *
›èrg
;

249 
›töd
, 
›ãº
, 
›t›t
;

250 
gëw
(
FILE
 *);

251 
putw
(, 
FILE
 *);

252 
p˛o£
(
FILE
 *);

258  
	#_bu„nd
(
p
) ((
	`fûío
’Ë< 
_NFILE
Ë? 
_bu„ndèb
[’)->
_fûe
] : \

259 (*)
	`_ªÆbu„nd
(
p
))

	)
260  
	#_bufsiz
(
p
) (
	`_bu„nd
’Ë- (p)->
_ba£
)

	)
262 
ªmove
();

263 
ª«me
();

264 
FILE
 *
tmpfûe
();

265 *
tm≤am
();

266 #if 
deföed
(
__EXTENSIONS__
Ë|| deföed(
_REENTRANT
)

267 *
tm≤am_r
();

269 
f˛o£
();

270 
fÊush
();

271 
FILE
 *
f›í
();

272 
FILE
 *
‰e›í
();

273 
£tbuf
();

274 
£tvbuf
();

275 
Ârötf
();

276 
fsˇnf
();

277 
¥ötf
();

278 
sˇnf
();

279 
•rötf
();

280 
ssˇnf
();

281 
vÂrötf
();

282 
v¥ötf
();

283 
v•rötf
();

284 
fgëc
();

285 *
fgës
();

286 
Âutc
();

287 
Âuts
();

288 
gëc
();

289 
gëch¨
();

290 *
gës
();

291 
putc
();

292 
putch¨
();

293 
puts
();

294 
ungëc
();

295 
size_t
 
‰ód
();

296 
size_t
 
fwrôe
();

297 
fgëpos
();

298 
f£ek
();

299 
f£ços
();

300 
·ñl
();

301 
ªwöd
();

302 
˛óªº
();

303 
„of
();

304 
„º‹
();

305 
≥º‹
();

307 
_fûbuf
();

308 
_Êsbuf
();

310 
FILE
 *
fd›í
();

311 *
˘îmid
();

312 
fûío
();

314 #if 
deföed
(
__EXTENSIONS__
Ë|| deföed(
_REENTRANT
) || \

315 (
	g_POSIX_C_SOURCE
 - 0 >= 199506L)

316 
Êockfûe
();

317 
·rylockfûe
();

318 
fu∆ockfûe
();

319 
gëc_u∆ocked
();

320 
gëch¨_u∆ocked
();

321 
putc_u∆ocked
();

322 
putch¨_u∆ocked
();

325 
FILE
 *
p›í
();

326 *
cu£rid
();

327 *
ãm≤am
();

328 
gë›t
();

329 #i‡!
deföed
(
_XOPEN_SOURCE
)

330 
gësub›t
();

332 *
›èrg
;

333 
›töd
, 
›ãº
, 
›t›t
;

334 
gëw
();

335 
putw
();

336 
p˛o£
();

348 #i‡!
deföed
(
löt
Ë&& !deföed(
__löt
)

350 #i‚def 
_REENTRANT


351 #ifdef 
__STDC__


352  
	#gëc
(
p
) (--’)->
_˙t
 < 0 ? 
	`__fûbuf
’Ë: ()*’)->
_±r
++)

	)
353  
	#putc
(
x
, 
p
) (--’)->
_˙t
 < 0 ? 
	`__Êsbuf
(() (x), (p)) \

354 : ()(*(
p
)->
_±r
++ = (
x
)))

	)
356  
	#gëc
(
p
) (--’)->
_˙t
 < 0 ? 
	`_fûbuf
’Ë: (Ë*’)->
_±r
++)

	)
357  
	#putc
(
x
, 
p
) (--’)->
_˙t
 < 0 ? \

358 
	`_Êsbuf
((Ë(
x
), (
p
)) : \

359 (Ë(*(
p
)->
_±r
++ = (Ë(
x
)))

	)
361  
	#gëch¨
() 
	`gëc
(
°dö
)

	)
362  
	#putch¨
(
x
) 
	`putc
((x), 
°dout
)

	)
363  
	#˛óªº
(
p
) (()(’)->
_Êag
 &~(
_IOERR
 | 
_IOEOF
)))

	)
364  
	#„of
(
p
) (’)->
_Êag
 & 
_IOEOF
)

	)
365  
	#„º‹
(
p
) (’)->
_Êag
 & 
_IOERR
)

	)
368 #i‡
deföed
(
__EXTENSIONS__
Ë|| (
__STDC__
 -0 == 0) || \

369 
deföed
(
_POSIX_C_SOURCE
Ë|| deföed(
_XOPEN_SOURCE
)

370  
	#fûío
(
p
) (’)->
_fûe
)

	)
373 #if 
deföed
(
__EXTENSIONS__
Ë|| deföed(
_REENTRANT
) || \

374 (
	g_POSIX_C_SOURCE
 - 0 >= 199506L)

375 #ifdef 
__STDC__


376  
	#gëc_u∆ocked
(
p
) (--’)->
_˙t
 < 0 \

377 ? 
	`__fûbuf
(
p
) \

378 : ()*(
p
)->
_±r
++)

	)
379  
	#putc_u∆ocked
(
x
, 
p
) (--’)->
_˙t
 < 0 \

380 ? 
	`__Êsbuf
((Ë(
x
), (
p
)) \

381 : ()(*(
p
)->
_±r
++ = (
x
)))

	)
383  
	#gëc_u∆ocked
(
p
) (--’)->
_˙t
 < 0 \

384 ? 
	`_fûbuf
(
p
) \

385 : ()*(
p
)->
_±r
++)

	)
386  
	#putc_u∆ocked
(
x
, 
p
) (--’)->
_˙t
 < 0 \

387 ? 
	`_Êsbuf
((Ë(
x
), (
p
)) \

388 : ()(*(
p
)->
_±r
++ = (
x
)))

	)
390  
	#gëch¨_u∆ocked
() 
	`gëc_u∆ocked
(
°dö
)

	)
391  
	#putch¨_u∆ocked
(
x
) 
	`putc_u∆ocked
((x), 
°dout
)

	)
396 #ifdef 
__˝lu•lus


	@/usr/include/stdlib.h

8 #i‚de‡
_STDLIB_H


9  
	#_STDLIB_H


	)
11 #¥agm®
idít
 "@(#)stdlib.h 1.27 95/08/28 SMI"

13 
	~<sys/„©uª_ã°s.h
>

15 #i‡
deföed
(
__EXTENSIONS__
) || \

16 (
deföed
(
_XOPEN_SOURCE
Ë&& (
	g_XOPEN_VERSION
 - 0 == 4))

17 
	~<sys/waô.h
>

20 #ifdef 
__˝lu•lus


24 
	s
{

25 
quŸ
;

26 
ªm
;

27 } 
	tdiv_t
;

29 
	s
{

30 
quŸ
;

31 
ªm
;

32 } 
	tldiv_t
;

34 #i‡
__STDC__
 - 0 =0 && !
deföed
(
_NO_LONGLONG
)

35 
	s
{

36 
quŸ
;

37 
ªm
;

38 } 
	tŒdiv_t
;

41 #i‚de‡
_SIZE_T


42  
	#_SIZE_T


	)
43 
	tsize_t
;

46 #i‚de‡
_UID_T


47  
	#_UID_T


	)
48 
	tuid_t
;

51 #i‚de‡
NULL


52  
	#NULL
 0

	)
55  
	#EXIT_FAILURE
 1

	)
56  
	#EXIT_SUCCESS
 0

	)
57  
	#RAND_MAX
 32767

	)
59 #i‚de‡
_WCHAR_T


60  
	#_WCHAR_T


	)
61 
	twch¨_t
;

64 #i‡
deföed
(
__STDC__
)

66 
__˘y≥
[];

68  
	#MB_CUR_MAX
 
__˘y≥
[520]

	)
70 
©of
(const *);

71 
©oi
(const *);

72 
©ﬁ
(const *);

73 
°πod
(const *, **);

74 
°πﬁ
(const *, **, );

75 
°πoul
(const *, **, );

77 
ønd
();

78 
§™d
();

79 #if 
deföed
(
__EXTENSIONS__
Ë|| deföed(
_REENTRANT
) || \

80 (
	g_POSIX_C_SOURCE
 - 0 >= 199506L)

81 
ønd_r
(*);

84 *
ˇŒoc
(
size_t
, size_t);

85 
‰ì
(*);

86 *
mÆloc
(
size_t
);

87 *
ªÆloc
(*, 
size_t
);

89 
ab‹t
();

90 
©exô
((*)());

91 
exô
();

92 *
gëív
(const *);

93 
sy°em
(const *);

95 *
b£¨ch
(c⁄° *, c⁄° *, 
size_t
, size_t,

97 
qs‹t
(*, 
size_t
, size_t,

100 
abs
();

101 
div_t
 
div
(, );

102 
œbs
();

103 
ldiv_t
 
ldiv
(, );

105 
mbtowc
(
wch¨_t
 *, c⁄° *, 
size_t
);

106 
mbÀn
(c⁄° *, 
size_t
);

107 
w˘omb
(*, 
wch¨_t
);

109 
size_t
 
mb°owcs
(
wch¨_t
 *, const *, size_t);

110 
size_t
 
wc°ombs
(*, c⁄° 
wch¨_t
 *, size_t);

112 #i‡
deföed
(
__EXTENSIONS__
) || \

113 (
	g__STDC__
 =0 && !
deföed
(
_POSIX_C_SOURCE
)) || \

114 (
deföed
(
_XOPEN_SOURCE
Ë&& (
_XOPEN_VERSION
 - 0 == 4))

116 
dønd48
();

117 
î™d48
(*);

118 
jønd48
(*);

119 
lc⁄g48
(*);

120 
Ã™d48
();

121 
mønd48
();

122 
ƒ™d48
(*);

123 *
£ed48
(*);

124 
§™d48
();

125 
puãnv
(const *);

126 
£tkey
(const *);

130 #i‡(
deföed
(
__EXTENSIONS__
) || \

131 (
	g__STDC__
 =0 && !
deföed
(
_POSIX_C_SOURCE
))) && \

132 (
_XOPEN_VERSION
 - 0 < 4)

133 
swab
(const *, *, );

136 #i‡
deföed
(
__EXTENSIONS__
) || \

137 (
	g__STDC__
 =0 && !
deföed
(
_POSIX_C_SOURCE
Ë&& !deföed(
_XOPEN_SOURCE
))

139 
a64l
(const *);

140 
dup2
(, );

141 *
ecvt
(, , *, *);

142 *
fcvt
(, , *, *);

143 *
qecvt
(, , *, *);

144 *
qfcvt
(, , *, *);

145 *
qgcvt
(, , *);

146 *
gëcwd
(*, 
size_t
);

147 *
gëlogö
();

148 
gë›t
(, *const *, const *);

149 
gësub›t
(**, *const *, **);

150 *
›èrg
;

151 
›töd
, 
›ãº
, 
›t›t
;

152 *
gë∑ss
(const *);

153 
gëpw
(
uid_t
, *);

154 *
gcvt
(, , *);

155 
ißây
();

156 *
l64a
();

157 *
memÆign
(
size_t
, size_t);

158 *
mkãmp
(*);

159 *
ªÆ∑th
(*, *);

160 *
ây«me
();

161 
ây¶Ÿ
();

162 *
vÆloc
(
size_t
);

163 *
±¢ame
();

164 
gø¡±
();

165 
u∆ock±
();

167 #i‡
__STDC__
 - 0 =0 && !
deföed
(
_NO_LONGLONG
)

168 
©ﬁl
(const *);

169 
Œabs
();

170 
Œdiv_t
 
Œdiv
(, );

171 *
Œto°r
(, *);

172 
°πﬁl
(const *, **, );

173 
°πouŒ
(const *, **, );

174 *
uŒto°r
(, *);

181 
_˘y≥
[];

183  
	#MB_CUR_MAX
 
_˘y≥
[520]

	)
185 
©of
();

186 
©oi
();

187 
©ﬁ
();

188 
°πod
();

189 
°πﬁ
();

190 
°πoul
();

192 
ønd
();

193 
§™d
();

194 #if 
deföed
(
__EXTENSIONS__
Ë|| deföed(
_REENTRANT
) || \

195 (
	g_POSIX_C_SOURCE
 - 0 >= 199506L)

196 
ønd_r
();

199 *
ˇŒoc
();

200 
‰ì
();

201 *
mÆloc
();

202 *
ªÆloc
();

204 
ab‹t
();

205 
©exô
();

206 
exô
();

207 *
gëív
();

208 
sy°em
();

210 *
b£¨ch
();

211 
qs‹t
();

213 
abs
();

214 
div_t
 
div
();

215 
œbs
();

216 
ldiv_t
 
ldiv
();

218 
mbtowc
();

219 
mbÀn
();

220 
w˘omb
();

222 
size_t
 
mb°owcs
();

223 
size_t
 
wc°ombs
();

225 
a64l
();

226 
dup2
();

227 *
ecvt
();

228 *
fcvt
();

229 *
qecvt
();

230 *
qfcvt
();

231 *
qgcvt
();

232 *
gëcwd
();

233 *
gëlogö
();

234 
gë›t
();

235 
gësub›t
();

236 *
›èrg
;

237 
›töd
, 
›ãº
, 
›t›t
;

238 *
gë∑ss
();

239 
gëpw
();

240 *
gcvt
();

241 
ißây
();

242 *
l64a
();

243 *
memÆign
();

244 *
mkãmp
();

245 
puãnv
();

246 *
ªÆ∑th
();

247 
£tkey
();

248 
swab
();

249 *
ây«me
();

250 
ây¶Ÿ
();

251 *
vÆloc
();

252 *
±¢ame
();

253 
gø¡±
();

254 
u∆ock±
();

256 
dønd48
();

257 
î™d48
();

258 
jønd48
();

259 
lc⁄g48
();

260 
Ã™d48
();

261 
mønd48
();

262 
ƒ™d48
();

263 *
£ed48
();

264 
§™d48
();

266 #i‡!
deföed
(
_NO_LONGLONG
)

267 
©ﬁl
();

268 
Œabs
();

269 
Œdiv_t
 
Œdiv
();

270 *
Œto°r
();

271 
°πﬁl
();

272 
°πouŒ
();

273 *
uŒto°r
();

278 #ifdef 
__˝lu•lus


	@/usr/include/string.h

8 #i‚de‡
_STRING_H


9  
	#_STRING_H


	)
11 #¥agm®
idít
 "@(#)string.h 1.17 95/08/28 SMI"

13 
	~<sys/„©uª_ã°s.h
>

15 #ifdef 
__˝lu•lus


19 #i‚de‡
_SIZE_T


20  
	#_SIZE_T


	)
21 
	tsize_t
;

24 #i‚de‡
NULL


25  
	#NULL
 0

	)
28 #i‡
deföed
(
__STDC__
)

30 *
mem˝y
(*, c⁄° *, 
size_t
);

31 *
memmove
(*, c⁄° *, 
size_t
);

32 *
°r˝y
(*, const *);

33 *
°∫˝y
(*, c⁄° *, 
size_t
);

35 *
°rˇt
(*, const *);

36 *
°∫ˇt
(*, c⁄° *, 
size_t
);

38 
memcmp
(c⁄° *, c⁄° *, 
size_t
);

39 
°rcmp
(const *, const *);

40 
°rcﬁl
(const *, const *);

41 
°∫cmp
(c⁄° *, c⁄° *, 
size_t
);

42 
size_t
 
°rx‰m
(*, const *, size_t);

44 *
memchr
(c⁄° *, , 
size_t
);

45 *
°rchr
(const *, );

46 
size_t
 
°rc•n
(const *, const *);

47 *
°Ωbrk
(const *, const *);

48 *
°ºchr
(const *, );

49 
size_t
 
°r•n
(const *, const *);

50 *
°r°r
(const *, const *);

51 *
°πok
(*, const *);

52 #if 
deföed
(
__EXTENSIONS__
Ë|| deföed(
_REENTRANT
) || \

53 (
	g_POSIX_C_SOURCE
 - 0 >= 199506L)

54 *
°πok_r
(*, const *, **);

56 *
mem£t
(*, , 
size_t
);

57 *
°ªº‹
();

58 
size_t
 
°æí
(const *);

60 #i‡
deföed
(
__EXTENSIONS__
Ë|| 
__STDC__
 == 0 || \

61 
deföed
(
_POSIX_C_SOURCE
Ë|| 
	$deföed
(
_XOPEN_SOURCE
)

63 *
	`memc˝y
(*, c⁄° *, , 
size_t
);

67 #i‡
	`deföed
(
__EXTENSIONS__
Ë|| (
__STDC__
 == 0 && \

68 !
	`deföed
(
_POSIX_C_SOURCE
Ë&& !
	$deföed
(
_XOPEN_SOURCE
))

70 *
	`°rdup
(const *);

71 *
	`°rsig«l
();

72 
	`ffs
(const );

73 
	`°rˇ£cmp
(const *, const *);

74 
	`°∫ˇ£cmp
(c⁄° *, c⁄° *, 
size_t
);

81 *
	`°r˝y
(),

82 *
	`°∫˝y
(),

83 *
	`°rˇt
(),

84 *
	`°∫ˇt
(),

85 *
	`°rchr
(),

86 *
	`°ºchr
(),

87 *
	`°Ωbrk
(),

88 *
	`°πok
(),

89 #if 
	`deföed
(
__EXTENSIONS__
Ë|| deföed(
_REENTRANT
) || \

90 (
_POSIX_C_SOURCE
 - 0 >= 199506L)

91 *
	`°πok_r
(),

93 *
	`°r°r
();

95 
	`°rcmp
(),

96 
	`°∫cmp
();

97 
size_t


98 
	`°æí
(),

99 
	`°r•n
(),

100 
	`°rc•n
();

102 *
	`memc˝y
(),

103 *
	`memchr
(),

104 *
	`mem˝y
(),

105 *
	`memmove
(),

106 *
	`mem£t
();

107 
	`memcmp
();

109 #i‡!
	`deföed
(
_POSIX_C_SOURCE
Ë&& !deföed(
_XOPEN_SOURCE
)

111 *
	`°rdup
(),

112 *
	`°rsig«l
();

114 
	`ffs
(),

115 
	`°rˇ£cmp
(),

116 
	`°∫ˇ£cmp
();

121 #ifdef 
__˝lu•lus


122 
	}
}

	@/usr/include/sys/time.h

19 #i‚de‡
_SYS_TIME_H


20  
	#_SYS_TIME_H


	)
22 #¥agm®
idít
 "@(#)time.h 2.47 95/08/24 SMI"

24 
	~<sys/„©uª_ã°s.h
>

31 #ifdef 
__˝lu•lus


35 #i‡(!
deföed
(
_POSIX_C_SOURCE
Ë&& !deföed(
_XOPEN_SOURCE
)) || \

36 
	$deföed
(
__EXTENSIONS__
)

37 #i‚def 
_ASM


39 
	stimevÆ
 {

40 
tv_£c
;

41 
tv_u£c
;

44 
	stimez⁄e
 {

45 
tz_möuãswe°
;

46 
tz_d°time
;

52 #ifdef 
__˝lu•lus


53 
	}
}

60 #i‚def 
_ASM


61 
	~<sys/ty≥s.h
>

64 #ifdef 
__˝lu•lus


68 #i‡(!
deföed
(
_POSIX_C_SOURCE
Ë&& !deföed(
_XOPEN_SOURCE
)) || \

69 
	$deföed
(
__EXTENSIONS__
)

71  
	#DST_NONE
 0

	)
72  
	#DST_USA
 1

	)
73  
	#DST_AUST
 2

	)
74  
	#DST_WET
 3

	)
75  
	#DST_MET
 4

	)
76  
	#DST_EET
 5

	)
77  
	#DST_CAN
 6

	)
78  
	#DST_GB
 7

	)
79  
	#DST_RUM
 8

	)
80  
	#DST_TUR
 9

	)
81  
	#DST_AUSTALT
 10

	)
88  
	#timîis£t
(
tvp
) (—vp)->
tv_£c
 || (tvp)->
tv_u£c
)

	)
89  
	#timîcmp
(
tvp
, 
uvp
, 
cmp
) \

91 ((
tvp
)->
tv_£c
 
	`cmp
 (
uvp
)->tv_sec || \

92 ((
tvp
)->
tv_£c
 =(
uvp
)->tv_sec && \

94 (
tvp
)->
tv_u£c
 
	`cmp
 (
uvp
)->tv_u£c))

	)
96  
	#timî˛ór
(
tvp
) (tvp)->
tv_£c
 = (tvp)->
tv_u£c
 = 0

	)
102  
	#ITIMER_REAL
 0

	)
103  
	#ITIMER_VIRTUAL
 1

	)
104  
	#ITIMER_PROF
 2

	)
105  
	#ITIMER_REALPROF
 3

	)
107 #i‚def 
_ASM


108 
	sôimîvÆ
 {

109 
timevÆ
 
ô_öãrvÆ
;

110 
timevÆ
 
ô_vÆue
;

118  
	#SEC
 1

	)
119  
	#MILLISEC
 1000

	)
120  
	#MICROSEC
 1000000

	)
121  
	#NANOSEC
 1000000000

	)
125 #i‡!
	`deföed
(
_POSIX_C_SOURCE
Ë&& !deföed(
_XOPEN_SOURCE
) || \

126 (
_POSIX_C_SOURCE
 > 2Ë|| 
	$deföed
(
__EXTENSIONS__
)

128  
	#__CLOCK_REALTIME0
 0

	)
129  
	#CLOCK_VIRTUAL
 1

	)
130  
	#CLOCK_PROF
 2

	)
131  
	#__CLOCK_REALTIME3
 3

	)
137 #if (
_POSIX_C_SOURCE
 >199506LË|| 
	`deföed
(
_POSIX_PER_PROCESS_TIMER_SOURCE
)

138  
	#CLOCK_REALTIME
 
__CLOCK_REALTIME3


	)
140  
	#CLOCK_REALTIME
 
__CLOCK_REALTIME0


	)
143  
	#TIMER_RELTIME
 0x0

	)
144  
	#TIMER_ABSTIME
 0x1

	)
148 #i‚def 
_ASM


155 #i‡(!
	`deföed
(
_POSIX_C_SOURCE
Ë&& !deföed(
_XOPEN_SOURCE
)) || \

156 (
_POSIX_C_SOURCE
 > 2Ë|| 
	`deföed
(
__EXTENSIONS__
)

157 
	stime•ec
 {

158 
time_t
 
tv_£c
;

159 
tv_n£c
;

160 } 
	ttime•ec_t
;

162 
time•ec
 
	ttime°ruc_t
;

166 
	s_time•ec
 {

167 
time_t
 
_tv_£c
;

168 
_tv_n£c
;

169 } 
	ttime•ec_t
;

171 
_time•ec
 
	ttime°ruc_t
;

179 #i‡(!
	`deföed
(
_POSIX_C_SOURCE
Ë&& !deföed(
_XOPEN_SOURCE
)) || \

180 
	`deföed
(
__EXTENSIONS__
)

181  
	#time°ruc
 
time•ec


	)
187 #i‡(!
	`deföed
(
_POSIX_C_SOURCE
Ë&& !deföed(
_XOPEN_SOURCE
)) || \

188 (
_POSIX_C_SOURCE
 > 2Ë|| 
	`deföed
(
__EXTENSIONS__
)

189 
	sôimî•ec
 {

190 
time•ec
 
ô_öãrvÆ
;

191 
time•ec
 
ô_vÆue
;

192 } 
	tôimî•ec_t
;

198 
l⁄gl⁄g_t
 
	thπime_t
;

200 #ifde‡
_KERNEL


202 
	~<sys/muãx.h
>

204 
u£c_≥r_tick
;

205 
n£c_≥r_tick
;

207 
	stodöfo
 {

208 
tod_£c
;

209 
tod_mö
;

210 
tod_hour
;

211 
tod_dow
;

212 
tod_day
;

213 
tod_m⁄th
;

214 
tod_yór
;

215 } 
	ttodöfo_t
;

217 
time°ruc_t
 
hª°ime
;

218 
l⁄gl⁄g_t
 
timedñè
;

219 
tod_√edsync
;

220 
kmuãx_t
 
tod_lock
;

222 
time°ruc_t
 
	`tod_gë
();

223 
	`tod_£t
(
time°ruc_t
);

224 
todöfo_t
 
	`utc_to_tod
(
time_t
);

225 
time_t
 
	`tod_to_utc
(
todöfo_t
);

226 
hπime_t
 
	`gëhπime
();

227 
	`gëhª°ime
(
time•ec_t
 *);

228 
	`hπ2ts
(
hπime_t
, 
time°ruc_t
 *);

229 
hπime_t
 
	`ts2hπ
(
time°ruc_t
 *);

230 
	`ôimîfix
(
timevÆ
 *);

231 
	`ôimîde¸
(
ôimîvÆ
 *, );

232 
	`timevÆadd
(
timevÆ
 *, timeval *);

233 
	`timevÆsub
(
timevÆ
 *, timeval *);

234 
	`timevÆfix
(
timevÆ
 *);

238 #i‡(!
	`deföed
(
_KERNEL
Ë&& !deföed(
_POSIX_C_SOURCE
) && \

239 !
	`deföed
(
_XOPEN_SOURCE
)Ë|| deföed(
__EXTENSIONS__
)

240 #i‡
	`deföed
(
__STDC__
)

241 
	`adjtime
(
timevÆ
 *, timeval *);

242 
	`gëôimî
(, 
ôimîvÆ
 *);

243 
	`£tôimî
(, c⁄° 
ôimîvÆ
 *, itimerval *);

259 #i‡
	`deföed
(
_SVID_GETTOD
)

260 
	`gëtimeofday
(
timevÆ
 *);

261 
	`£âimeofday
(
timevÆ
 *);

263 
	`gëtimeofday
(
timevÆ
 *, *);

264 
	`£âimeofday
(
timevÆ
 *, *);

267 
hπime_t
 
	`gëhπime
();

268 
hπime_t
 
	`gëhrvtime
();

270 
	`adjtime
();

271 
	`gëôimî
();

272 
	`£tôimî
();

273 
	`gëtimeofday
();

274 
	`£âimeofday
();

276 
hπime_t
 
	`gëhπime
();

277 
hπime_t
 
	`gëhrvtime
();

279 #i‡!
	`deföed
(
_XOPEN_SOURCE
)

280 
	~<time.h
>

286 #ifdef 
__˝lu•lus


287 
	}
}

	@/usr/include/sys/types.h

8 #i‚de‡
_SYS_TYPES_H


9  
	#_SYS_TYPES_H


	)
11 #¥agm®
idít
 "@(#)types.h 1.38 95/11/14 SMI"

13 
	~<sys/„©uª_ã°s.h
>

14 
	~<sys/iß_defs.h
>

19 
	~<sys/machty≥s.h
>

21 #ifdef 
__˝lu•lus


27 
	tuch¨_t
;

28 
	tush‹t_t
;

29 
	tuöt_t
;

30 
	tul⁄g_t
;

32 * 
	tˇddr_t
;

33 
	tdaddr_t
;

34 
	toff_t
;

35 
	t˙t_t
;

37 
ul⁄g_t
 
	t∑ddr_t
;

38 
uch¨_t
 
	tu£_t
;

39 
	tsysid_t
;

40 
	tödex_t
;

42 #i‡
deföed
(
_POSIX_C_SOURCE
Ë|| deföed(
_XOPEN_SOURCE
)

43 
	e
{ 
_B_FALSE
, 
_B_TRUE
 } 
	tboﬁón_t
;

45 
	e
{ 
B_FALSE
, 
B_TRUE
 } 
	tboﬁón_t
;

53 #i‡
__STDC__
 - 0 =0 && !
deföed
(
_NO_LONGLONG
)

54 
	tl⁄gl⁄g_t
;

55 
	tu_l⁄gl⁄g_t
;

58 
	u
{

59 
_d
;

60 
_l
[2];

61 } 
	tl⁄gl⁄g_t
;

62 
	u
{

63 
_d
;

64 
_l
[2];

65 } 
	tu_l⁄gl⁄g_t
;

68 #ifde‡ 
_LARGEFILE64_SOURCE


69 
l⁄gl⁄g_t
 
	toff64_t
;

71 
l⁄gl⁄g_t
 
	toff£t_t
;

72 
l⁄gl⁄g_t
 
	tdiskaddr_t
;

80 #ifde‡
_LONG_LONG_LTOH


81 
	u
{

82 
off£t_t
 
_f
;

83 
	s
{

84 
off_t
 
_l
;

85 
_u
;

86 } 
_p
;

87 } 
	tŒoff_t
;

90 #ifde‡
_LONG_LONG_HTOL


91 
	u
{

92 
off£t_t
 
_f
;

93 
	s
{

94 
_u
;

95 
off_t
 
_l
;

96 } 
_p
;

97 } 
	tŒoff_t
;

100 #ifde‡
_LONG_LONG_LTOH


101 
	u
{

102 
diskaddr_t
 
_f
;

103 
	s
{

104 
daddr_t
 
_l
;

105 
_u
;

106 } 
_p
;

107 } 
	tŒdaddr_t
;

110 #ifde‡
_LONG_LONG_HTOL


111 
	u
{

112 
diskaddr_t
 
_f
;

113 
	s
{

114 
_u
;

115 
daddr_t
 
_l
;

116 } 
_p
;

117 } 
	tŒdaddr_t
;

120 
ul⁄g_t
 
	tk_Êt£t_t
;

130 
	tid_t
;

139 
ul⁄g_t
 
	tmaj‹_t
;

140 
ul⁄g_t
 
	tmö‹_t
;

145 
	t¥i_t
;

158 
ush‹t_t
 
	to_mode_t
;

159 
	to_dev_t
;

160 
ush‹t_t
 
	to_uid_t
;

161 
o_uid_t
 
	to_gid_t
;

162 
	to_∆ök_t
;

163 
	to_pid_t
;

164 
ush‹t_t
 
	to_öo_t
;

169 
	tkey_t
;

170 
ul⁄g_t
 
	tmode_t
;

172 #i‚def 
_UID_T


173  
	#_UID_T


	)
174 
	tuid_t
;

177 
uid_t
 
	tgid_t
;

178 
ul⁄g_t
 
	t∆ök_t
;

179 
ul⁄g_t
 
	tdev_t
;

180 
ul⁄g_t
 
	töo_t
;

181 
	tpid_t
;

183 #i‚de‡
_SIZE_T


184  
	#_SIZE_T


	)
185 
uöt_t
 
	tsize_t
;

188 #i‚de‡
_SSIZE_T


189  
	#_SSIZE_T


	)
190 
	tssize_t
;

194 #i‚de‡
_TIME_T


195  
	#_TIME_T


	)
196 
	ttime_t
;

199 #i‚de‡
_CLOCK_T


200  
	#_CLOCK_T


	)
201 
	t˛ock_t
;

204 #i‚de‡
_CLOCKID_T


205  
	#_CLOCKID_T


	)
206 
	t˛ockid_t
;

209 #i‚de‡
_TIMER_T


210  
	#_TIMER_T


	)
211 
	ttimî_t
;

214 #i‡
deföed
(
__EXTENSIONS__
Ë|| deföed(
_KERNEL
) || \

215 (!
deföed
(
_POSIX_C_SOURCE
Ë&& !deföed(
_XOPEN_SOURCE
))

217 
	tunch¨
;

218 
	tush‹t
;

219 
	tuöt
;

220 
	tul⁄g
;

222 #i‡
deföed
(
_KERNEL
)

224  
	#SHRT_MIN
 -32768

	)
225  
	#SHRT_MAX
 32767

	)
226  
	#USHRT_MAX
 ((
u_sh‹t
)65535Ë

	)
227  
	#INT_MIN
 (-2147483647-1Ë

	)
228  
	#INT_MAX
 2147483647

	)
229  
	#UINT_MAX
 ((
u_öt
)4294967295Ë

	)
230  
	#LONG_MIN
 (-2147483647-1)

	)
231  
	#LONG_MAX
 2147483647

	)
232  
	#ULONG_MAX
 ((
u_l⁄g
)4294967295Ë

	)
237  
	#P_MYPID
 ((
pid_t
)0)

	)
245  
	#P_MYID
 (-1)

	)
246  
	#NOPID
 (
pid_t
)(-1)

	)
248 #i‚de‡
NODEV


249  
	#NODEV
 (
dev_t
)(-1)

	)
257 
	tho°id_t
;

265  
	#P_MYHOSTID
 ((
ho°id_t
)-1)

	)
267 
	tu_ch¨
;

268 
	tu_sh‹t
;

269 
	tu_öt
;

270 
	tu_l⁄g
;

271 
	s_quad
 { 
vÆ
[2]; } 
	tquad
;

278 
	~<sys/£À˘.h
>

296  
	#_VOID
 

	)
298 #ifdef 
__˝lu•lus


	@/usr/include/floatingpoint.h

8 #i‚de‡
_FLOATINGPOINT_H


9  
	#_FLOATINGPOINT_H


	)
11 #ifde‡ 
__˝lu•lus


15 #¥agm®
idít
 "@(#)floatingpoint.h 2.4 94/06/09"

32 #ifde‡
__STDC__


33 
	~<°dio.h
>

35 
	~<sys/õìÂ.h
>

37 #ifde‡
__STDC__


38  
	#__P
(
p
) 
	)
p

40  
	#__P
(
p
) ()

	)
43  
	#N_IEEE_EXCEPTION
 5

	)
45 
	tsigÂe_code_ty≥
;

47 (*
sigÂe_h™dÀr_ty≥
)();

49  
	#SIGFPE_DEFAULT
 ((*)())0

	)
50  
	#SIGFPE_IGNORE
 ((*)())1

	)
51  
	#SIGFPE_ABORT
 ((*)())2

	)
53 
sigÂe_h™dÀr_ty≥
 
sigÂe
 
__P
((
sigÂe_code_ty≥
, sigfpe_handler_type));

58 
	tsögÀ
;

60 #i‚de‡
_EXTENDED


61  
	#_EXTENDED


	)
62 
	texãnded
[3];

65 
	tquadru∂e
;

67 
	tÂ_ex˚±i⁄_fõld_ty≥
;

75  
	#DECIMAL_STRING_LENGTH
 512

	)
77 
	tdecimÆ_°rög
[
DECIMAL_STRING_LENGTH
];

80 
	s
{

81 
Â_˛ass_ty≥
 
	gÂ˛ass
;

82 
	gsign
;

83 
	gexp⁄ít
;

84 
decimÆ_°rög
 
	gds
;

87 
	gm‹e
;

90 
	gndigôs
;

93 } 
	tdecimÆ_ªc‹d
;

95 
	edecimÆ_f‹m
 {

96 
	gfixed_f‹m
,

99 
	gÊﬂtög_f‹m


103 
	s
{

104 
Â_dúe˘i⁄_ty≥
 
	grd
;

106 
decimÆ_f‹m
 
	gdf
;

108 
	gndigôs
;

109 } 
	tdecimÆ_mode
;

111 
	edecimÆ_°rög_f‹m
 {

112 
	gövÆid_f‹m
,

113 
	gwhôe•a˚_f‹m
,

114 
	gfixed_öt_f‹m
,

115 
	gfixed_ötdŸ_f‹m
,

116 
	gfixed_dŸ‰ac_f‹m
,

117 
	gfixed_ötdŸ‰ac_f‹m
,

118 
	gÊﬂtög_öt_f‹m
,

119 
	gÊﬂtög_ötdŸ_f‹m
,

120 
	gÊﬂtög_dŸ‰ac_f‹m
,

121 
	gÊﬂtög_ötdŸ‰ac_f‹m
,

122 
	göf_f‹m
,

123 
	göföôy_f‹m
,

124 
	g«n_f‹m
,

125 
	g«n°rög_f‹m


128 
sögÀ_to_decimÆ
 
__P
((
sögÀ
 *, 
decimÆ_mode
 *, 
decimÆ_ªc‹d
 *,

129 
Â_ex˚±i⁄_fõld_ty≥
 *));

130 
doubÀ_to_decimÆ
 
__P
((*, 
decimÆ_mode
 *, 
decimÆ_ªc‹d
 *,

131 
Â_ex˚±i⁄_fõld_ty≥
 *));

132 
exãnded_to_decimÆ
 
__P
((
exãnded
 *, 
decimÆ_mode
 *,

133 
decimÆ_ªc‹d
 *, 
Â_ex˚±i⁄_fõld_ty≥
 *));

134 
quadru∂e_to_decimÆ
 
__P
((
quadru∂e
 *, 
decimÆ_mode
 *,

135 
decimÆ_ªc‹d
 *, 
Â_ex˚±i⁄_fõld_ty≥
 *));

137 
decimÆ_to_sögÀ
 
__P
((
sögÀ
 *, 
decimÆ_mode
 *, 
decimÆ_ªc‹d
 *,

138 
Â_ex˚±i⁄_fõld_ty≥
 *));

139 
decimÆ_to_doubÀ
 
__P
((*, 
decimÆ_mode
 *, 
decimÆ_ªc‹d
 *,

140 
Â_ex˚±i⁄_fõld_ty≥
 *));

141 
decimÆ_to_exãnded
 
__P
((
exãnded
 *, 
decimÆ_mode
 *,

142 
decimÆ_ªc‹d
 *, 
Â_ex˚±i⁄_fõld_ty≥
 *));

143 
decimÆ_to_quadru∂e
 
__P
((
quadru∂e
 *, 
decimÆ_mode
 *,

144 
decimÆ_ªc‹d
 *, 
Â_ex˚±i⁄_fõld_ty≥
 *));

146 
°rög_to_decimÆ
 
__P
((**, , , 
decimÆ_ªc‹d
 *,

147 
decimÆ_°rög_f‹m
 *, **));

148 
func_to_decimÆ
 
__P
((**, , , 
decimÆ_ªc‹d
 *,

149 
decimÆ_°rög_f‹m
 *, **,

151 
fûe_to_decimÆ
 
__P
((**, , , 
decimÆ_ªc‹d
 *,

152 
decimÆ_°rög_f‹m
 *, **,

153 
FILE
 *, *));

155 *
£c⁄vît
 
__P
((
sögÀ
 *, , *, *, *));

156 *
sfc⁄vît
 
__P
((
sögÀ
 *, , *, *, *));

157 *
sgc⁄vît
 
__P
((
sögÀ
 *, , , *));

158 *
ec⁄vît
 
__P
((, , *, *, *));

159 *
fc⁄vît
 
__P
((, , *, *, *));

160 *
gc⁄vît
 
__P
((, , , *));

161 *
qec⁄vît
 
__P
((
quadru∂e
 *, , *, *, *));

162 *
qfc⁄vît
 
__P
((
quadru∂e
 *, , *, *, *));

163 *
qgc⁄vît
 
__P
((
quadru∂e
 *, , , *));

165 *
ecvt
 
__P
((, , *, *));

166 *
fcvt
 
__P
((, , *, *));

167 *
gcvt
 
__P
((, , *));

173 
©of
 
__P
((const *));

174 
°πod
 
__P
((const *, **));

176 #ifde‡ 
__˝lu•lus


	@/usr/include/sys/errno.h

8 #i‚de‡
_SYS_ERRNO_H


9  
	#_SYS_ERRNO_H


	)
11 #¥agm®
idít
 "@(#)errno.h 1.15 95/01/22 SMI"

34 #ifdef 
__˝lu•lus


42  
	#EPERM
 1

	)
43  
	#ENOENT
 2

	)
44  
	#ESRCH
 3

	)
45  
	#EINTR
 4

	)
46  
	#EIO
 5

	)
47  
	#ENXIO
 6

	)
48  
	#E2BIG
 7

	)
49  
	#ENOEXEC
 8

	)
50  
	#EBADF
 9

	)
51  
	#ECHILD
 10

	)
52  
	#EAGAIN
 11

	)
53  
	#ENOMEM
 12

	)
54  
	#EACCES
 13

	)
55  
	#EFAULT
 14

	)
56  
	#ENOTBLK
 15

	)
57  
	#EBUSY
 16

	)
58  
	#EEXIST
 17

	)
59  
	#EXDEV
 18

	)
60  
	#ENODEV
 19

	)
61  
	#ENOTDIR
 20

	)
62  
	#EISDIR
 21

	)
63  
	#EINVAL
 22

	)
64  
	#ENFILE
 23

	)
65  
	#EMFILE
 24

	)
66  
	#ENOTTY
 25

	)
67  
	#ETXTBSY
 26

	)
68  
	#EFBIG
 27

	)
69  
	#ENOSPC
 28

	)
70  
	#ESPIPE
 29

	)
71  
	#EROFS
 30

	)
72  
	#EMLINK
 31

	)
73  
	#EPIPE
 32

	)
74  
	#EDOM
 33

	)
75  
	#ERANGE
 34

	)
76  
	#ENOMSG
 35

	)
77  
	#EIDRM
 36

	)
78  
	#ECHRNG
 37

	)
79  
	#EL2NSYNC
 38

	)
80  
	#EL3HLT
 39

	)
81  
	#EL3RST
 40

	)
82  
	#ELNRNG
 41

	)
83  
	#EUNATCH
 42

	)
84  
	#ENOCSI
 43

	)
85  
	#EL2HLT
 44

	)
86  
	#EDEADLK
 45

	)
87  
	#ENOLCK
 46

	)
88  
	#ECANCELED
 47

	)
89  
	#ENOTSUP
 48

	)
92  
	#EDQUOT
 49

	)
95  
	#EBADE
 50

	)
96  
	#EBADR
 51

	)
97  
	#EXFULL
 52

	)
98  
	#ENOANO
 53

	)
99  
	#EBADRQC
 54

	)
100  
	#EBADSLT
 55

	)
101  
	#EDEADLOCK
 56

	)
103  
	#EBFONT
 57

	)
106  
	#ENOSTR
 60

	)
107  
	#ENODATA
 61

	)
108  
	#ETIME
 62

	)
109  
	#ENOSR
 63

	)
111  
	#ENONET
 64

	)
112  
	#ENOPKG
 65

	)
113  
	#EREMOTE
 66

	)
114  
	#ENOLINK
 67

	)
115  
	#EADV
 68

	)
116  
	#ESRMNT
 69

	)
118  
	#ECOMM
 70

	)
119  
	#EPROTO
 71

	)
120  
	#EMULTIHOP
 74

	)
121  
	#EBADMSG
 77

	)
122  
	#ENAMETOOLONG
 78

	)
123  
	#EOVERFLOW
 79

	)
124  
	#ENOTUNIQ
 80

	)
125  
	#EBADFD
 81

	)
126  
	#EREMCHG
 82

	)
129  
	#ELIBACC
 83

	)
130  
	#ELIBBAD
 84

	)
131  
	#ELIBSCN
 85

	)
132  
	#ELIBMAX
 86

	)
133  
	#ELIBEXEC
 87

	)
134  
	#EILSEQ
 88

	)
135  
	#ENOSYS
 89

	)
136  
	#ELOOP
 90

	)
137  
	#ERESTART
 91

	)
138  
	#ESTRPIPE
 92

	)
139  
	#ENOTEMPTY
 93

	)
140  
	#EUSERS
 94

	)
144  
	#ENOTSOCK
 95

	)
145  
	#EDESTADDRREQ
 96

	)
146  
	#EMSGSIZE
 97

	)
147  
	#EPROTOTYPE
 98

	)
148  
	#ENOPROTOOPT
 99

	)
149  
	#EPROTONOSUPPORT
 120

	)
150  
	#ESOCKTNOSUPPORT
 121

	)
151  
	#EOPNOTSUPP
 122

	)
152  
	#EPFNOSUPPORT
 123

	)
153  
	#EAFNOSUPPORT
 124

	)
155  
	#EADDRINUSE
 125

	)
156  
	#EADDRNOTAVAIL
 126

	)
158  
	#ENETDOWN
 127

	)
159  
	#ENETUNREACH
 128

	)
160  
	#ENETRESET
 129

	)
162  
	#ECONNABORTED
 130

	)
163  
	#ECONNRESET
 131

	)
164  
	#ENOBUFS
 132

	)
165  
	#EISCONN
 133

	)
166  
	#ENOTCONN
 134

	)
168  
	#ESHUTDOWN
 143

	)
169  
	#ETOOMANYREFS
 144

	)
170  
	#ETIMEDOUT
 145

	)
171  
	#ECONNREFUSED
 146

	)
172  
	#EHOSTDOWN
 147

	)
173  
	#EHOSTUNREACH
 148

	)
174  
	#EWOULDBLOCK
 
EAGAIN


	)
175  
	#EALREADY
 149

	)
176  
	#EINPROGRESS
 150

	)
179  
	#ESTALE
 151

	)
181 #ifdef 
__˝lu•lus


	@/usr/include/sys/feature_tests.h

8 #i‚de‡
_SYS_FEATURE_TESTS_H


9  
	#_SYS_FEATURE_TESTS_H


	)
11 #¥agm®
idít
 "@(#)feature_tests.h 1.7 94/12/06 SMI"

13 #ifdef 
__˝lu•lus


25 #if 
deföed
(
_POSIX_SOURCE
Ë&& !deföed(
_POSIX_C_SOURCE
)

26  
	#_POSIX_C_SOURCE
 1

	)
29 #ifdef 
__˝lu•lus


	@/usr/include/sys/isa_defs.h

5 #i‚def 
_SYS_ISA_DEFS_H


6  
	#_SYS_ISA_DEFS_H


	)
8 #¥agm®
idít
 "@(#)isa_defs.h 1.7 94/10/26 SMI"

119 #ifdef 
__˝lu•lus


131 #i‡
deföed
(
__i386
Ë|| deföed(
i386
)

136 #i‡!
deföed
(
__i386
)

137  
	#__i386


	)
143  
	#_LITTLE_ENDIAN


	)
144  
	#_STACK_GROWS_DOWNWARD


	)
145  
	#_LONG_LONG_LTOH


	)
146  
	#_BIT_FIELDS_LTOH


	)
147  
	#_IEEE_754


	)
148  
	#_CHAR_IS_SIGNED


	)
149  
	#_CHAR_ALIGNMENT
 1

	)
150  
	#_SHORT_ALIGNMENT
 2

	)
151  
	#_INT_ALIGNMENT
 4

	)
152  
	#_LONG_ALIGNMENT
 4

	)
153  
	#_LONG_LONG_ALIGNMENT
 4

	)
154  
	#_DOUBLE_ALIGNMENT
 4

	)
155  
	#_LONG_DOUBLE_ALIGNMENT
 4

	)
156  
	#_POINTER_ALIGNMENT
 4

	)
157  
	#_MAX_ALIGNMENT
 4

	)
158  
	#_ALIGNMENT_REQUIRED
 0

	)
163  
	#_SUNOS_VTOC_16


	)
164  
	#_DMA_USES_PHYSADDR


	)
165  
	#_FIRMWARE_NEEDS_FDISK


	)
175 #ñi‡
deföed
(
__µc
)

180  
	#_LITTLE_ENDIAN


	)
181  
	#_STACK_GROWS_DOWNWARD


	)
182  
	#_LONG_LONG_LTOH


	)
183  
	#_BIT_FIELDS_LTOH


	)
184  
	#_IEEE_754


	)
185  
	#_CHAR_IS_UNSIGNED


	)
186  
	#_CHAR_ALIGNMENT
 1

	)
187  
	#_SHORT_ALIGNMENT
 2

	)
188  
	#_INT_ALIGNMENT
 4

	)
189  
	#_LONG_ALIGNMENT
 4

	)
190  
	#_LONG_LONG_ALIGNMENT
 8

	)
191  
	#_DOUBLE_ALIGNMENT
 8

	)
192  
	#_LONG_DOUBLE_ALIGNMENT
 16

	)
193  
	#_POINTER_ALIGNMENT
 4

	)
194  
	#_MAX_ALIGNMENT
 16

	)
195  
	#_ALIGNMENT_REQUIRED
 1

	)
200  
	#_SUNOS_VTOC_16


	)
201  
	#_DMA_USES_PHYSADDR


	)
202  
	#_FIRMWARE_NEEDS_FDISK


	)
211 #ñi‡
deföed
(
__•¨c
Ë|| deföed(
•¨c
)

216 #i‡!
deföed
(
__•¨c
)

217  
	#__•¨c


	)
223  
	#_BIG_ENDIAN


	)
224  
	#_STACK_GROWS_DOWNWARD


	)
225  
	#_LONG_LONG_HTOL


	)
226  
	#_BIT_FIELDS_HTOL


	)
227  
	#_IEEE_754


	)
228  
	#_CHAR_IS_SIGNED


	)
229  
	#_CHAR_ALIGNMENT
 1

	)
230  
	#_SHORT_ALIGNMENT
 2

	)
231  
	#_INT_ALIGNMENT
 4

	)
232  
	#_LONG_ALIGNMENT
 4

	)
233  
	#_LONG_LONG_ALIGNMENT
 8

	)
234  
	#_DOUBLE_ALIGNMENT
 8

	)
235  
	#_LONG_DOUBLE_ALIGNMENT
 8

	)
236  
	#_POINTER_ALIGNMENT
 4

	)
237  
	#_MAX_ALIGNMENT
 8

	)
238  
	#_ALIGNMENT_REQUIRED
 1

	)
243  
	#_SUNOS_VTOC_8


	)
244  
	#_DMA_USES_VIRTADDR


	)
245  
	#_NO_FDISK_PRESENT


	)
252 #îr‹ 
ISA
 
nŸ
 
suµ‹ãd


255 #ifdef 
__˝lu•lus


	@/usr/include/sys/machtypes.h

8 #i‚de‡
_SYS_MACHTYPES_H


9  
	#_SYS_MACHTYPES_H


	)
11 #¥agm®
idít
 "@(#)machtypes.h 1.9 94/11/05 SMI"

13 
	~<sys/„©uª_ã°s.h
>

15 #ifdef 
__˝lu•lus


25 #i‡(!
deföed
(
_POSIX_C_SOURCE
Ë&& !deföed(
_XOPEN_SOURCE
)) || \

26 
	$deföed
(
__EXTENSIONS__
)

28 
	s_phyßdr_t
 { 
r
[1]; } *
	tphyßdr_t
;

30 
	s_œbñ_t
 { 
vÆ
[2]; } 
	tœbñ_t
;

34 
	tlock_t
;

36 #ifdef 
__˝lu•lus


37 
	}
}

	@/usr/include/sys/mutex.h

5 #i‚de‡
_SYS_MUTEX_H


6  
	#_SYS_MUTEX_H


	)
8 #¥agm®
idít
 "@(#)mutex.h 1.14 94/07/29 SMI"

10 #i‚def 
_ASM


11 
	~<sys/ty≥s.h
>

12 
	~<sys/dki_lköfo.h
>

15 #ifdef 
__˝lu•lus


19 #i‚def 
_ASM


45 
	e
{

46 
MUTEX_ADAPTIVE
 = 0,

47 
MUTEX_SPIN
,

48 
MUTEX_ADAPTIVE_STAT
,

49 
MUTEX_SPIN_STAT
,

50 
MUTEX_DRIVER_NOSTAT
 = 4,

51 
MUTEX_DRIVER_STAT
 = 5,

52 
MUTEX_ADAPTIVE_DEF


53 } 
	tkmuãx_ty≥_t
;

55 #i‡
deföed
(
_LOCKTEST
Ë|| deföed(
_MPSTATS
)

56  
	#MUTEX_DEFAULT
 
MUTEX_ADAPTIVE_STAT


	)
57  
	#MUTEX_DRIVER
 
MUTEX_DRIVER_STAT


	)
58  
	#MUTEX_SPIN_DEFAULT
 
MUTEX_SPIN_STAT


	)
60  
	#MUTEX_DEFAULT
 
MUTEX_ADAPTIVE_DEF


	)
61  
	#MUTEX_DRIVER
 
MUTEX_DRIVER_NOSTAT


	)
62  
	#MUTEX_SPIN_DEFAULT
 
MUTEX_SPIN


	)
71  
	#DEFAULT_WT
 
NULL


	)
74 
	smuãx
 {

75 *
	m_›aque
[2];

76 } 
	tkmuãx_t
;

79 #i‡
deföed
(
_KERNEL
Ë&& deföed(
__STDC__
)

81  
	#MUTEX_HELD
(
x
) (
	`muãx_ow√d
(x))

	)
82  
	#MUTEX_NOT_HELD
(
x
) (!
	`muãx_ow√d
(xË|| 
∑nic°r
)

	)
84 
lock_muãx_Êush
();

90 
muãx_öô
(
kmuãx_t
 *, *, 
kmuãx_ty≥_t
, *);

91 
muãx_de°roy
(
kmuãx_t
 *);

92 
muãx_íãr
(
kmuãx_t
 *);

93 
muãx_åyíãr
(
kmuãx_t
 *);

94 
muãx_exô
(
kmuãx_t
 *);

95 
lk°©_t
 *
muãx_°©s
(
kmuãx_t
 *);

96 
muãx_ow√d
(
kmuãx_t
 *);

97 
_kthªad
 *
muãx_ow√r
(
kmuãx_t
 *);

104 #ifdef 
__˝lu•lus


	@/usr/include/sys/select.h

8 #i‚de‡
_SYS_SELECT_H


9  
	#_SYS_SELECT_H


	)
11 #¥agm®
idít
 "@(#)select.h 1.10 92/07/14 SMI"

13 #i‚de‡
_KERNEL


14 
	~<sys/time.h
>

17 #ifdef 
__˝lu•lus


27 #i‚def 
FD_SETSIZE


28  
	#FD_SETSIZE
 1024

	)
31 #i‚de‡
NBBY


32  
	#NBBY
 8

	)
35 
	tfd_mask
;

36  
	#NFDBITS
 ( (
fd_mask
Ë* 
NBBY
)

	)
37 #i‚def 
howm™y


38  
	#howm™y
(
x
, 
y
) (((x)+((y)-1))/(y))

	)
41 
	sfd_£t
 {

42 
fd_mask
 
fds_bôs
[
howm™y
(
FD_SETSIZE
, 
NFDBITS
)];

43 } 
	tfd_£t
;

45  
	#FD_SET
(
n
, 
p
) (’)->
fds_bôs
[“)/
NFDBITS
] |= \

46 (()1 << ((
n
Ë% 
NFDBITS
)))

	)
48  
	#FD_CLR
(
n
, 
p
) (’)->
fds_bôs
[“)/
NFDBITS
] &= \

49 ~(()1 << ((
n
Ë% 
NFDBITS
)))

	)
51  
	#FD_ISSET
(
n
, 
p
) (’)->
fds_bôs
[“)/
NFDBITS
] & \

52 (()1 << ((
n
Ë% 
NFDBITS
)))

	)
54 #ifde‡
_KERNEL


55  
	#FD_ZERO
(
p
) 
	`bzîo
((*)’),  (*’)))

	)
57  
	#FD_ZERO
(
p
) 
	`mem£t
((*)’), 0,  (*’)))

	)
60 #i‚def 
_KERNEL


61 #ifdef 
__STDC__


62 
£À˘
(, 
fd_£t
 *, fd_£à*, fd_£à*, 
timevÆ
 *);

64 
£À˘
();

68 #ifdef 
__˝lu•lus


	@/usr/include/sys/va_list.h

6 #i‚def 
_SYS_VA_LIST_H


7  
	#_SYS_VA_LIST_H


	)
9 #¥agm®
idít
 "@(#)va_list.h 1.6 96/01/26 SMI"

21 #ifdef 
__˝lu•lus


25 #i‡
deföed
(
__µc
)

27 
	s__va_li°_èg
 {

28 
__g¥
;

31 
__Âr
;

34 *
__öput_¨g_¨ó
;

37 *
__ªg_ßve_¨ó
;

39 } 
	t__va_li°
[1];

43 #ifde‡
__STDC__


44 *
	t__va_li°
;

46 *
	t__va_li°
;

51 #ifdef 
__˝lu•lus


	@/usr/include/sys/wait.h

8 #i‚de‡
_SYS_WAIT_H


9  
	#_SYS_WAIT_H


	)
11 #¥agm®
idít
 "@(#)wait.h 1.15 94/11/05 SMI"

13 
	~<sys/„©uª_ã°s.h
>

15 
	~<sys/ty≥s.h
>

17 #i‡!
deföed
(
_POSIX_C_SOURCE
Ë&& !deföed(
_XOPEN_SOURCE
)

18 
	~<sys/sigöfo.h
>

19 
	~<sys/¥oc£t.h
>

22 #ifdef 
__˝lu•lus


30  
	#WUNTRACED
 0004

	)
31  
	#WNOHANG
 0100

	)
33 #i‡!
deföed
(
_POSIX_C_SOURCE
Ë&& !deföed(
_XOPEN_SOURCE
)

35  
	#WEXITED
 0001

	)
36  
	#WTRAPPED
 0002

	)
37  
	#WSTOPPED
 
WUNTRACED


	)
38  
	#WCONTINUED
 0010

	)
39  
	#WNOWAIT
 0200

	)
41  
	#WOPTMASK
 (
WEXITED
|
WTRAPPED
|
WSTOPPED
|
WCONTINUED
|
WNOHANG
|
WNOWAIT
)

	)
49 #i‡!
deföed
(
_POSIX_C_SOURCE
Ë&& !deföed(
_XOPEN_SOURCE
)

51  
	#WSTOPFLG
 0177

	)
52  
	#WCONTFLG
 0177777

	)
53  
	#WCOREFLG
 0200

	)
54  
	#WSIGMASK
 0177

	)
56  
	#WLOBYTE
(
°©
) (()((°©)&0377))

	)
57  
	#WHIBYTE
(
°©
) (()(((°©)>>8)&0377))

	)
58  
	#WWORD
(
°©
) (()((°©))&0177777)

	)
60  
	#WIFCONTINUED
(
°©
) (
	`WWORD
(°©Ë=
WCONTFLG
)

	)
61  
	#WCOREDUMP
(
°©
) ((°©)&
WCOREFLG
)

	)
65  
	#WIFEXITED
(
°©
) (()((°©)&0xFFË=0)

	)
66  
	#WIFSIGNALED
(
°©
) (()((stat)&0xFF) > 0 && \

67 ()((
°©
)&0xFF00Ë=0)

	)
68  
	#WIFSTOPPED
(
°©
) (()((stat)&0xFF) == 0177 && \

69 ()((
°©
)&0xFF00Ë!0)

	)
70  
	#WEXITSTATUS
(
°©
) (()(((°©)>>8)&0xFF))

	)
71  
	#WTERMSIG
(
°©
) (()((°©)&0x7F))

	)
72  
	#WSTOPSIG
(
°©
) (()(((°©)>>8)&0xFF))

	)
76 #i‡!
deföed
(
_KERNEL
)

77 #i‡
deföed
(
__STDC__
)

79 
pid_t
 
waô
(*);

80 
pid_t
 
waôpid
(pid_t, *, );

81 #i‡!
deföed
(
_POSIX_C_SOURCE
Ë&& !deföed(
_XOPEN_SOURCE
)

82 
waôid
(
idty≥_t
, 
id_t
, 
sigöfo_t
 *, );

87 
pid_t
 
waô
();

88 
pid_t
 
waôpid
();

89 #i‡!
deföed
(
_POSIX_C_SOURCE
Ë&& !deföed(
_XOPEN_SOURCE
)

90 
waôid
();

96 #ifdef 
__˝lu•lus


	@/usr/include/time.h

11 #i‚de‡
_TIME_H


12  
	#_TIME_H


	)
14 #¥agm®
idít
 "@(#)time.h 1.23 95/08/28 SMI"

16 
	~<sys/„©uª_ã°s.h
>

18 #ifdef 
__˝lu•lus


22 #i‚de‡
NULL


23  
	#NULL
 0

	)
26 #i‚de‡
_SIZE_T


27  
	#_SIZE_T


	)
28 
	tsize_t
;

30 #i‚de‡
_CLOCK_T


31  
	#_CLOCK_T


	)
32 
	t˛ock_t
;

34 #i‚de‡
_TIME_T


35  
	#_TIME_T


	)
36 
	ttime_t
;

38 #i‚de‡
_CLOCKID_T


39  
	#_CLOCKID_T


	)
40 
	t˛ockid_t
;

42 #i‚de‡
_TIMER_T


43  
	#_TIMER_T


	)
44 
	ttimî_t
;

47  
	#CLOCKS_PER_SEC
 1000000

	)
49 
	stm
 {

50 
	mtm_£c
;

51 
	mtm_mö
;

52 
	mtm_hour
;

53 
	mtm_mday
;

54 
	mtm_m⁄
;

55 
	mtm_yór
;

56 
	mtm_wday
;

57 
	mtm_yday
;

58 
	mtm_isd°
;

61 #i‡
deföed
(
__STDC__
)

63 
˛ock_t
 
˛ock
();

64 
dif·ime
(
time_t
,Åime_t);

65 
time_t
 
mktime
(
tm
 *);

66 
time_t
 
time
(time_t *);

67 *
as˘ime
(c⁄° 
tm
 *);

68 *
˘ime
(c⁄° 
time_t
 *);

69 
tm
 *
gmtime
(c⁄° 
time_t
 *);

70 
tm
 *
loˇ…ime
(c⁄° 
time_t
 *);

71 
size_t
 
°r·ime
(*, size_t, c⁄° *, c⁄° 
tm
 *);

73 #if 
deföed
(
__EXTENSIONS__
Ë|| deföed(
_REENTRANT
) || \

74 (
	g_POSIX_C_SOURCE
 - 0 >= 199506L)

75 
tm
 *
gmtime_r
(c⁄° 
time_t
 *, tm *);

76 
tm
 *
loˇ…ime_r
(c⁄° 
time_t
 *, tm *);

79 #i‡(
__STDC__
 =0 && !
deföed
(
_POSIX_C_SOURCE
Ë&& !deföed(
_XOPEN_SOURCE
)) || \

80 (
deföed
(
_XOPEN_SOURCE
Ë&& 
	g_XOPEN_VERSION
 - 0 == 4) || \

81 
	$deföed
(
__EXTENSIONS__
)

82 *
	`°Ωtime
(c⁄° *, c⁄° *, 
tm
 *);

85 #i‡
	`deföed
(
__EXTENSIONS__
Ë|| ((
__STDC__
 - 0 == 0) && \

86 !
	`deföed
(
_POSIX_C_SOURCE
Ë&& !deföed(
_XOPEN_SOURCE
)) || \

87 (
_POSIX_C_SOURCE
 > 2)

89 
	~<sys/time.h
>

90 
	~<sys/sigöfo.h
>

91 
	`˛ock_gëªs
(
˛ockid_t
, 
time•ec
 *);

92 
	`˛ock_gëtime
(
˛ockid_t
, 
time•ec
 *);

93 
	`˛ock_£âime
(
˛ockid_t
, c⁄° 
time•ec
 *);

95 
	`timî_¸óã
(
˛ockid_t
, 
sigevít
 *, 
timî_t
 *);

96 
	`timî_dñëe
(
timî_t
);

97 
	`timî_gëovîrun
(
timî_t
);

98 
	`timî_gëtime
(
timî_t
, 
ôimî•ec
 *);

99 
	`timî_£âime
(
timî_t
, , c⁄° 
ôimî•ec
 *,

100 
ôimî•ec
 *);

101 
	`«no¶ìp
(c⁄° 
time•ec
 *, timespec *);

105 #i‡
	`deföed
(
__EXTENSIONS__
Ë|| 
__STDC__
 == 0 || \

106 
	`deföed
(
_POSIX_C_SOURCE
Ë|| 
	$deföed
(
_XOPEN_SOURCE
)

107 
	`tz£t
();

109 *
tz«me
[2];

111 #i‚de‡
CLK_TCK


112 
	`_sysc⁄f
();

113  
	#CLK_TCK
 
	`_sysc⁄f
(3)

	)
117 #i‡
	`deföed
(
__EXTENSIONS__
Ë|| (
__STDC__
 == 0 && \

118 !
	`deföed
(
_POSIX_C_SOURCE
)Ë|| 
	$deföed
(
_XOPEN_SOURCE
)

119 
timez⁄e
;

120 
daylight
;

125 #i‡
__STDC__
 =0 && !
	`deföed
(
_POSIX_C_SOURCE
Ë&& !deföed(
_XOPEN_SOURCE
)

126 
	`c·ime
(*, *, c⁄° 
time_t
 *);

127 
	`asc·ime
(*, c⁄° *, c⁄° 
tm
 *);

128 
Ætz⁄e
;

129 
tm
 *
	`gëd©e
(const *);

131 #ifdef 
_REENTRANT


132 #unde‡
gëd©e_îr


133  
	#gëd©e_îr
 *(*)
	`_gëd©e_îr_addr
()

	)
134 *
	`_gëd©e_îr_addr
();

136 
gëd©e_îr
;

142 
	`˛ock
();

143 
	`dif·ime
();

144 
time_t
 
	`mktime
();

145 
time_t
 
	`time
();

146 
size_t
 
	`°r·ime
();

147 
tm
 *
	`gmtime
(), *
	`loˇ…ime
();

148 *
	`˘ime
(), *
	`as˘ime
(), *
	`°Ωtime
();

149 
	`c·ime
(), 
	`asc·ime
();

150 
	`tz£t
();

152 #if 
	`deföed
(
__EXTENSIONS__
Ë|| deföed(
_REENTRANT
) || \

153 (
_POSIX_C_SOURCE
 - 0 >= 199506L)

154 
tm
 *
	`gmtime_r
();

155 
tm
 *
	`loˇ…ime_r
();

158 
timez⁄e
, 
Ætz⁄e
;

159 
daylight
;

160 *
tz«me
[2];

162 
tm
 *
	`gëd©e
();

163 #ifdef 
_REENTRANT


164 #unde‡
gëd©e_îr


165  
	#gëd©e_îr
 *(*)
	`_gëd©e_îr_addr
()

	)
166 *
	`_gëd©e_îr_addr
();

168 
gëd©e_îr
;

176 #if 
	`deföed
(
__EXTENSIONS__
Ë|| deföed(
_REENTRANT
) || \

177 (
_POSIX_C_SOURCE
 - 0 >199506LË|| 
	$deföed
(
_POSIX_PTHREAD_SEMANTICS
)

179 #if 
	`deföed
(
__STDC__
)

181 #if (
_POSIX_C_SOURCE
 - 0 >199506LË|| 
	`deföed
(
_POSIX_PTHREAD_SEMANTICS
)

183 #ifde‡
__PRAGMA_REDEFINE_EXTNAME


184 *
	`as˘ime_r
(c⁄° 
tm
 *, *);

185 *
	`˘ime_r
(c⁄° 
time_t
 *, *);

186 #¥agm®
ªdeföe_exäame
 
˘ime_r
 
__posix_˘ime_r


187 #¥agm®
ªdeföe_exäame
 
as˘ime_r
 
__posix_as˘ime_r


191 
	$as˘ime_r
(c⁄° 
tm
 *
__tm
, *
__buf
)

193 *
	`__posix_as˘ime_r
(c⁄° 
tm
 *, *);

194  (
	`__posix_as˘ime_r
(
__tm
, 
__buf
));

195 
	}
}

197 
	$˘ime_r
(c⁄° 
time_t
 *
__time
, *
__buf
)

199 *
	`__posix_˘ime_r
(c⁄° 
time_t
 *, *);

200  (
	`__posix_˘ime_r
(
__time
, 
__buf
));

201 
	}
}

206 *
as˘ime_r
(c⁄° 
tm
 *, *, );

207 *
˘ime_r
(c⁄° 
time_t
 *, *, );

213 #if (
_POSIX_C_SOURCE
 - 0 >199506LË|| 
deföed
(
_POSIX_PTHREAD_SEMANTICS
)

215 #ifde‡
__PRAGMA_REDEFINE_EXTNAME


216 *
as˘ime_r
();

217 *
˘ime_r
();

218 #¥agm®
ªdeföe_exäame
 
as˘ime_r
 
__posix_as˘ime_r


219 #¥agm®
ªdeföe_exäame
 
˘ime_r
 
__posix_˘ime_r


223 
	$as˘ime_r
(
__tm
, 
__buf
)

224 
tm
 *
__tm
;

225 *
__buf
;

227 *
	`__posix_as˘ime_r
();

228  (
	`__posix_as˘ime_r
(
__tm
, 
__buf
));

229 
	}
}

231 
	$˘ime_r
(
__time
, 
__buf
)

232 
time_t
 *
__time
;

233 *
__buf
;

235 *
	`__posix_˘ime_r
();

236  (
	`__posix_˘ime_r
(
__time
, 
__buf
));

237 
	}
}

242 *
as˘ime_r
();

243 *
˘ime_r
();

251 #ifdef 
__˝lu•lus


	@/usr/include/sys/dki_lkinfo.h

5 #i‚de‡
_SYS_DKI_LKINFO_H


6  
	#_SYS_DKI_LKINFO_H


	)
8 #¥agm®
idít
 "@(#)dki_lkinfo.h 1.8 93/05/03 SMI"

10 
	~<sys/ty≥s.h
>

11 
	~<sys/dl.h
>

13 #ifdef 
__˝lu•lus


21 
	slköfo
 {

22 *
lk_«me
;

23 
lk_Êags
;

24 
lk_∑d
[2];

25 } 
	tlköfo_t
;

27 
	s_lk°©_t
 {

28 
lköfo_t
 *
ls_öf›
;

29 
ul⁄g_t
 
ls_wr˙t
;

30 
ul⁄g_t
 
ls_rd˙t
;

31 
ul⁄g_t
 
ls_sﬁ‹d˙t
;

32 
ul⁄g_t
 
ls_Áû
;

34 
	u
{

35 
dl_t
 
lsu_time
;

36 
_lk°©_t
 *
lsu_√xt
;

37 } 
un
;

38  
	#ls_°ime
 
un
.
lsu_time


	)
39 
dl_t
 
ls_wtime
;

40 
dl_t
 
ls_htime
;

41 } 
	tlk°©_t
;

43 
	slk°©_sum
 {

44 
lk°©_t
 *
•
;

45 
lk°©_sum
 *
√xt
;

46 } 
	tlk°©_sum_t
;

51  
	#NOSTATS
 1

	)
54  
	#LSB_NLKDS
 91

	)
56 
	slksblk
 {

57 
lksblk
 *
lsb_¥ev
, *
lsb_√xt
;

58 
lsb_n‰ì
;

59 
lk°©_t
 *
lsb_‰ì
;

60 
lk°©_t
 
lsb_bufs
[
LSB_NLKDS
];

61 } 
	tlksblk_t
;

63 #ifde‡
__STDC__


64 
lk°©_t
 *
lk°©_Æloc
(
lköfo_t
 *, );

65 
lk°©_‰ì
(
lk°©_t
 *, );

66 
lk°©_sum_⁄_de°roy
(
lk°©_t
 *);

67 * 
°¨tup_Æloc
(
size_t
, **);

68 
°¨tup_‰ì
(*, 
size_t
, **);

71 #ifdef 
__˝lu•lus


	@/usr/include/sys/ieeefp.h

5 #i‚de‡
_SYS_IEEEFP_H


6  
	#_SYS_IEEEFP_H


	)
8 #¥agm®
idít
 "@(#)ieeefp.h 2.7 94/11/09"

10 #ifde‡ 
__˝lu•lus


17 #i‡
deföed
(
•¨c
Ë|| deföed(
__•¨c
)

18 
	eÂ_dúe˘i⁄_ty≥
 {

19 
Â_√¨e°
 = 0,

20 
Â_tozîo
 = 1,

21 
Â_posôive
 = 2,

22 
Â_√g©ive
 = 3

25 
	eÂ_¥ecisi⁄_ty≥
 {

26 
	mÂ_exãnded
 = 0,

27 
	mÂ_sögÀ
 = 1,

28 
	mÂ_doubÀ
 = 2,

29 
	mÂ_¥ecisi⁄_3
 = 3

32 
	eÂ_ex˚±i⁄_ty≥
 {

33 
	mÂ_öexa˘
 = 0,

34 
	mÂ_divisi⁄
 = 1,

35 
	mÂ_undîÊow
 = 2,

36 
	mÂ_ovîÊow
 = 3,

37 
	mÂ_övÆid
 = 4

40 
	eÂ_å≠_íabÀ_ty≥
 {

41 
	mÂ_å≠_öexa˘
 = 0,

42 
	mÂ_å≠_divisi⁄
 = 1,

43 
	mÂ_å≠_undîÊow
 = 2,

44 
	mÂ_å≠_ovîÊow
 = 3,

45 
	mÂ_å≠_övÆid
 = 4

49 #i‡
deföed
(
i386
Ë|| deföed(
__i386
)

50 
	eÂ_dúe˘i⁄_ty≥
 {

51 
	mÂ_√¨e°
 = 0,

52 
	mÂ_√g©ive
 = 1,

53 
	mÂ_posôive
 = 2,

54 
	mÂ_tozîo
 = 3

57 
	eÂ_¥ecisi⁄_ty≥
 {

58 
	mÂ_sögÀ
 = 0,

59 
	mÂ_¥ecisi⁄_3
 = 1,

60 
	mÂ_doubÀ
 = 2,

61 
	mÂ_exãnded
 = 3

64 
	eÂ_ex˚±i⁄_ty≥
 {

65 
	mÂ_övÆid
 = 0,

66 
	mÂ_dí‹mÆized
 = 1,

67 
	mÂ_divisi⁄
 = 2,

68 
	mÂ_ovîÊow
 = 3,

69 
	mÂ_undîÊow
 = 4,

70 
	mÂ_öexa˘
 = 5

73 
	eÂ_å≠_íabÀ_ty≥
 {

74 
	mÂ_å≠_övÆid
 = 0,

75 
	mÂ_å≠_dí‹mÆized
 = 1,

76 
	mÂ_å≠_divisi⁄
 = 2,

77 
	mÂ_å≠_ovîÊow
 = 3,

78 
	mÂ_å≠_undîÊow
 = 4,

79 
	mÂ_å≠_öexa˘
 = 5

83 #i‡
deföed
(
__µc
)

84 
	eÂ_dúe˘i⁄_ty≥
 {

85 
	mÂ_√¨e°
 = 0,

86 
	mÂ_tozîo
 = 1,

87 
	mÂ_posôive
 = 2,

88 
	mÂ_√g©ive
 = 3

91 
	eÂ_¥ecisi⁄_ty≥
 {

92 
	mÂ_exãnded
 = 0,

93 
	mÂ_sögÀ
 = 1,

94 
	mÂ_doubÀ
 = 2,

95 
	mÂ_¥ecisi⁄_3
 = 3

98 
	eÂ_ex˚±i⁄_ty≥
 {

99 
	mÂ_övÆid_cvi
 = 8,

100 
	mÂ_övÆid_sqπ
 = 9,

101 
	mÂ_övÆid_so·
 = 10,

102 
	mÂ_övÆid_vc
 = 19,

103 
	mÂ_övÆid_imz
 = 20,

104 
	mÂ_övÆid_zdz
 = 21,

105 
	mÂ_övÆid_idi
 = 22,

106 
	mÂ_övÆid_isi
 = 23,

107 
	mÂ_övÆid_¢™
 = 24,

108 
	mÂ_öexa˘
 = 25,

109 
	mÂ_divisi⁄
 = 26,

110 
	mÂ_undîÊow
 = 27,

111 
	mÂ_ovîÊow
 = 28,

112 
	mÂ_övÆid
 = 29

115 
	eÂ_å≠_íabÀ_ty≥
 {

116 
	mÂ_å≠_öexa˘
 = 3,

117 
	mÂ_å≠_divisi⁄
 = 4,

118 
	mÂ_å≠_undîÊow
 = 5,

119 
	mÂ_å≠_ovîÊow
 = 6,

120 
	mÂ_å≠_övÆid
 = 7

124 
	eÂ_˛ass_ty≥
 {

125 
	gÂ_zîo
 = 0,

126 
	gÂ_subn‹mÆ
 = 1,

127 
	gÂ_n‹mÆ
 = 2,

128 
	gÂ_öföôy
 = 3,

129 
	gÂ_quõt
 = 4,

130 
	gÂ_sig«lög
 = 5

133 #ifde‡ 
__˝lu•lus


	@/usr/include/sys/procset.h

8 #i‚de‡
_SYS_PROCSET_H


9  
	#_SYS_PROCSET_H


	)
11 #¥agm®
idít
 "@(#)procset.h 1.15 93/05/05 SMI"

13 #ifdef 
__˝lu•lus


23  
	#P_INITPID
 1

	)
24  
	#P_INITUID
 0

	)
25  
	#P_INITPGID
 0

	)
33 
	eidty≥
 {

34 
P_PID
,

35 
P_PPID
,

36 
P_PGID
,

38 
P_SID
,

39 
P_CID
,

40 
P_UID
,

41 
P_GID
,

42 
P_ALL
,

43 
P_LWPID


44 } 
	tidty≥_t
;

52 
	eid›
 {

53 
POP_DIFF
,

56 
POP_AND
,

59 
POP_OR
,

62 
POP_XOR


65 } 
	tid›_t
;

73 
	s¥oc£t
 {

74 
id›_t
 
p_›
;

79 
idty≥_t
 
p_lidty≥
;

82 
id_t
 
p_lid
;

84 
idty≥_t
 
p_ridty≥
;

87 
id_t
 
p_rid
;

88 } 
	t¥oc£t_t
;

95  
	#£çroc£t
(
p•
, 
›
, 
…y≥
, 
lid
, 
πy≥
, 
rid
) \

96 (
p•
)->
p_›
 = (
›
); \

97 (
p•
)->
p_lidty≥
 = (
…y≥
); \

98 (
p•
)->
p_lid
 = (
lid
); \

99 (
p•
)->
p_ridty≥
 = (
πy≥
); \

100 (
p•
)->
p_rid
 = (
rid
);

	)
102 #ifde‡
_KERNEL


107 #i‡
deföed
(
__STDC__
)

108 
	~<sys/¥oc.h
>

109 
dŸ›rocs
(
¥oc£t_t
 *
p•
, (*
fun˝
)(), *
¨g
);

110 
dŸﬁwp
(
¥oc£t_t
 *
p•
, (*
fun˝
)(), *
¨g
);

111 
¥ocö£t
(
¥oc_t
 *
µ
, 
¥oc£t_t
 *
p•
);

112 
sig£nd¥oc
(
¥oc_t
 *, 
sig£nd_t
 *);

113 
sig£nd£t
(
¥oc£t_t
 *, 
sig£nd_t
 *);

114 
boﬁón_t
 
cur_ö£t_⁄ly
(
¥oc£t_t
 *
p•
);

118 
dŸ›rocs
();

119 
dŸﬁwp
();

120 
¥ocö£t
();

121 
sig£nd¥oc
();

122 
sig£nd£t
();

123 
boﬁón_t
 
cur_ö£t_⁄ly
();

129 #ifdef 
__˝lu•lus


	@/usr/include/sys/siginfo.h

11 #i‚de‡
_SYS_SIGINFO_H


12  
	#_SYS_SIGINFO_H


	)
14 #¥agm®
idít
 "@(#)siginfo.h 1.36 95/08/24 SMI"

16 
	~<sys/„©uª_ã°s.h
>

18 #ifdef 
__˝lu•lus


22 #i‡!
deföed
(
_POSIX_C_SOURCE
) || (_POSIX_C_SOURCE > 2) || \

23 
	$deföed
(
__EXTENSIONS__
)

24 
	usigvÆ
 {

25 
sivÆ_öt
;

26 *
sivÆ_±r
;

29 
	ssigevít
 {

30 
sigev_nŸify
;

31 
	u
{

32 
_sigev_signo
;

33 (*
_sigev_nŸify_fun˘i⁄
)(
sigvÆ
);

34 } 
_sigev_un
;

35 
sigvÆ
 
sigev_vÆue
;

36 
_sigev_∑d1
;

37 *
_sigev_nŸify_©åibuãs
;

38 
_sigev_∑d2
;

40  
	#sigev_signo
 
_sigev_un
.
_sigev_signo


	)
43  
	#SIGEV_NONE
 1

	)
44  
	#SIGEV_SIGNAL
 2

	)
45  
	#SIGEV_THREAD
 3

	)
52  
	#SI_FROMUSER
(
sù
) ((sù)->
si_code
 <0)

	)
53  
	#SI_FROMKERNEL
(
sù
) ((sù)->
si_code
 > 0)

	)
55  
	#SI_NOINFO
 32767

	)
56  
	#SI_USER
 0

	)
57  
	#SI_LWP
 (-1)

	)
58  
	#SI_QUEUE
 (-2)

	)
59  
	#SI_TIMER
 (-3)

	)
60  
	#SI_ASYNCIO
 (-4)

	)
61  
	#SI_MESGQ
 (-5)

	)
64 #i‡!
	`deföed
(
_POSIX_C_SOURCE
Ë|| deföed(
__EXTENSIONS__
)

71 
	~<sys/machsig.h
>

77  
	#TRAP_BRKPT
 1

	)
78  
	#TRAP_TRACE
 2

	)
79  
	#NSIGTRAP
 2

	)
85  
	#CLD_EXITED
 1

	)
86  
	#CLD_KILLED
 2

	)
87  
	#CLD_DUMPED
 3

	)
88  
	#CLD_TRAPPED
 4

	)
89  
	#CLD_STOPPED
 5

	)
90  
	#CLD_CONTINUED
 6

	)
91  
	#NSIGCLD
 6

	)
97  
	#POLL_IN
 1

	)
98  
	#POLL_OUT
 2

	)
99  
	#POLL_MSG
 3

	)
100  
	#POLL_ERR
 4

	)
101  
	#POLL_PRI
 5

	)
102  
	#POLL_HUP
 6

	)
103  
	#NSIGPOLL
 6

	)
109  
	#PROF_SIG
 1

	)
110  
	#NSIGPROF
 1

	)
114 #i‡!
	`deföed
(
_POSIX_C_SOURCE
) || (_POSIX_C_SOURCE > 2) || \

115 
	$deföed
(
__EXTENSIONS__
)

118  
	#SI_MAXSZ
 128

	)
119  
	#SI_PAD
 ((
SI_MAXSZ
 /  ()Ë- 3)

	)
124 
	~<sys/time.h
>

127 #i‡!
	`deföed
(
	t_POSIX_C_SOURCE
)

129 
	tsigöfo


133 
si_signo
;

134 
si_code
;

135 
si_î∫o
;

137 
	u
{

139 
_∑d
[
SI_PAD
];

141 
	s
{

142 
pid_t
 
_pid
;

143 
	u
{

144 
	s
{

145 
uid_t
 
_uid
;

146 
sigvÆ
 
_vÆue
;

147 } 
_kûl
;

148 
	s
{

149 
˛ock_t
 
_utime
;

150 
_°©us
;

151 
˛ock_t
 
_°ime
;

152 } 
_˛d
;

153 } 
_pd©a
;

154 } 
_¥oc
;

156 
	s
{

157 
ˇddr_t
 
_addr
;

158 
_å≠no
;

159 } 
_Áu…
;

161 
	s
{

163 
_fd
;

164 
_b™d
;

165 } 
_fûe
;

167 
	s
{

168 
ˇddr_t
 
_Áddr
;

169 
time°ruc_t
 
_t°amp
;

170 
_sysˇŒ
;

171 
_nsyßrg
;

172 
_Áu…
;

173 
_syßrg
[8];

174 
_m°©e
[17];

175 } 
_¥of
;

177 } 
_d©a
;

179 
	}
} 
	tsigöfo_t
;

186 #i‡!
deföed
(
_POSIX_C_SOURCE
)

188 
	sk_sigöfo
 {

190 
	msi_signo
;

191 
	msi_code
;

192 
	msi_î∫o
;

194 
	u
{

195 
	s
{

196 
pid_t
 
	m_pid
;

197 
	u
{

198 
	s
{

199 
uid_t
 
	m_uid
;

200 
sigvÆ
 
	m_vÆue
;

201 } 
	m_kûl
;

202 
	s
{

203 
˛ock_t
 
	m_utime
;

204 
	m_°©us
;

205 
˛ock_t
 
	m_°ime
;

206 } 
	m_˛d
;

207 } 
	m_pd©a
;

208 } 
	m_¥oc
;

210 
	s
{

211 
ˇddr_t
 
	m_addr
;

212 
	m_å≠no
;

213 } 
	m_Áu…
;

215 
	s
{

217 
	m_fd
;

218 
	m_b™d
;

219 } 
	m_fûe
;

221 
	s
{

222 
ˇddr_t
 
	m_Áddr
;

223 
time°ruc_t
 
	m_t°amp
;

224 
	m_sysˇŒ
;

225 
	m_nsyßrg
;

226 
	m_Áu…
;

230 } 
	m_¥of
;

232 } 
	m_d©a
;

234 } 
	tk_sigöfo_t
;

236 
	ssigqueue
 {

237 
sigqueue
 *
	msq_√xt
;

238 
k_sigöfo_t
 
	msq_öfo
;

239 (*
	msq_func
)(
	msigqueue
 *);

240 *
	msq_back±r
;

242 } 
	tsigqueue_t
;

245  
	#SI_CANQUEUE
(
c
) ((cË<
SI_QUEUE
)

	)
249  
	#si_pid
 
_d©a
.
_¥oc
.
_pid


	)
250  
	#si_°©us
 
_d©a
.
_¥oc
.
_pd©a
.
_˛d
.
_°©us


	)
251  
	#si_°ime
 
_d©a
.
_¥oc
.
_pd©a
.
_˛d
.
_°ime


	)
252  
	#si_utime
 
_d©a
.
_¥oc
.
_pd©a
.
_˛d
.
_utime


	)
253  
	#si_uid
 
_d©a
.
_¥oc
.
_pd©a
.
_kûl
.
_uid


	)
254  
	#si_vÆue
 
_d©a
.
_¥oc
.
_pd©a
.
_kûl
.
_vÆue


	)
255  
	#si_addr
 
_d©a
.
_Áu…
.
_addr


	)
256  
	#si_å≠no
 
_d©a
.
_Áu…
.
_å≠no


	)
257  
	#si_fd
 
_d©a
.
_fûe
.
_fd


	)
258  
	#si_b™d
 
_d©a
.
_fûe
.
_b™d


	)
260  
	#si_t°amp
 
_d©a
.
_¥of
.
_t°amp


	)
261  
	#si_sysˇŒ
 
_d©a
.
_¥of
.
_sysˇŒ


	)
262  
	#si_nsyßrg
 
_d©a
.
_¥of
.
_nsyßrg


	)
263  
	#si_syßrg
 
_d©a
.
_¥of
.
_syßrg


	)
264  
	#si_Áu…
 
_d©a
.
_¥of
.
_Áu…


	)
265  
	#si_Áddr
 
_d©a
.
_¥of
.
_Áddr


	)
266  
	#si_m°©e
 
_d©a
.
_¥of
.
_m°©e


	)
270 #ifdef 
__˝lu•lus


	@/usr/include/sys/dl.h

8 #i‚de‡
_SYS_DL_H


9  
	#_SYS_DL_H


	)
11 #¥agm®
idít
 "@(#)dl.h 1.13 93/08/18 SMI"

13 
	~<sys/iß_defs.h
>

15 #ifdef 
__˝lu•lus


19 
	sdl
 {

20 #ifde‡
_LONG_LONG_LTOH


21 
ul⁄g_t
 
dl_l›
;

22 
dl_h›
;

24 
dl_h›
;

25 
ul⁄g_t
 
dl_l›
;

27 } 
	tdl_t
;

29 #ifde‡
__STDC__


30 
dl_t
 
œdd
(dl_t, dl_t);

31 
dl_t
 
lsub
(dl_t, dl_t);

32 
dl_t
 
lmul
(dl_t, dl_t);

33 
dl_t
 
ldivide
(dl_t, dl_t);

34 
dl_t
 
lshi·l
(dl_t, );

35 
dl_t
 
Œog10
(dl_t);

36 
dl_t
 
Àxp10
(dl_t);

38 
dl_t
 
œdd
();

39 
dl_t
 
lsub
();

40 
dl_t
 
lmul
();

41 
dl_t
 
ldivide
();

42 
dl_t
 
lshi·l
();

43 
dl_t
 
Œog10
();

44 
dl_t
 
Àxp10
();

47 
dl_t
 
lzîo
;

48 
dl_t
 
l⁄e
;

49 
dl_t
 
…í
;

51 #ifdef 
__˝lu•lus


	@/usr/include/sys/machsig.h

8 #i‚def 
_SYS_MACHSIG_H


9  
	#_SYS_MACHSIG_H


	)
11 #¥agm®
idít
 "@(#)machsig.h 1.10 94/11/05 SMI"

14 
	~<sys/„©uª_ã°s.h
>

16 #ifdef 
__˝lu•lus


32 #i‡!
deföed
(
_POSIX_C_SOURCE
)

38  
	#ILL_ILLOPC
 1

	)
39  
	#ILL_ILLOPN
 2

	)
40  
	#ILL_ILLADR
 3

	)
41  
	#ILL_ILLTRP
 4

	)
42  
	#ILL_PRVOPC
 5

	)
43  
	#ILL_PRVREG
 6

	)
44  
	#ILL_COPROC
 7

	)
45  
	#ILL_BADSTK
 8

	)
46  
	#NSIGILL
 8

	)
52  
	#EMT_TAGOVF
 1

	)
53  
	#NSIGEMT
 1

	)
59  
	#FPE_INTDIV
 1

	)
60  
	#FPE_INTOVF
 2

	)
61  
	#FPE_FLTDIV
 3

	)
62  
	#FPE_FLTOVF
 4

	)
63  
	#FPE_FLTUND
 5

	)
64  
	#FPE_FLTRES
 6

	)
65  
	#FPE_FLTINV
 7

	)
66  
	#FPE_FLTSUB
 8

	)
67  
	#NSIGFPE
 8

	)
73  
	#SEGV_MAPERR
 1

	)
74  
	#SEGV_ACCERR
 2

	)
75  
	#NSIGSEGV
 2

	)
81  
	#BUS_ADRALN
 1

	)
82  
	#BUS_ADRERR
 2

	)
83  
	#BUS_OBJERR
 3

	)
84  
	#NSIGBUS
 3

	)
88 #ifdef 
__˝lu•lus


	@/usr/include/sys/proc.h

8 #i‚de‡
_SYS_PROC_H


9  
	#_SYS_PROC_H


	)
11 #¥agm®
idít
 "@(#)proc.h 1.90 97/09/22 SMI"

13 
	~<sys/time.h
>

15 
	~<sys/thªad.h
>

16 
	~<sys/¸ed.h
>

17 
	~<sys/u£r.h
>

18 
	~<sys/timî.h
>

19 #i‡
deföed
(
i386
Ë|| deföed(
__i386
)

20 
	~<sys/£gmít.h
>

23 #ifdef 
__˝lu•lus


33 
	s¥oc
 {

37 
vnode
 *
p_exec
;

38 
as
 *
p_as
;

39 
∂ock
 *
p_lockp
;

40 
p_∑d
;

41 
kmuãx_t
 
p_¸lock
;

42 
¸ed
 *
p_¸ed
;

46 
p_sw≠˙t
;

47 
p_°©
;

48 
p_wcode
;

49 
p_wd©a
;

50 
pid_t
 
p_µid
;

51 
¥oc
 *
p_lök
;

52 
¥oc
 *
p_∑ª¡
;

53 
¥oc
 *
p_chûd
;

54 
¥oc
 *
p_siblög
;

55 
¥oc
 *
p_psiblög
;

56 
¥oc
 *
p_siblög_ns
;

57 
¥oc
 *
p_chûd_ns
;

58 
¥oc
 *
p_√xt
;

59 
¥oc
 *
p_¥ev
;

60 
¥oc
 *
p_√xtofkö
;

61 
¥oc
 *
p_‹ph™
;

62 
¥oc
 *
p_√xt‹ph
;

63 
¥oc
 *
p_pglök
;

64 
¥oc
 *
p_µglök
;

65 
£ss
 *
p_£s•
;

66 
pid
 *
p_pidp
;

67 
pid
 *
p_pgidp
;

71 
kc⁄dv¨_t
 
p_cv
;

72 
kc⁄dv¨_t
 
p_Êag_cv
;

73 
kc⁄dv¨_t
 
p_lw≥xô
;

74 
kc⁄dv¨_t
 
p_hﬁdlwps
;

76 
kc⁄dv¨_t
 
p_Êock
;

77 
u_sh‹t
 
p_¥w™t
;

78 
u_öt
 
p_Êag
;

80 
˛ock_t
 
p_utime
;

81 
˛ock_t
 
p_°ime
;

82 
˛ock_t
 
p_cutime
;

83 
˛ock_t
 
p_c°ime
;

84 
ˇddr_t
 *
p_£gac˘
;

85 
ˇddr_t
 
p_brkba£
;

86 
u_öt
 
p_brksize
;

90 
k_sig£t_t
 
p_sig
;

91 
k_sig£t_t
 
p_ign‹e
;

92 
k_sig£t_t
 
p_sigöfo
;

93 
sigqueue
 *
p_sigqueue
;

94 
sigqhdr
 *
p_sigqhdr
;

95 
u_ch¨
 
p_°›sig
;

101 
p_fixÆignmít
;

106 
p_lw±ŸÆ
;

107 
p_lwp˙t
;

108 
p_lw¥˙t
;

109 
p_lwpblocked
;

111 
p_zomb˙t
;

112 
kthªad_t
 *
p_éi°
;

113 
kthªad_t
 *
p_zombli°
;

117 
k_sig£t_t
 
p_sigmask
;

118 
k_Êt£t_t
 
p_Êtmask
;

119 
vnode
 *
p_åa˚
;

120 
vnode
 *
p_∂i°
;

122 
¥oc
 *
p_æök
;

123 
kc⁄dv¨_t
 
p_§wch™_cv
;

124 
u_öt
 
p_°ksize
;

128 
hπime_t
 
p_m°¨t
;

129 
hπime_t
 
p_mãrm
;

130 
hπime_t
 
p_mÃól
;

131 
hπime_t
 
p_ac˘
[
NMSTATES
];

132 
Ãußge
 
p_ru
;

133 
ôimîvÆ
 
p_Ωrof_timî
;

134 
p_Ωrof_timîid
;

135 
u_öt
 
p_defun˘
;

140 
kmuãx_t
 
p_pÊock
;

145 
u£r
 
p_u£r
;

150 
kthªad_t
 *
p_£rvî_thªads
;

151 
do‹_node
 *
p_uƒef_li°
;

152 
kc⁄dv¨_t
 
p_£rvî_cv
;

153 
p_uƒef_thªad
;

158 
u_ch¨
 
p_äf_Êags
;

163 
ˇddr_t
 
p_audô_d©a
;

164 
kthªad_t
 *
p_a¶w±p
;

165 #i‡
deföed
(
i386
Ë|| deföed(
__i386
)

169 
kmuãx_t
 
p_ldéock
;

170 
£g_desc
 *
p_ldt
;

171 
£g_desc
 
p_ldt_desc
;

172 
p_ldéimô
;

174 
u_öt
 
p_swrss
;

175 
aio
 *
p_aio
;

176 
timî°r
 *
p_ôimî
;

177 
k_sig£t_t
 
p_nŸifsigs
;

178 
kc⁄dv¨_t
 
p_nŸifcv
;

179 
p_Æ¨mid
;

180 
lwpch™_d©a
 *
p_l˝
;

181 } 
	t¥oc_t
;

183  
	#PROC_T


	)
187 
¥oc_t
 *
¥a˘ive
;

191 
¥oc_t
 *
¥oc_sched
;

192 
¥oc_t
 *
¥oc_öô
;

193 
¥oc_t
 *
¥oc_∑geout
;

194 
¥oc_t
 *
¥oc_fsÊush
;

203 
	supcou¡
 {

204 
upcou¡
 *
	gup_√xt
;

205 
uid_t
 
	gup_uid
;

206 
u_l⁄g
 
	gup_cou¡
;

211 
	spid
 {

212 
	gpid_¥öa˘ive
 :1;

213 
	gpid_pg‹ph™ed
 :1;

214 
	gpid_∑ddög
 :6;

215 
	gpid_¥¶Ÿ
 :24;

216 
pid_t
 
	gpid_id
;

217 
¥oc
 *
	gpid_pglök
;

218 
pid
 *
	gpid_lök
;

219 
u_öt
 
	gpid_ªf
;

222 
¥oc_t
 
p0
;

223 
pid
 
pid0
;

225  
	#p_pgΩ
 
p_pgidp
->
pid_id


	)
226  
	#p_pid
 
p_pidp
->
pid_id


	)
227  
	#p_¶Ÿ
 
p_pidp
->
pid_¥¶Ÿ


	)
228  
	#p_dëached
 
p_pgidp
->
pid_pg‹ph™ed


	)
230  
	#PID_HOLD
(
pidp
) 
	`ASSERT
(
	`MUTEX_HELD
(&
pidlock
)); \

231 ++(
pidp
)->
pid_ªf
;

	)
232  
	#PID_RELE
(
pidp
) 
	`ASSERT
(
	`MUTEX_HELD
(&
pidlock
)); \

233 (
pidp
)->
pid_ªf
 > 1 ? \

234 --(
pidp
)->
pid_ªf
 : 
	`pid_ªÀ
’idp);

	)
240 
	s∂ock
 {

241 
kmuãx_t
 
	g∂_lock
;

243  
	#p_lock
 
p_lockp
->
∂_lock


	)
247  
	#SSLEEP
 1

	)
248  
	#SRUN
 2

	)
249  
	#SZOMB
 3

	)
250  
	#SSTOP
 4

	)
251  
	#SIDL
 5

	)
252  
	#SONPROC
 6

	)
258  
	#SSYS
 0x00000001

	)
259  
	#STRC
 0x00000002

	)
260  
	#SNWAKE
 0x00000004

	)
261  
	#SLOAD
 0x00000008

	)
262  
	#SLOCK
 0x00000010

	)
263  
	#SPREXEC
 0x00000020

	)
264  
	#SPROCTR
 0x00000040

	)
265  
	#SPRFORK
 0x00000080

	)
266  
	#SKILLED
 0x00000100

	)
267  
	#SULOAD
 0x00000200

	)
268  
	#SRUNLCL
 0x00000400

	)
269  
	#SBPTADJ
 0x00000800

	)
270  
	#SKILLCL
 0x00001000

	)
271  
	#SOWEUPC
 0x00002000

	)
272  
	#SEXECED
 0x00004000

	)
273  
	#SPASYNC
 0x00008000

	)
274  
	#SJCTL
 0x00010000

	)
275  
	#SNOWAIT
 0x00020000

	)
276  
	#SVFORK
 0x00040000

	)
277  
	#SVFDONE
 0x00080000

	)
278  
	#EXITLWPS
 0x00100000

	)
279  
	#HOLDLWPS
 0x00200000

	)
280  
	#SWAITSIG
 0x00400000

	)
281  
	#HOLDLWP2
 0x00800000

	)
282  
	#COREDUMP
 0x01000000

	)
283  
	#SMSACCT
 0x02000000

	)
284  
	#ASLWP
 0x04000000

	)
286  
	#SPRLOCK
 0x08000000

	)
287  
	#NOCD
 0x10000000

	)
290  
	#PTOU
(
p
) (&’)->
p_u£r
)

	)
292  
	#åacög
(
p
, 
sig
) (
	`sigismembî
(&’)->
p_sigmask
, sig))

	)
296  
	#ISSIG
(
t
, 
why
) 
	`ISSIG_FAST
—, 
	`âﬁwp
—), 
	`â›roc
—), why)

	)
306  
	#ISSIG_FAST
(
t
, 
lwp
, 
p
, 
why
) \

307 (
	`ISSIG_PENDING
(
t
, 
lwp
, 
p
Ë&& 
	`issig
(
why
))

	)
309  
	#ISSIG_PENDING
(
t
, 
lwp
, 
p
) \

310 ((
lwp
)->
lwp_cursig
 | \

311 (
p
)->
p_sig
.
__sigbôs
[0] | \

312 (
p
)->
p_sig
.
__sigbôs
[1] | \

313 (
t
)->
t_sig
.
__sigbôs
[0] | \

314 (
t
)->
t_sig
.
__sigbôs
[1] | \

315 (
p
)->
p_°›sig
 | \

316 ((
t
)->
t_¥oc_Êag
 & (
TP_PRSTOP
|
TP_HOLDLWP
|
TP_CHKPT
)) | \

317 ((
p
)->
p_Êag
 & (
EXITLWPS
|
SKILLED
|
HOLDLWP2
)))

	)
319  
	#ISSTOP
(
sig
) (
u
.
u_sig«l
[sig-1] =
SIG_DFL
 && \

320 
	`sigismembî
(&
°›deÁu…
, 
sig
))

	)
322  
	#ISHOLD
(
p
) (’)->
p_Êag
 & 
HOLDLWPS
)

	)
326  
	#FORREAL
 0

	)
327  
	#JUSTLOOKING
 1

	)
329 #ifde‡
_KERNEL


333 
ˇddr_t
 
födvaddr
(
¥oc_t
 *);

334 
∑ddr_t
 
vt›
(
ˇddr_t
, 
¥oc_t
 *);

335 
≥xô
();

336 
√w¥oc
((*)(), 
id_t
, );

337 
vfwaô
(
pid_t
);

338 
‰ì¥oc
(
¥oc_t
 *);

339 
£åun
(
kthªad_t
 *);

340 
£åun_locked
(
kthªad_t
 *);

341 
exô
(, );

342 
ªlvm
(
¥oc_t
 *);

343 
add_ns
(
¥oc_t
 *,Öroc_t *);

344 
dñëe_ns
(
¥oc_t
 *,Öroc_t *);

345 
upcou¡_öc
(
uid_t
);

346 
upcou¡_dec
(
uid_t
);

347 
upcou¡_gë
(
uid_t
);

348 #i‡
deföed
(
i386
Ë|| deföed(
__i386
)

349 
ldt_dup
(
¥oc_t
 *,Öroc_t *);

352 
sig˛d
(
¥oc_t
 *);

353 
fsig
(
k_sig£t_t
 *, 
kthªad_t
 *);

354 
psig
();

355 
°›
(
kthªad_t
 *, , );

356 
°›_⁄_Áu…
(
u_öt
, 
k_sigöfo_t
 *);

357 
issig
();

358 
job°›≥d
(
¥oc_t
 *);

359 
psig«l
(
¥oc_t
 *, );

360 
tsig«l
(
kthªad_t
 *, );

361 
sigt›roc
(
¥oc_t
 *, 
kthªad_t
 *, , );

362 
å≠sig
(
k_sigöfo_t
 *, );

363 
ót_sig«l
(
kthªad_t
 *
t
, 
sig
);

365 
pid_£tmö
();

366 
pid_t
 
pid_assign
(
¥oc_t
 *);

367 
pid_ªÀ
(
pid
 *);

368 
pid_exô
(
¥oc_t
 *);

369 
¥oc_íåy_‰ì
(
pid
 *);

370 
¥oc_t
 *
¥föd
(
pid_t
);

371 
¥oc_t
 *
pgföd
(
pid_t
);

372 
pid_öô
();

373 
¥oc_t
 *
pid_íåy
();

374 
pid_¶Ÿ
(
¥oc_t
 *);

375 
sig«l
(
pid_t
, );

376 
¥sig«l
(
pid
 *, );

378 
pgsig«l
(
pid
 *, );

379 
pgjoö
(
¥oc_t
 *, 
pid
 *);

380 
pg¸óã
(
¥oc_t
 *);

381 
pgexô
(
¥oc_t
 *);

382 
pgdëach
(
¥oc_t
 *);

383 
pgmembîs
(
pid_t
);

385 
öô_m°©e
(
kthªad_t
 *, );

386 
√w_m°©e
(
kthªad_t
 *, );

387 
ª°‹e_m°©e
(
kthªad_t
 *);

388 
ãrm_m°©e
(
kthªad_t
 *);

389 
e°im©e_mßc˘
(
kthªad_t
 *, 
hπime_t
);

390 
dißbÀ_mßc˘
(
¥oc_t
 *);

392 
u_sh‹t
 
˝u_deˇy
(u_sh‹t, 
˛ock_t
);

393 
u_sh‹t
 
˝u_grow
(u_sh‹t, 
˛ock_t
);

395 
£t_¥oc_¥e_sys
(
¥oc_t
 *
p
);

396 
£t_¥oc_po°_sys
(
¥oc_t
 *
p
);

397 
£t_¥oc_sys
(
¥oc_t
 *
p
);

398 
£t_¥oc_a°
(
¥oc_t
 *
p
);

399 
£t_Æl_¥oc_sys
();

403 
kthªad_t
 *
thªad_¸óã
(

404 
ˇddr_t
 
°k
,

405 
°ksize
,

406 (*
¥oc
)(),

407 
ˇddr_t
 
¨g
,

408 
Àn
,

409 
¥oc_t
 *
µ
,

410 
°©e
,

411 
¥i
);

412 
thªad_exô
();

413 
thªad_de°roy
(
kthªad_t
 *);

414 
thªad_‰ì
(
kthªad_t
 *);

415 
ª≠î
();

416 
ßve˘x
(
kthªad_t
 *);

417 
ª°‹e˘x
(
kthªad_t
 *);

418 
f‹k˘x
(
kthªad_t
 *, kthread_t *);

419 
‰ì˘x
(
kthªad_t
 *);

420 
kthªad_t
 *
thªad_u≈ö
();

421 
ªÀa£_öãºu±
();

422 
thªad_¸óã_öå
(
˝u
 *);

423 
thªad_öô
();

424 
thªad_lﬂd
(
kthªad_t
 *, (*)(), 
ˇddr_t
, );

426 
tsd_¸óã
(
u_öt
 *, (*)(*));

427 
tsd_de°roy
(
u_öt
 *);

428 *
tsd_gë¸óã
(
u_öt
 *, (*)(*), *(*)());

429 *
tsd_gë
(
u_öt
);

430 
tsd_£t
(
u_öt
, *);

431 
tsd_exô
();

435 
klwp_t
 *
lwp_¸óã
(

436 (*
¥oc
)(),

437 
ˇddr_t
 
¨g
,

438 
Àn
,

439 
¥oc_t
 *
p
,

440 
°©e
,

441 
¥i
,

442 
k_sig£t_t
 
smask
,

443 
cid
);

444 
lwp_exô
();

445 
lwp_su•íd
(
kthªad_t
 *);

446 
lwp_c⁄töue
(
kthªad_t
 *);

447 
hﬁdlwp
();

448 
°›lwp
();

449 
hﬁdlwps
(
¥oc_t
 *, );

450 
pokñwps
(
¥oc_t
 *);

451 
c⁄töuñwps
(
¥oc_t
 *);

452 
exôlwps
(
¥oc_t
 *, );

453 
klwp_t
 *
f‹klwp
(klwp_à*, 
¥oc_t
 *);

454 
sigishñd
(
¥oc_t
 *, );

455 
sigwaôög_check
(
kmuãx_t
 *);

456 
sigwaôög_de¸
();

457 
lwp_lﬂd
(
klwp_t
 *, 
uc⁄ãxt_t
 *);

458 
lwp_£åvÆ
(
klwp_t
 *, , );

459 
lwp_f‹kªgs
(
klwp_t
 *, klwp_t *);

460 
lwp_‰ìªgs
(
klwp_t
 *);

461 
ˇddr_t
 
lwp_°k_öô
(
klwp_t
 *, caddr_t);

467 
sigq‰ì
(
¥oc_t
 *);

468 
sigdeq
(
¥oc_t
 *, 
kthªad_t
 *, , 
sigqueue_t
 **);

469 
sigdñq
(
¥oc_t
 *, 
kthªad_t
 *, );

470 
sigaddq
(
¥oc_t
 *, 
kthªad_t
 *, 
k_sigöfo_t
 *, );

471 
sigaddqa
(
¥oc_t
 *, 
kthªad_t
 *, 
sigqueue_t
 *);

472 
sigdupq
(
¥oc_t
 *,Öroc_t *);

473 
sigqueue_t
 *
sig≠≥nd
(
k_sig£t_t
 *, sigqueue_t *,

474 
k_sig£t_t
 *, 
sigqueue_t
 *);

475 
sigqueue_t
 *
sig¥ïíd
(
k_sig£t_t
 *, sigqueue_t *,

476 
k_sig£t_t
 *, 
sigqueue_t
 *);

477 
wöfo
(
¥oc_t
 *, 
k_sigöfo_t
 *, );

478 
£ndsig
(, 
k_sigöfo_t
 *, (*)());

482 #ifdef 
__˝lu•lus


	@/usr/include/sys/cred.h

31 #i‚de‡
_SYS_CRED_H


32  
	#_SYS_CRED_H


	)
34 #¥agm®
idít
 "@(#)cred.h 1.18 94/12/04 SMI"

36 #ifde‡
_KERNEL


37 
	~<sys/t_lock.h
>

40 #ifdef 
__˝lu•lus


50 
	s¸ed
 {

51 
ul⁄g_t
 
¸_ªf
;

52 
uid_t
 
¸_uid
;

53 
gid_t
 
¸_gid
;

54 
uid_t
 
¸_ruid
;

55 
gid_t
 
¸_rgid
;

56 
uid_t
 
¸_suid
;

57 
gid_t
 
¸_sgid
;

58 
ul⁄g_t
 
¸_ngroups
;

59 
gid_t
 
¸_groups
[1];

60 } 
	t¸ed_t
;

62 #ifde‡
_KERNEL


64  
	#¸hﬁd
(
¸
) 
	`muãx_íãr
(&
¸_lock
), (¸)->
¸_ªf
++, \

65 
	`muãx_exô
(&
¸_lock
)

	)
67  
	#CRED
() 
cuπhªad
->
t_¸ed


	)
69 
¥oc
;

71 
ngroups_max
;

72 
kmuãx_t
 
¸_lock
;

76 
¸ed
 *
k¸ed
;

78 
¸ed_öô
();

79 
¸‰ì
(
¸ed_t
 *);

80 
¸ed_t
 *
¸gë
();

81 
¸ed_t
 *
¸c›y
(cred_t *);

82 
¸ed_t
 *
¸dup
(cred_t *);

83 
¸ed_t
 *
¸gë¸ed
();

84 
¸£t
(
¥oc
 *, 
¸ed_t
 *);

85 
su£r
(
¸ed_t
 *);

86 
groupmembî
(
gid_t
, 
¸ed_t
 *);

87 
ha•ro˝îm
(
¸ed_t
 *, cred_t *);

88 
¸cmp
(
¸ed_t
 *, cred_t *);

92 #ifdef 
__˝lu•lus


	@/usr/include/sys/thread.h

5 #i‚def 
_SYS_THREAD_H


6  
	#_SYS_THREAD_H


	)
8 #¥agm®
idít
 "@(#)thread.h 1.66 95/11/29 SMI"

10 
	~<sys/ty≥s.h
>

11 
	~<sys/t_lock.h
>

12 
	~<sys/˛ass.h
>

13 
	~<sys/klwp.h
>

14 
	~<sys/púec.h
>

15 
	~<sys/¶ìpq.h
>

16 
	~<sys/tu∫°ûe.h
>

18 #ifdef 
__˝lu•lus


31  
	#TS_FREE
 0x00

	)
32  
	#TS_SLEEP
 0x01

	)
33  
	#TS_RUN
 0x02

	)
34  
	#TS_ONPROC
 0x04

	)
35  
	#TS_ZOMB
 0x08

	)
36  
	#TS_STOPPED
 0x10

	)
38 
	s˘x›
 {

39 (*
ßve_›
)();

40 (*
ª°‹e_›
)();

41 (*
f‹k_›
)();

42 (*
‰ì_›
)();

43 
¨g
;

44 
˘x›
 *
√xt
;

45 } 
	t˘x›_t
;

47 
_kthªad
 * 
	tkthªad_id_t
;

49 
	s_kthªad
 {

50 
_kthªad
 *
t_lök
;

52 
ˇddr_t
 
t_°k
;

53 (*
t_°¨çc
)();

54 
˝u
 *
t_bound_˝u
;

55 
t_afföôy˙t
;

56 
t_böd_˝u
;

57 
u_sh‹t
 
t_Êag
;

58 
u_sh‹t
 
t_¥oc_Êag
;

59 
u_ch¨
 
t_schedÊag
;

60 vﬁ©ûê
t_¥e_sys
;

61 
t_¥ìm±
;

62 
u_öt
 
t_°©e
;

63 
¥i_t
 
t_¥i
;

64 
¥i_t
 
t_ïri
;

65 
œbñ_t
 
t_pcb
;

67 
t_wch™0
;

68 
ˇddr_t
 
t_wch™
;

69 
_sobj_›s
 *
t_sobj_›s
;

70 
id_t
 
t_cid
;

71 
thªad_›s
 *
t_˛funcs
;

72 *
t_˛d©a
;

73 
˘x›_t
 *
t_˘x
;

74 
u_öt
 
t_loÁu…
;

75 
œbñ_t
 *
t_⁄Áu…
;

76 
œbñ_t
 *
t_noÁu…
;

77 
ˇddr_t
 
t_sw≠
;

78 
lock_t
 
t_lock
;

79 
kc⁄dv¨_t
 
t_dñay_cv
;

80 
˝u
 *
t_˝u
;

81 
_kthªad
 *
t_öå
;

82 
u_öt
 
t_did
;

83 
ˇddr_t
 
t_äf_çdp
;

88 
u_öt
 
t_tid
;

89 
t_Æ¨mid
;

90 
ôimîvÆ
 
t_ªÆôimî
;

91 
t_ôimîid
;

92 
sigqueue
 *
t_sigqueue
;

93 
k_sig£t_t
 
t_sig
;

94 
k_sig£t_t
 
t_hﬁd
;

95 
_kthªad
 *
t_f‹w
;

96 
_kthªad
 *
t_back
;

97 
klwp_t
 *
t_lwp
;

98 
¥oc
 *
t_¥o˝
;

99 
ˇddr_t
 
t_audô_d©a
;

100 
_kthªad
 *
t_√xt
;

101 
_kthªad
 *
t_¥ev
;

102 
vnode
 *
t_åa˚
;

103 
u_sh‹t
 
t_why°›
;

104 
u_sh‹t
 
t_wh©°›
;

105 
t_sy¢um
;

107 
pﬁl°©e
 *
t_pﬁl°©e
;

108 
¸ed
 *
t_¸ed
;

109 
˛ock_t
 
t_lbﬁt
;

110 
u_sh‹t
 
t_p˘˝u
;

118 
di•_lock_t
 *
t_lockp
;

119 
t_ﬁd•l
;

120 
_di•
 *
t_di•_queue
;

121 
˛ock_t
 
t_di•_time
;

122 
u_öt
 
t_k¥i_ªq
;

139 
	u
{

140 
	s
{

141 vﬁ©ûê
_t_a°Êag
;

142 vﬁ©ûê
_t_sig_check
;

143 vﬁ©ûê
_t_po°_sys
;

144 vﬁ©ûê
_t_å≠ªt
;

145 } 
_ts
;

146 vﬁ©ûê
_t_po°_sys_a°
;

147 } 
_tu
;

148  
	#t_a°Êag
 
_tu
.
_ts
.
_t_a°Êag


	)
149  
	#t_sig_check
 
_tu
.
_ts
.
_t_sig_check


	)
150  
	#t_po°_sys
 
_tu
.
_ts
.
_t_po°_sys


	)
151  
	#t_å≠ªt
 
_tu
.
_ts
.
_t_å≠ªt


	)
152  
	#t_po°_sys_a°
 
_tu
.
_t_po°_sys_a°


	)
158 
hπime_t
 
t_waôrq
;

159 
t_m°©e
;

160 
	sΩrof
 {

161 
Ω_™y°©e
;

162 
u_l⁄g
 
Ω_°©e
[
NMSTATES
];

163 } *
t_Ωrof
;

171 
púec_t
 *
t_¥ioöv
;

178 
tu∫°ûe_t
 *
t_ts
;

184 
u_öt
 
t_mmu˘x
;

191 
	stsd_thªad
 {

192 
tsd_thªad
 *
ts_√xt
;

193 
tsd_thªad
 *
ts_¥ev
;

194 
u_öt
 
ts_nkeys
;

195 **
ts_vÆue
;

196 } *
t_tsd
;

198 #ifde‡
__DOS_EMUL


203 
ˇddr_t
 
t_v86d©a
;

205 
˛ock_t
 
t_°ime
;

206 
do‹_d©a
 *
t_do‹
;

207 
kmuãx_t
 *
t_∂ockp
;

208 } 
	tkthªad_t
;

221  
	#T_INTR_THREAD
 0x0001

	)
222  
	#T_WAKEABLE
 0x0002

	)
223  
	#T_TOMASK
 0x0004

	)
224  
	#T_TALLOCSTK
 0x0008

	)
225  
	#T_LWPZOMB
 0x0010

	)
226  
	#T_WOULDBLOCK
 0x0020

	)
227  
	#T_DONTBLOCK
 0x0040

	)
228  
	#T_DONTPEND
 0x0080

	)
229  
	#T_SYS_PROF
 0x0100

	)
230  
	#T_WAITCVSEM
 0x0200

	)
237  
	#TP_WAITFOR
 0x01

	)
238  
	#TP_HOLDLWP
 0x02

	)
239  
	#TP_TWAIT
 0x04

	)
240  
	#TP_LWPEXIT
 0x08

	)
241  
	#TP_PRSTOP
 0x10

	)
242  
	#TP_CHKPT
 0x20

	)
243  
	#TP_EXITLWP
 0x40

	)
244  
	#TP_PRVSTOP
 0x80

	)
245  
	#TP_MSACCT
 0x100

	)
246  
	#TP_STOPPING
 0x200

	)
252  
	#TS_LOAD
 0x01

	)
253  
	#TS_CSTART
 0x02

	)
254  
	#TS_XSTART
 0x04

	)
255  
	#TS_PSTART
 0x08

	)
256  
	#TS_DONT_SWAP
 0x10

	)
257  
	#TS_RESUME
 0x20

	)
258  
	#TS_SWAPENQ
 0x40

	)
259  
	#TS_ON_SWAPQ
 0x80

	)
260  
	#TS_ALLSTART
 (
TS_CSTART
 | 
TS_XSTART
 | 
TS_PSTART
 | 
TS_RESUME
)

	)
265  
	#a°⁄
(
t
) (—)->
t_a°Êag
 = 1)

	)
266  
	#a°off
(
t
) (—)->
t_a°Êag
 = 0)

	)
269  
	#ISTOPPED
(
t
Ë(—)->
t_°©e
 =
TS_STOPPED
 && \

270 !((
t
)->
t_schedÊag
 & 
TS_PSTART
))

	)
273  
	#CPR_ISTOPPED
(
t
Ë(—)->
t_°©e
 =
TS_STOPPED
 && \

274 !((
t
)->
t_schedÊag
 & 
TS_RESUME
))

	)
280  
	#VSTOPPED
(
t
) (—)->
t_¥oc_Êag
 & 
TP_PRVSTOP
)

	)
283  
	#CPR_VSTOPPED
(
t
) \

284 ((
t
)->
t_°©e
 =
TS_SLEEP
 && \

285 (
t
)->
t_wch™0
 && \

286 ((
t
)->
t_Êag
 & 
T_WAKEABLE
) && \

287 ((
t
)->
t_¥oc_Êag
 & 
TP_CHKPT
))

	)
290  
	#SUSPENDED
(
t
Ë(—)->
t_°©e
 =
TS_STOPPED
 && \

291 !((
t
)->
t_schedÊag
 & 
TS_CSTART
))

	)
294  
	#INHERITED
(
t
) (—)->
t_ïri
 !0)

	)
297  
	#DISP_PRIO
(
t
Ë(
	`INHERITED
—Ë? (t)->
t_ïri
 : (t)->
t_¥i
)

	)
300  
	#ASSIGNED_PRIO
(
t
) (—)->
t_¥i
)

	)
306  
	#SWAP_OK
(
t
) (!
	`LOCK_HELD
(&—)->
t_lock
))

	)
329  
	#¥o˘Ÿ
(
x
) ((x)->
p_éi°
)

	)
330  
	#¥o˘ﬁwp
(
x
) ((x)->
p_éi°
->
t_lwp
)

	)
331  
	#âﬁwp
(
x
) ((x)->
t_lwp
)

	)
332  
	#â›roc
(
x
) ((x)->
t_¥o˝
)

	)
333  
	#lw±Ÿ
(
x
) ((x)->
lwp_thªad
)

	)
334  
	#lw±›roc
(
x
) ((x)->
lwp_¥o˝
)

	)
336  
	#t_pc
 
t_pcb
.
vÆ
[0]

	)
337  
	#t_•
 
t_pcb
.
vÆ
[1]

	)
339  
	#LWPCHAN
(
t
) ((
quad
 *)(&(—)->
t_wch™0
)))

	)
341 
kthªad_id_t
 
thªadp
();

342  
	#cuπhªad
 (
	`thªadp
())

	)
343  
	#cuΩroc
 (
	`â›roc
(
cuπhªad
))

	)
345 
_kthªad
 
t0
;

346 
kmuãx_t
 
pidlock
;

352 
kmuãx_t
 
thªad_‰ì_lock
;

354 
kthªad_t
 *
idtŸ
();

361 
thªad_å™sôi⁄
(
kthªad_id_t
);

362 
thªad_lock
(
kthªad_id_t
);

363 
thªad_lock_high
(
kthªad_id_t
);

364 
thªad_⁄¥oc
(
kthªad_id_t
, 
˝u
 *);

366  
	#thªad_u∆ock
(
t
) 
	`di•_lock_exô
(—)->
t_lockp
)

	)
367  
	#thªad_u∆ock_high
(
t
) 
	`di•_lock_exô_high
(—)->
t_lockp
)

	)
368  
	#thªad_u∆ock_n›ªem±
(
t
) 
	`di•_lock_exô_n›ªem±
(—)->
t_lockp
)

	)
370  
	#THREAD_LOCK_HELD
(
t
) (
	`DISP_LOCK_HELD
(—)->
t_lockp
))

	)
372 
di•_lock_t
 
å™sôi⁄_lock
;

373 
di•_lock_t
 
°›_lock
;

375 
ˇddr_t
 
thªad_°k_öô
(caddr_t);

383  
	#THREAD_KPRI_REQUEST
() (
cuπhªad
->
t_k¥i_ªq
++)

	)
384  
	#THREAD_KPRI_RELEASE
() (
cuπhªad
->
t_k¥i_ªq
--)

	)
385  
	#THREAD_KPRI_RELEASE_N
(
n
Ë(
cuπhªad
->
t_k¥i_ªq
 -“))

	)
390  
	#THREAD_SET_STATE
(
ç
, 
°©e
, 
Õ
) \

391 ((
ç
)->
t_°©e
 = 
°©e
, (ç)->
t_lockp
 = 
Õ
)

	)
397  
	#THREAD_TRANSITION
(
ç
Ë 
	`thªad_å™sôi⁄
—p);

	)
402  
	#THREAD_TRANSITION_NOLOCK
(
ç
Ë (—p)->
t_lockp
 = &
å™sôi⁄_lock
)

	)
408  
	#THREAD_RUN
(
ç
, 
Õ
) 
	`THREAD_SET_STATE
—p, 
TS_RUN
,Üp)

	)
414  
	#THREAD_SWAP
(
ç
, 
Õ
) 
	`THREAD_SET_STATE
—p, 
TS_RUN
,Üp)

	)
422  
	#THREAD_STOP
(
ç
) \

423 { 
di•_lock_t
 *
Õ
 = (
ç
)->
t_lockp
; \

424 
	`THREAD_SET_STATE
(
ç
, 
TS_STOPPED
, &
°›_lock
); \

425 
	`di•_lock_exô
(
Õ
); \

426 }

	)
432  
	#THREAD_ZOMB
(
ç
) 
	`THREAD_SET_STATE
—p, 
TS_ZOMB
, 
NULL
)

	)
439  
	#THREAD_ONPROC
(
ç
, 
˝u
) \

440 
	`THREAD_SET_STATE
(
ç
, 
TS_ONPROC
, &(
˝u
)->
˝u_thªad_lock
)

	)
446  
	#THREAD_SLEEP
(
ç
, 
Õ
) { \

447 
di•_lock_t
 *
ép
; \

448 
ép
 = (
ç
)->
t_lockp
; \

449 
	`THREAD_SET_STATE
(
ç
, 
TS_SLEEP
, 
Õ
); \

450 
	`di•_lock_exô_high
(
ép
); \

451 }

	)
453 #ifdef 
__˝lu•lus


	@/usr/include/sys/timer.h

5 #i‚def 
_SYS_TIMER_H


6  
	#_SYS_TIMER_H


	)
8 #¥agm®
idít
 "@(#)timer.h 1.12 94/12/06 SMI"

10 
	~<sys/ty≥s.h
>

11 
	~<sys/¥oc.h
>

12 
	~<sys/thªad.h
>

14 #ifdef 
__˝lu•lus


18 #ifdef 
_KERNEL


20  
	#_TIMER_MAX
 32

	)
22  
	#timî•ecis£t
(
tvp
) (—vp)->
tv_£c
 || (tvp)->
tv_n£c
)

	)
23  
	#timî•eccmp
(
tvp
, 
uvp
) ((—vp)->
tv_£c
 - (uvp)->tv_sec) ? \

24 ((
tvp
)->
tv_£c
 - (
uvp
)->tv_£c):(—vp)->
tv_n£c
 - (uvp)->tv_n£c))

	)
25  
	#timî•ec˛ór
(
tvp
) (—vp)->
tv_£c
 = (tvp)->
tv_n£c
 = 0)

	)
31 
	stimî°r
 {

32 
ås_Êags
;

33 
˛ockid_t
 
ås_˛ock_id
;

34 
ôimî•ec_t
 
ås_ôimî
;

35 
sigqueue
 *
ås_sigqp
;

36 
ås_ˇŒout_id
;

37 
ås_ovîrun1
;

38 
ås_ovîrun2
;

39 
	u
{

40 
klwp_t
 *
ås_u∆wp
;

41 
¥oc
 *
ås_u≈roc
;

42 } 
ås_un
;

43 } 
	ttimî°r_t
;

45  
	#TRS_INUSE
 0x1

	)
46  
	#TRS_PERLWP
 0x2

	)
47  
	#TRS_SIGNAL
 0x4

	)
48  
	#TRS_PENDING
 0x8

	)
50  
	#ås_lwp
 
ås_un
.
ås_u∆wp


	)
51  
	#ås_¥oc
 
ås_un
.
ås_u≈roc


	)
53 #ifdef 
__STDC__


54 
timî_func
(
sigqueue_t
 *);

55 
timî_exô
();

56 
timî_lw≥xô
();

57 
hzto
(
timevÆ
 *);

58 
time•e˘ohz
(
time•ec_t
 *,Åimespec_t);

59 
ôimî•ecfix
(
time•ec_t
 *);

60 
time•eˇdd
(
time•ec_t
 *,Åimespec_t *);

61 
time•ecsub
(
time•ec_t
 *,Åimespec_t *);

62 
time•ecfix
(
time•ec_t
 *);

64 
timî_func
();

65 
timî_exô
();

66 
timî_lw≥xô
();

67 
hzto
();

68 
time•e˘ohz
();

69 
ôimî•ecfix
();

70 
time•eˇdd
();

71 
time•ecsub
();

72 
time•ecfix
();

77 #ifdef 
__˝lu•lus


	@/usr/include/sys/user.h

8 #i‚de‡
_SYS_USER_H


9  
	#_SYS_USER_H


	)
11 #¥agm®
idít
 "@(#)user.h 1.35 96/01/29 SMI"

13 
	~<sys/ty≥s.h
>

14 
	~<sys/sig«l.h
>

16 #ifdef 
__˝lu•lus


24 
	sexd©a
 {

25 
vnode
 *
vp
;

26 
size_t
 
ux_tsize
;

27 
size_t
 
ux_dsize
;

28 
size_t
 
ux_bsize
;

29 
size_t
 
ux_lsize
;

30 
ux_nshlibs
;

31 
ux_mach
;

32 
ux_mag
;

33 
off_t
 
ux_toff£t
;

34 
off_t
 
ux_doff£t
;

35 
off_t
 
ux_loff£t
;

36 
ˇddr_t
 
ux_txt‹g
;

37 
ˇddr_t
 
ux_d©‹g
;

38 
ˇddr_t
 
ux_íéoc
;

41 #ifdef 
__˝lu•lus


45 #i‡
deföed
(
_KERNEL
Ë|| deföed(
_KMEMUSER
)

47 
	~<sys/∑øm.h
>

48 
	~<sys/pcb.h
>

49 
	~<sys/sigöfo.h
>

50 
	~<sys/ªsour˚.h
>

51 
	~<sys/time.h
>

52 
	~<sys/auxv.h
>

53 
	~<sys/î∫o.h
>

54 
	~<sys/t_lock.h
>

56 #ifdef 
__˝lu•lus


71  
	#NFPCHUNK
 24

	)
73 
	suf_íåy
 {

74 
fûe
 *
uf_ofûe
;

75 
uf_pofûe
;

76 
uf_ªf˙t
;

78 
uf_íåy
 
	tuf_íåy_t
;

80  
	#PSARGSZ
 80

	)
82  
	#PSCOMSIZ
 14

	)
84  
	#SYSMASKLEN
 7

	)
86  
	#MAXCOMLEN
 16

	)
88 
	s
{

89 
w‹d
[
SYSMASKLEN
];

90 } 
	tk_sys£t_t
;

92 
	su£r
 {

96 
u_execid
;

97 
u_execsz
;

98 
uöt
 
u_tsize
;

99 
uöt
 
u_dsize
;

100 
time_t
 
u_°¨t
;

101 
˛ock_t
 
u_ticks
;

102 
kc⁄dv¨_t
 
u_cv
;

106 
exd©a
 
u_exd©a
;

107 
auxv_t
 
u_auxv
[
NUM_AUX_VECTORS
];

108 
u_pßrgs
[
PSARGSZ
];

109 
u_comm
[
MAXCOMLEN
 + 1];

113 
u_¨gc
;

114 **
u_¨gv
;

115 **
u_ívp
;

119 
vnode
 *
u_cdú
;

120 
vnode
 *
u_rdú
;

121 
vnode
 *
u_âyvp
;

122 
mode_t
 
u_cmask
;

123 
u_mem
;

124 
u_sy°øp
;

131 
o_pid_t
 *
u_âyp
;

132 
o_dev_t
 
u_âyd
;

138 
k_sys£t_t
 
u_íåymask
;

139 
k_sys£t_t
 
u_exômask
;

140 
k_sig£t_t
 
u_signode„r
;

141 
k_sig£t_t
 
u_sig⁄°ack
;

142 
k_sig£t_t
 
u_sigª£th™d
;

143 
k_sig£t_t
 
u_sigª°¨t
;

144 
k_sig£t_t
 
u_sigmask
[
MAXSIG
];

145 (*
u_sig«l
[
MAXSIG
])();

150 
u_nshm£g
;

151 
u_acÊag
;

159 
æimô
 
u_æimô
[
RLIM_NLIMITS
];

161 
kmuãx_t
 
u_Êock
;

162 
u_nofûes
;

163 
uf_íåy
 *
u_Êi°
;

164 #i‡
deföed
(
i386
Ë|| deföed(
__i386
)

165 (*
u_sigªtu∫
)();

167 **
u_auxvp
;

168 } 
	tu£r_t
;

170 
	~<sys/¥oc.h
>

172 #ifdef 
_KERNEL


173 #ifdef 
sun


174  
	#u
 (
cuΩroc
->
p_u£r
)

	)
177 #ifdef 
_KERNEL


178 #i‡
deföed
(
__STDC__
)

179 
addupc
((*)(), 
¥of
 *, );

181 
addupc
();

185 #ifdef 
__˝lu•lus


206 
	~<sys/ªg£t.h
>

208 #ifdef 
__˝lu•lus


212  
	#PSARGSZ
 80

	)
214 
	su£r
 {

215 
gªg£t_t
 
u_ªg
;

216 
gªg_t
 * 
u_¨0
;

217 
u_pßrgs
[
PSARGSZ
];

218 (*
u_sig«l
[
MAXSIG
])();

219 
u_code
;

220 
ˇddr_t
 
u_addr
;

221 } 
	tu£r_t
;

223 #ifdef 
__˝lu•lus


	@/usr/include/sys/auxv.h

8 #i‚def 
_SYS_AUXV_H


9  
	#_SYS_AUXV_H


	)
11 #¥agm®
idít
 "@(#)auxv.h 1.17 96/01/29 SMI"

13 #ifdef 
__˝lu•lus


17 #i‡!
deföed
(
_ASM
)

19 
	s
{

20 
a_ty≥
;

21 
	u
{

22 
a_vÆ
;

23 #ifde‡
__STDC__


24 *
a_±r
;

26 *
a_±r
;

28 (*
a_f˙
)();

29 } 
a_un
;

30 } 
	tauxv_t
;

33  
	#AT_NULL
 0

	)
34  
	#AT_IGNORE
 1

	)
35  
	#AT_EXECFD
 2

	)
36  
	#AT_PHDR
 3

	)
37  
	#AT_PHENT
 4

	)
38  
	#AT_PHNUM
 5

	)
39  
	#AT_PAGESZ
 6

	)
40  
	#AT_BASE
 7

	)
41  
	#AT_FLAGS
 8

	)
42  
	#AT_ENTRY
 9

	)
43  
	#AT_DCACHEBSIZE
 10

	)
44  
	#AT_ICACHEBSIZE
 11

	)
45  
	#AT_UCACHEBSIZE
 12

	)
47  
	#AT_SUN_UID
 2000

	)
48  
	#AT_SUN_RUID
 2001

	)
49  
	#AT_SUN_GID
 2002

	)
50  
	#AT_SUN_RGID
 2003

	)
55  
	#AT_SUN_LDELF
 2004

	)
56  
	#AT_SUN_LDSHDR
 2005

	)
57  
	#AT_SUN_LDNAME
 2006

	)
58  
	#AT_SUN_LPAGESZ
 2007

	)
64  
	#AT_SUN_PLATFORM
 2008

	)
69  
	#AT_SUN_HWCAP
 2009

	)
71 #i‡
deföed
(
_KERNEL
)

72 
auxv_hwˇp
;

73 
kauxv_hwˇp
;

80  
	#AT_SUN_IFLUSH
 2010

	)
87 #i‚de‡
__µc


88  
	#NUM_GEN_VECTORS
 8

	)
90  
	#NUM_GEN_VECTORS
 12

	)
93  
	#NUM_SUN_VECTORS
 10

	)
95  
	#NUM_AUX_VECTORS
 (
NUM_GEN_VECTORS
 + 
NUM_SUN_VECTORS
Ë

	)
97 #ifdef 
__˝lu•lus


	@/usr/include/sys/class.h

8 #i‚de‡
_SYS_CLASS_H


9  
	#_SYS_CLASS_H


	)
11 #¥agm®
idít
 "@(#)class.h 1.29 97/05/28 SMI"

13 
	~<sys/t_lock.h
>

15 #ifdef 
__˝lu•lus


29 
	ss˛ass
 {

30 *
˛_«me
;

31 (*
˛_öô
)();

32 
˛assfuncs
 *
˛_funcs
;

33 
krwlock_t
 *
˛_lock
;

34 
˛_cou¡
;

35 
size_t
 
˛_size
;

36 } 
	ts˛ass_t
;

38  
	#STATIC_SCHED
 (
krwlock_t
 *)0xffffffff

	)
39  
	#LOADABLE_SCHED
(
s
) ((s)->
˛_lock
 !
STATIC_SCHED
)

	)
40  
	#SCHED_INSTALLED
(
s
) ((s)->
˛_funcs
 !
NULL
)

	)
41  
	#ALLOCATED_SCHED
(
s
) ((s)->
˛_lock
 !
NULL
)

	)
43 #ifdef 
_KERNEL


44 
n˛ass
;

45 *
öô˛ass
;

46 *
deÁu…˛ass
;

47 *
exåa˛ass
;

48 
s˛ass
 sclass[];

56 
	s˛assfuncs
 {

57 
	s˛ass_›s
 {

58 (*
	g˛_admö
)();

59 (*
	g˛_gë˛öfo
)();

60 (*
	g˛_∑rmsö
)();

61 (*
	g˛_∑rmsout
)();

62 } 
	gs˛ass
;

63 
	sthªad_›s
 {

64 (*
	g˛_íãr˛ass
)();

65 (*
	g˛_exô˛ass
)();

66 (*
	g˛_f‹k
)();

67 (*
	g˛_f‹kªt
)();

68 (*
	g˛_∑rmsgë
)();

69 (*
	g˛_∑rms£t
)();

70 (*
	g˛_°›
)();

71 
¥i_t
 (*
˛_sw≠ö
)();

72 
¥i_t
 (*
˛_sw≠out
)();

73 (*
	g˛_å≠ªt
)();

74 (*
	g˛_¥ìm±
)();

75 (*
	g˛_£åun
)();

76 (*
	g˛_¶ìp
)();

77 (*
	g˛_tick
)();

78 (*
	g˛_wakeup
)();

79 (*
	g˛_d⁄i˚
)();

80 
¥i_t
 (*
˛_glob¥i
)();

81 (*
	g˛_£t_¥o˚ss_group
)(
pid_t
 
	gsid
, \

82 
pid_t
 
	gbg_pgid
,Öid_à
	gfg_pgid
);

83 } 
	gthªad
;

84 } 
	t˛assfuncs_t
;

86  
	#CL_ADMIN
(
˛p
, 
uaddr
, 
ªqp¸edp
) \

87 (*(
˛p
)->
˛_funcs
->
s˛ass
.
˛_admö
)(
uaddr
, 
ªqp¸edp
)

	)
89  
	#CL_ENTERCLASS
(
t
, 
cid
, 
˛∑rm•
, 
¸edp
, 
buÂ
) \

90 (
s˛ass
[
cid
].
˛_funcs
->
thªad
.
˛_íãr˛ass
Ë(
t
, cid, 
˛∑rm•
, \

91 
¸edp
, 
buÂ
)

	)
93  
	#CL_EXITCLASS
(
cid
, 
˛¥o˝
)\

94 (
s˛ass
[
cid
].
˛_funcs
->
thªad
.
˛_exô˛ass
Ë(
˛¥o˝
)

	)
96  
	#CL_FORK
(
ç
, 
˘p
, 
buÂ
) \

97 (*(
ç
)->
t_˛funcs
->
˛_f‹k
Ë—p, 
˘p
, 
buÂ
)

	)
99  
	#CL_FORKRET
(
t
, 
˘
Ë(*—)->
t_˛funcs
->
˛_f‹kªt
)—, ct)

	)
101  
	#CL_GETCLINFO
(
˛p
, 
˛öf›
) \

102 (*(
˛p
)->
˛_funcs
->
s˛ass
.
˛_gë˛öfo
)(
˛öf›
)

	)
104  
	#CL_PARMSGET
(
t
, 
˛∑rm•
) \

105 (*(
t
)->
t_˛funcs
->
˛_∑rmsgë
)—->
t_˛d©a
, 
˛∑rm•
)

	)
107  
	#CL_PARMSIN
(
˛p
, 
˛∑rm•
, 
cuΩcid
, 
cuΩ¸edp
, 
çcid
, 
ç¸edp
, 
ç˛µ
) \

108 (
˛p
)->
˛_funcs
->
s˛ass
.
	`˛_∑rmsö
(
˛∑rm•
, 
cuΩcid
, 
cuΩ¸edp
, \

109 
çcid
, 
ç¸edp
, 
ç˛µ
)

	)
111  
	#CL_PARMSOUT
(
˛p
, 
˛∑rm•
, 
cuΩcid
, 
cuΩ¸edp
, 
çcid
, 
ç¸edp
, 
ç˛µ
) \

112 (
˛p
)->
˛_funcs
->
s˛ass
.
	`˛_∑rmsout
(
˛∑rm•
, 
cuΩcid
, 
cuΩ¸edp
, \

113 
çcid
, 
ç¸edp
, 
ç˛µ
)

	)
115  
	#CL_PARMSSET
(
t
, 
˛∑rm•
, 
cid
, 
cuΩ¸edp
) \

116 (*(
t
)->
t_˛funcs
->
˛_∑rms£t
)(
˛∑rm•
,Å->
t_˛d©a
, 
cid
, 
cuΩ¸edp
)

	)
118  
	#CL_PREEMPT
(
ç
Ë(*—p)->
t_˛funcs
->
˛_¥ìm±
)—p)

	)
120  
	#CL_SETRUN
(
ç
Ë(*—p)->
t_˛funcs
->
˛_£åun
)—p)

	)
122  
	#CL_SLEEP
(
ç
, 
di•
) \

123 (*(
ç
)->
t_˛funcs
->
˛_¶ìp
)—p, 
di•
)

	)
125  
	#CL_STOP
(
t
, 
why
, 
wh©
) \

126 (*(
t
)->
t_˛funcs
->
˛_°›
)—, 
why
, 
wh©
)

	)
128  
	#CL_SWAPIN
(
t
, 
Êags
) \

129 (*(
t
)->
t_˛funcs
->
˛_sw≠ö
)—, 
Êags
)

	)
131  
	#CL_SWAPOUT
(
t
, 
Êags
) \

132 (*(
t
)->
t_˛funcs
->
˛_sw≠out
)—, 
Êags
)

	)
134  
	#CL_TICK
(
t
Ë(*—)->
t_˛funcs
->
˛_tick
)—)

	)
136  
	#CL_TRAPRET
(
t
Ë(*—)->
t_˛funcs
->
˛_å≠ªt
)—)

	)
138  
	#CL_WAKEUP
(
t
Ë(*—)->
t_˛funcs
->
˛_wakeup
)—)

	)
140  
	#CL_DONICE
(
t
, 
¸
, 
öc
, 
ªt
Ë(*—)->
t_˛funcs
->
˛_d⁄i˚
)—, cr, inc,Ñë)

	)
142  
	#CL_GLOBPRI
(
t
Ë(*—)->
t_˛funcs
->
˛_glob¥i
)—->
t_˛d©a
)

	)
144  
	#CL_SET_PROCESS_GROUP
(
t
, 
s
, 
b
, 
f
) \

145 (*(
t
)->
t_˛funcs
->
˛_£t_¥o˚ss_group
)(
s
, 
b
, 
f
)

	)
147 #ifdef 
__˝lu•lus


	@/usr/include/sys/klwp.h

5 #i‚def 
_SYS_KLWP_H


6  
	#_SYS_KLWP_H


	)
8 #¥agm®
idít
 "@(#)klwp.h 1.21 95/02/17 SMI"

10 
	~<sys/ty≥s.h
>

11 
	~<sys/c⁄dv¨.h
>

12 
	~<sys/thªad.h
>

13 
	~<sys/sig«l.h
>

14 
	~<sys/sigöfo.h
>

15 
	~<sys/pcb.h
>

16 
	~<sys/time.h
>

17 
	~<sys/mßc˘.h
>

18 
	~<sys/uc⁄ãxt.h
>

19 
	~<sys/lwp.h
>

21 #i‡(
deföed
(
_KERNEL
Ë|| deföed(
_KMEMUSER
)Ë&& deföed(
_MACHDEP
)

22 
	~<sys/mach∑øm.h
>

25 #ifdef 
__˝lu•lus


34  
	#MAXSYSARGS
 8

	)
37  
	#NORMALRETURN
 0

	)
38  
	#JUSTRETURN
 1

	)
39  
	#RESTARTSYS
 2

	)
44 
	sÃußge
 {

45 
u_l⁄g
 
möÊt
;

46 
u_l⁄g
 
majÊt
;

47 
u_l⁄g
 
nsw≠
;

48 
u_l⁄g
 
öblock
;

49 
u_l⁄g
 
oublock
;

50 
u_l⁄g
 
msg¢d
;

51 
u_l⁄g
 
msgrcv
;

52 
u_l⁄g
 
nsig«ls
;

53 
u_l⁄g
 
nvcsw
;

54 
u_l⁄g
 
nivcsw
;

55 
u_l⁄g
 
sysc
;

56 
u_l⁄g
 
ioch
;

59 
_klwp
 *
	tklwp_id_t
;

61 
	s_klwp
 {

65 
pcb
 
lwp_pcb
;

66 
uc⁄ãxt
 *
lwp_ﬁdc⁄ãxt
;

71 *
lwp_≠
;

72 
lwp_î∫o
;

76 
lwp_îr‹
;

77 
lwp_eosys
;

78 
lwp_¨gßved
;

79 
lwp_¨g
[
MAXSYSARGS
];

80 *
lwp_ªgs
;

81 *
lwp_Âu
;

82 
œbñ_t
 
lwp_qßv
;

87 
u_ch¨
 
lwp_cursig
;

88 
u_ch¨
 
lwp_curÊt
;

89 
u_ch¨
 
lwp_syßb‹t
;

90 
u_ch¨
 
lwp_a¶ìp
;

91 
°ack_t
 
lwp_sigÆt°ack
;

92 
sigqueue
 *
lwp_curöfo
;

93 
k_sigöfo_t
 
lwp_sigöfo
;

94 
k_sig£t_t
 
lwp_sigﬁdmask
;

100 
	s¥of
 {

101 *
¥_ba£
;

102 
¥_size
;

103 
¥_off
;

104 
¥_sˇÀ
;

105 } 
lwp_¥of
;

106 
˛ock_t
 
lwp_sˇŒ_°¨t
;

118 
	sm°©e
 {

119 
ms_¥ev
;

120 
hπime_t
 
ms_°¨t
;

121 
hπime_t
 
ms_ãrm
;

122 
hπime_t
 
ms_°©e_°¨t
;

123 
hπime_t
 
ms_ac˘
[
NMSTATES
];

124 } 
lwp_m°©e
;

129 
Ãußge
 
lwp_ru
;

134 
lwp_œ°Áu…
;

135 
ˇddr_t
 
lwp_œ°Áddr
;

140 
ôimîvÆ
 
lwp_timî
[3];

145 
lwp_oweupc
;

146 
lwp_°©e
;

147 
u_sh‹t
 
lwp_no°›
;

148 
kc⁄dv¨_t
 
lwp_cv
;

153 
˛ock_t
 
lwp_utime
;

154 
˛ock_t
 
lwp_°ime
;

159 
_kthªad
 *
lwp_thªad
;

160 
¥oc
 *
lwp_¥o˝
;

161 } 
	tklwp_t
;

164  
	#LWP_USER
 0x01

	)
165  
	#LWP_SYS
 0x02

	)
167  
	#LWPNULL
 (
klwp_t
 *)0

	)
169 #if 
deföed
(
_KERNEL
)

170 
lwp_deÁu…_°ksize
;

171 
lwp_ª≠˙t
;

173 
	g_kthªad_t
;

174 
_kthªad
 *
lwp_dóthrow
;

179 #ifdef 
__˝lu•lus


	@/usr/include/sys/param.h

31 #i‚de‡
_SYS_PARAM_H


32  
	#_SYS_PARAM_H


	)
34 #¥agm®
idít
 "@(#)param.h 1.34 95/11/05 SMI"

36 #i‚de‡
_ASM


37 
	~<sys/ty≥s.h
>

38 
	~<sys/iß_defs.h
>

42 #ifdef 
__˝lu•lus


50 #i‚def 
_POSIX_VDISABLE


51  
	#_POSIX_VDISABLE
 0

	)
54 #i‚def 
MAX_INPUT


55  
	#MAX_INPUT
 512

	)
58 #i‚def 
MAX_CANON


59  
	#MAX_CANON
 256

	)
62  
	#UID_NOBODY
 60001

	)
63  
	#GID_NOBODY
 
UID_NOBODY


	)
65  
	#UID_NOACCESS
 60002

	)
67  
	#MAXPID
 30000

	)
68  
	#MAXUID
 2147483647

	)
69  
	#MAXLINK
 32767

	)
71  
	#NMOUNT
 40

	)
73  
	#CANBSIZ
 256

	)
75  
	#NOFILE
 20

	)
84  
	#NGROUPS_UMIN
 0

	)
85  
	#NGROUPS_UMAX
 32

	)
91  
	#NGROUPS_MAX_DEFAULT
 16

	)
97  
	#PMASK
 0177

	)
98  
	#PCATCH
 0400

	)
99  
	#PNOSTOP
 01000

	)
100  
	#PSWP
 0

	)
101  
	#PINOD
 10

	)
102  
	#PSNDD
 
PINOD


	)
103  
	#PAMAP
 
PINOD


	)
104  
	#PPMAP
 
PAMAP


	)
105  
	#PRIBIO
 20

	)
106  
	#PZERO
 25

	)
107  
	#PMEM
 0

	)
108  
	#NZERO
 20

	)
109  
	#PPIPE
 26

	)
110  
	#PVFS
 27

	)
111  
	#PWAIT
 30

	)
112  
	#PLOCK
 35

	)
113  
	#PSLEP
 39

	)
114  
	#PUSER
 60

	)
115  
	#PIDLE
 127

	)
121  
	#NBPW
  ()

	)
122 #i‚de‡
NULL


123  
	#NULL
 0

	)
125  
	#CMASK
 0

	)
126  
	#CDLIMIT
 (1L<<11)

	)
127  
	#NBPS
 0x20000

	)
128  
	#NBPSCTR
 512

	)
129  
	#UBSIZE
 512

	)
130  
	#SCTRSHFT
 9

	)
132 #ifde‡
_LITTLE_ENDIAN


133  
	#lobyã
(
X
) (((*)&(X))[0])

	)
134  
	#hibyã
(
X
) (((*)&(X))[1])

	)
135  
	#low‹d
(
X
) (((
ush‹t
 *)&(X))[0])

	)
136  
	#hiw‹d
(
X
) (((
ush‹t
 *)&(X))[1])

	)
138 #ifde‡
_BIG_ENDIAN


139  
	#lobyã
(
X
) (((*)&(X))[1])

	)
140  
	#hibyã
(
X
) (((*)&(X))[0])

	)
141  
	#low‹d
(
X
) (((
ush‹t
 *)&(X))[1])

	)
142  
	#hiw‹d
(
X
) (((
ush‹t
 *)&(X))[0])

	)
146  
	#SYSNAME
 9

	)
147  
	#PREMOTE
 39

	)
159  
	#MAXPATHLEN
 1024

	)
160  
	#MAXSYMLINKS
 20

	)
161  
	#MAXNAMELEN
 256

	)
163 #i‚de‡
NADDR


164  
	#NADDR
 13

	)
172 #i‚de‡
PIPE_BUF


173  
	#PIPE_BUF
 5120

	)
176 #i‚de‡
PIPE_MAX


177  
	#PIPE_MAX
 5120

	)
180  
	#NBBY
 8

	)
183  
	#dkblock
(
bp
) ((bp)->
b_blkno
)

	)
184  
	#dkunô
(
bp
) (
	`mö‹
((bp)->
b_dev
Ë>> 3)

	)
199  
	#MAXBSIZE
 8192

	)
200  
	#DEV_BSIZE
 512

	)
201  
	#DEV_BSHIFT
 9

	)
202  
	#MAXFRAG
 8

	)
203  
	#MAXOFF_T
 ((
off_t
)(((
u_l⁄g
)1 << 
NBBY
 *  (off_tË- 1Ë- 1))

	)
204 #ifde‡
_NO_LONGLONG


205  
	#MAXOFFSET_T
 
MAXOFF_T


	)
207  
	#MAXOFFSET_T
 ((1LL << 
NBBY
 *  (
daddr_t
Ë+ 
DEV_BSHIFT
 - 1Ë- 1)

	)
210  
	#btodb
(
byãs
) \

211 (()(
byãs
Ë>> 
DEV_BSHIFT
)

	)
212  
	#dbtob
(
db
) \

213 (()(
db
Ë<< 
DEV_BSHIFT
)

	)
216  
	#lbtodb
(
byãs
) \

217 ((
off£t_t
)(
byãs
Ë>> 
DEV_BSHIFT
)

	)
218  
	#ldbtob
(
db
) \

219 ((
off£t_t
)(
db
Ë<< 
DEV_BSHIFT
)

	)
221 #i‚de‡
_ASM


222 #i‚de‡
NODEV


223  
	#NODEV
 (
dev_t
)(-1)

	)
230  
	#NCARGS
 0x100000

	)
236  
	#FSHIFT
 8

	)
237  
	#FSCALE
 (1<<
FSHIFT
)

	)
244 #i‡
deföed
(
_KERNEL
Ë&& !deföed(
_ASM
)

245 
drv_u£cwaô
(
˛ock_t
);

246  
	#DELAY
(
n
) 
	`drv_u£cwaô
“)

	)
247  
	#CDELAY
(
c
, 
n
) \

249 
N
 = 
n
; \

250 --
N
 > 0) { \

251 
c
) \

253 
	`drv_u£cwaô
(1); \

255 }

	)
258 #ifdef 
__˝lu•lus


267 #i‡(
deföed
(
_KERNEL
Ë|| deföed(
_KMEMUSER
))

269 #i‡
deföed
(
_MACHDEP
)

270 
	~<sys/mach∑øm.h
>

273 #ifdef 
__˝lu•lus


277 #i‡!
deföed
(
_MACHDEP
)

283 #i‡
deföed
(
_KERNEL
Ë&& !deföed(
_ASM
)

284 
hz
;

285 c⁄° 
_∑gesize
;

286 c⁄° 
_∑geshi·
;

287 c⁄° 
_∑geoff£t
;

288 c⁄° 
_∑gemask
;

289 c⁄° 
_mmu_∑gesize
;

290 c⁄° 
_mmu_∑geshi·
;

291 c⁄° 
_mmu_∑geoff£t
;

292 c⁄° 
_mmu_∑gemask
;

293 c⁄° 
_kî√lba£
;

294 c⁄° 
_u£æimô
;

295 c⁄° 
_¨gsba£
;

296 c⁄° 
_msg_bsize
;

297 c⁄° 
_deÁu…°ksz
;

298 c⁄° 
_nbpg
;

299 c⁄° 
_n˝u
;

300 c⁄° 
_˛size
;

303  
	#HZ
 
hz


	)
304  
	#PAGESIZE
 
_∑gesize


	)
305  
	#PAGESHIFT
 
_∑geshi·


	)
306  
	#PAGEOFFSET
 
_∑geoff£t


	)
307  
	#PAGEMASK
 
_∑gemask


	)
308  
	#MMU_PAGESIZE
 
_mmu_∑gesize


	)
309  
	#MMU_PAGESHIFT
 
_mmu_∑geshi·


	)
310  
	#MMU_PAGEOFFSET
 
_mmu_∑geoff£t


	)
311  
	#MMU_PAGEMASK
 
_mmu_∑gemask


	)
313  
	#KERNELBASE
 
_kî√lba£


	)
314  
	#USERLIMIT
 
_u£æimô


	)
315  
	#ARGSBASE
 
_¨gsba£


	)
316  
	#MSG_BSIZE
 
_msg_bsize


	)
317  
	#DEFAULTSTKSZ
 
_deÁu…°ksz


	)
318  
	#NBPG
 
_nbpg


	)
319  
	#NCPU
 
_n˝u


	)
320  
	#CLSIZE
 
_˛size


	)
334  
	#mmu_±ob
(
x
) ((xË<< 
MMU_PAGESHIFT
)

	)
335  
	#mmu_bt›
(
x
) ((()(x)Ë>> 
MMU_PAGESHIFT
)

	)
336  
	#mmu_bt›r
(
x
) (((()(xË+ 
MMU_PAGEOFFSET
Ë>> 
MMU_PAGESHIFT
))

	)
341  
	#mmu_±od
(
x
) ((xË<< (
MMU_PAGESHIFT
 - 
DEV_BSHIFT
))

	)
342  
	#±od
(
x
) ((xË<< (
PAGESHIFT
 - 
DEV_BSHIFT
))

	)
347  
	#±ob
(
x
) ((xË<< 
PAGESHIFT
)

	)
348  
	#bt›
(
x
) ((()(x)Ë>> 
PAGESHIFT
)

	)
349  
	#bt›r
(
x
) (((()(xË+ 
PAGEOFFSET
Ë>> 
PAGESHIFT
))

	)
354  
	#NDPP
 (
PAGESIZE
/
DEV_BSHIFT
)

	)
355  
	#dt›
(
DD
) (((DDË+ 
NDPP
 - 1Ë>> (
PAGESHIFT
 - 
DEV_BSHIFT
))

	)
356  
	#dt›t
(
DD
) ((DDË>> (
PAGESHIFT
 - 
DEV_BSHIFT
))

	)
361  
	#PAGOFF
(
x
) (((
uöt
)(x)Ë& 
PAGEOFFSET
)

	)
362  
	#NBPC
 
MMU_PAGESIZE


	)
363  
	#NBPP
 
MMU_PAGESIZE


	)
364  
	#BPCSHIFT
 
MMU_PAGESHIFT


	)
366 #ifdef 
__˝lu•lus


380 
	~<sys/uni°d.h
>

382 #ifdef 
__˝lu•lus


386 #i‡!
deföed
(
_ASM
)

387 
_sysc⁄f
();

390  
	#HZ
 (()
	`_sysc⁄f
(
_SC_CLK_TCK
))

	)
391  
	#TICK
 (1000000000/(()
	`_sysc⁄f
(
_SC_CLK_TCK
)))

	)
392  
	#PAGESIZE
 (
	`_sysc⁄f
(
_SC_PAGESIZE
))

	)
393  
	#PAGEOFFSET
 (
PAGESIZE
 - 1)

	)
394  
	#PAGEMASK
 (~
PAGEOFFSET
)

	)
396 #ifdef 
__˝lu•lus


	@/usr/include/sys/pcb.h

5 #i‚de‡
_SYS_PCB_H


6  
	#_SYS_PCB_H


	)
8 #¥agm®
idít
 "@(#)pcb.h 1.22 94/11/18 SMI"

10 
	~<sys/ªg£t.h
>

12 #ifdef 
__˝lu•lus


20 #i‚de‡
_ASM


21 
	spcb
 {

22 
pcb_Êags
;

23 
rwödow
 
pcb_xªgs
;

24 
	e
{ 
XREGNONE
 = 0, 
XREGPRESENT
, 
XREGMODIFIED
 }

25 
pcb_xªg°©
;

26 
	e
{ 
STEP_NONE
 = 0, 
STEP_REQUESTED
, 
STEP_ACTIVE
, 
STEP_WASACTIVE
 }

27 
pcb_°ï
;

28 
ˇddr_t
 
pcb_åa˚pc
;

29 
pcb_ö°r
;

30 
ˇddr_t
 
pcb_å≠0addr
;

31 } 
	tpcb_t
;

35  
	#FIX_ALIGNMENT
 0x01

	)
36  
	#INSTR_VALID
 0x02

	)
38 #ifdef 
__˝lu•lus


	@/usr/include/sys/pirec.h

5 #i‚de‡
_SYS_PIREC_H


6  
	#_SYS_PIREC_H


	)
8 #¥agm®
idít
 "@(#)pirec.h 1.11 93/12/20 SMI"

10 #ifdef 
__˝lu•lus


32 
	spúec


34 
púec
 *
pi_f‹w
;

35 
púec
 *
pi_back
;

36 
_kthªad
 *
pi_bíef
;

37 
uöt_t
 
pi_ïri_hi
;

38 } 
	tpúec_t
;

40 #ifdef 
_KERNEL


47  
	#PIREC_RAISE
(
p
, 
d¥i
) \

48 (
p
)->
pi_ïri_hi
 < (
d¥i
)) \

49 (
p
)->
pi_ïri_hi
 = (
d¥i
)

	)
52 #ifdef 
__STDC__


53 
púec_öô
(
púec_t
 *, 
_kthªad
 *, 
¥i_t
);

54 
púec_˛ór
(
púec_t
 *);

55 
púec_ösque
(
púec_t
 *,Öirec_t *);

56 
púec_ªmque
(
púec_t
 *);

57 
¥i_t
 
púec_ˇl˝ri
(
púec_t
 *,Öri_t);

59 
púec_öô
();

60 
púec_˛ór
();

61 
púec_ösque
();

62 
púec_ªmque
();

63 
¥i_t
 
púec_ˇl˝ri
();

68 #ifdef 
__˝lu•lus


	@/usr/include/sys/regset.h

12 #i‚def 
_SYS_REGSET_H


13  
	#_SYS_REGSET_H


	)
15 #¥agm®
idít
 "@(#)regset.h 1.13 94/11/21 SMI"

17 #ifdef 
__˝lu•lus


25  
	#REG_PSR
 (0)

	)
26  
	#REG_PC
 (1)

	)
27  
	#REG_nPC
 (2)

	)
28  
	#REG_Y
 (3)

	)
29  
	#REG_G1
 (4)

	)
30  
	#REG_G2
 (5)

	)
31  
	#REG_G3
 (6)

	)
32  
	#REG_G4
 (7)

	)
33  
	#REG_G5
 (8)

	)
34  
	#REG_G6
 (9)

	)
35  
	#REG_G7
 (10)

	)
36  
	#REG_O0
 (11)

	)
37  
	#REG_O1
 (12)

	)
38  
	#REG_O2
 (13)

	)
39  
	#REG_O3
 (14)

	)
40  
	#REG_O4
 (15)

	)
41  
	#REG_O5
 (16)

	)
42  
	#REG_O6
 (17)

	)
43  
	#REG_O7
 (18)

	)
46  
	#REG_PS
 
REG_PSR


	)
47  
	#REG_SP
 
REG_O6


	)
48  
	#REG_R0
 
REG_O0


	)
49  
	#REG_R1
 
REG_O1


	)
51 #i‚def 
_ASM


53 
	tgªg_t
;

63  
	#NGREG
 19

	)
65 
gªg_t
 
	tgªg£t_t
[
NGREG
];

74  
	#SPARC_MAXREGWINDOW
 31

	)
76 
	srwödow
 {

77 
gªg_t
 
rw_loˇl
[8];

78 
gªg_t
 
rw_ö
[8];

81  
	#rw_Â
 
rw_ö
[6]

	)
82  
	#rw_πn
 
rw_ö
[7]

	)
84 
	sgwödows
 {

85 
wb˙t
;

86 *
•buf
[
SPARC_MAXREGWINDOW
];

87 
rwödow
 
wbuf
[
SPARC_MAXREGWINDOW
];

90 
gwödows
 
	tgwödows_t
;

96  
	#MAXFPQ
 16

	)
106 
	sÂq
 {

107 *
Âq_addr
;

108 
Âq_ö°r
;

111 
	sfq
 {

112 
	u
{

113 
whﬁe
;

114 
Âq
 fpq;

115 } 
FQu
;

131  
	#FPU_REGS_TYPE
 

	)
132  
	#FPU_DREGS_TYPE
 

	)
133  
	#V7_FPU_FSR_TYPE
 

	)
134  
	#V9_FPU_FSR_TYPE
 

	)
135  
	#V9_FPU_FPRS_TYPE
 

	)
137 #ifdef 
__•¨cv9


138  
	#FPU_FSR_TYPE
 
V9_FPU_FSR_TYPE


	)
140  
	#FPU_FSR_TYPE
 
V7_FPU_FSR_TYPE


	)
143 
	sÂu
 {

144 
	u
{

145 
FPU_REGS_TYPE
 
Âu_ªgs
[32];

146 
Âu_dªgs
[16];

147 } 
Âu_‰
;

148 
fq
 *
Âu_q
;

149 
V7_FPU_FSR_TYPE
 
Âu_f§
;

150 
Âu_q˙t
;

151 
Âu_q_íåysize
;

152 
Âu_í
;

155 
Âu
 
	tÂªg£t_t
;

157 #ifde‡
__•¨cv9


165 
	sv9_Âu
 {

166 
	u
{

167 
FPU_REGS_TYPE
 
Âu_ªgs
[32];

168 
FPU_DREGS_TYPE
 
Âu_dªgs
[32];

169 
Âu_qªgs
[16];

170 } 
Âu_‰
;

171 
V9_FPU_FSR_TYPE
 
Âu_f§
;

172 
V9_FPU_FPRS_TYPE
 
Âu_Ârs
;

173 
fq
 *
Âu_q
;

174 
Âu_q˙t
;

175 
Âu_q_íåysize
;

176 
Âu_í
;

179 
v9_Âu
 
	tv9_Âªg£t_t
;

183 #ifdef 
_KERNEL


188 #ifdef 
__•¨cv9


189 
v9_Âu
 
	tkÂu_t
;

191 
Âu
 
	tkÂu_t
;

205 
	s
{

206 
xrs_id
;

207 
ˇddr_t
 
xrs_±r
;

208 } 
	txrs_t
;

210  
	#XRS_ID
 0x78727300

	)
227 
	s
{

228 
gªg£t_t
 
gªgs
;

229 
gwödows_t
 *
gwös
;

230 
Âªg£t_t
 
Âªgs
;

231 
xrs_t
 
xrs
;

232 
fûÀr
[19];

233 } 
	tmc⁄ãxt_t
;

237 #i‚def 
_KERNEL


238 
	~<v7/sys/¥ivªgs.h
>

242 #ifdef 
__˝lu•lus


	@/usr/include/sys/resource.h

8 #i‚de‡
_SYS_RESOURCE_H


9  
	#_SYS_RESOURCE_H


	)
11 #¥agm®
idít
 "@(#)resource.h 1.12 95/02/26 SMI"

13 #ifdef 
__˝lu•lus


21  
	#PRIO_PROCESS
 0

	)
22  
	#PRIO_PGRP
 1

	)
23  
	#PRIO_USER
 2

	)
30  
	#RLIMIT_CPU
 0

	)
31  
	#RLIMIT_FSIZE
 1

	)
32  
	#RLIMIT_DATA
 2

	)
33  
	#RLIMIT_STACK
 3

	)
34  
	#RLIMIT_CORE
 4

	)
35  
	#RLIMIT_NOFILE
 5

	)
36  
	#RLIMIT_VMEM
 6

	)
37  
	#RLIMIT_AS
 
RLIMIT_VMEM


	)
39  
	#RLIM_NLIMITS
 7

	)
41  
	#RLIM_INFINITY
 0x7fffffff

	)
43 
	tæim_t
;

45 
	sæimô
 {

46 
æim_t
 
æim_cur
;

47 
æim_t
 
æim_max
;

50 #ifde‡
_KERNEL


52 
æimô
 
æimôs
[];

54 #i‡
deföed
(
__STDC__
)

56 
æimô
(, 
æim_t
,Ñlim_t);

60 
æimô
();

66 
	~<sys/time.h
>

68  
	#RUSAGE_SELF
 0

	)
69  
	#RUSAGE_CHILDREN
 -1

	)
71 
	srußge
 {

72 
timevÆ
 
	gru_utime
;

73 
timevÆ
 
	gru_°ime
;

74 
	gru_maxrss
;

75 
	gru_ixrss
;

76 
	gru_idrss
;

77 
	gru_i§ss
;

78 
	gru_möÊt
;

79 
	gru_majÊt
;

80 
	gru_nsw≠
;

81 
	gru_öblock
;

82 
	gru_oublock
;

83 
	gru_msg¢d
;

84 
	gru_msgrcv
;

85 
	gru_nsig«ls
;

86 
	gru_nvcsw
;

87 
	gru_nivcsw
;

90 #i‡
deföed
(
__STDC__
)

92 
£ålimô
(, c⁄° 
æimô
 *);

93 
gëæimô
(, 
æimô
 *);

97 
gëæimô
();

98 
£ålimô
();

104 #ifdef 
__˝lu•lus


	@/usr/include/sys/signal.h

13 #i‚de‡
_SYS_SIGNAL_H


14  
	#_SYS_SIGNAL_H


	)
16 #¥agm®
idít
 "@(#)signal.h 1.44 95/03/16 SMI"

18 
	~<sys/„©uª_ã°s.h
>

19 
	~<sys/uni°d.h
>

21 #ifdef 
__˝lu•lus


25  
	#SIGHUP
 1

	)
26  
	#SIGINT
 2

	)
27  
	#SIGQUIT
 3

	)
28  
	#SIGILL
 4

	)
29  
	#SIGTRAP
 5

	)
30  
	#SIGIOT
 6

	)
31  
	#SIGABRT
 6

	)
32  
	#SIGEMT
 7

	)
33  
	#SIGFPE
 8

	)
34  
	#SIGKILL
 9

	)
35  
	#SIGBUS
 10

	)
36  
	#SIGSEGV
 11

	)
37  
	#SIGSYS
 12

	)
38  
	#SIGPIPE
 13

	)
39  
	#SIGALRM
 14

	)
40  
	#SIGTERM
 15

	)
41  
	#SIGUSR1
 16

	)
42  
	#SIGUSR2
 17

	)
43  
	#SIGCLD
 18

	)
44  
	#SIGCHLD
 18

	)
45  
	#SIGPWR
 19

	)
46  
	#SIGWINCH
 20

	)
47  
	#SIGURG
 21

	)
48  
	#SIGPOLL
 22

	)
49  
	#SIGIO
 
SIGPOLL


	)
50  
	#SIGSTOP
 23

	)
51  
	#SIGTSTP
 24

	)
52  
	#SIGCONT
 25

	)
53  
	#SIGTTIN
 26

	)
54  
	#SIGTTOU
 27

	)
55  
	#SIGVTALRM
 28

	)
56  
	#SIGPROF
 29

	)
57  
	#SIGXCPU
 30

	)
58  
	#SIGXFSZ
 31

	)
59  
	#SIGWAITING
 32

	)
60  
	#SIGLWP
 33

	)
61  
	#SIGFREEZE
 34

	)
62  
	#SIGTHAW
 35

	)
63  
	#SIGCANCEL
 36

	)
65  
	#_SIGRTMIN
 37

	)
66  
	#_SIGRTMAX
 44

	)
67 
_sysc⁄f
();

68  
	#SIGRTMIN
 
	`_sysc⁄f
(
_SC_SIGRT_MIN
)

	)
69  
	#SIGRTMAX
 
	`_sysc⁄f
(
_SC_SIGRT_MAX
)

	)
71 #if 
deföed
(
__˝lu•lus
)

73 
	tSIG_FUNC_TYP
();

74 
SIG_FUNC_TYP
 *
	tSIG_TYP
;

75  
	#SIG_PF
 
SIG_TYP


	)
77  
	#SIG_DFL
 (
SIG_PF
)0

	)
78  
	#SIG_ERR
 (
SIG_PF
)-1

	)
79  
	#SIG_IGN
 (
SIG_PF
)1

	)
80  
	#SIG_HOLD
 (
SIG_PF
)2

	)
82 #ñif 
deföed
(
löt
)

84  
	#SIG_DFL
 ((*)())0

	)
85  
	#SIG_ERR
 ((*)())0

	)
86  
	#SIG_IGN
 ((*)())0

	)
87  
	#SIG_HOLD
 ((*)())0

	)
91  
	#SIG_DFL
 ((*)())0

	)
92  
	#SIG_ERR
 ((*)())-1

	)
93  
	#SIG_IGN
 ((*)())1

	)
94  
	#SIG_HOLD
 ((*)())2

	)
98  
	#SIG_BLOCK
 1

	)
99  
	#SIG_UNBLOCK
 2

	)
100  
	#SIG_SETMASK
 3

	)
102  
	#SIGNO_MASK
 0xFF

	)
103  
	#SIGDEFER
 0x100

	)
104  
	#SIGHOLD
 0x200

	)
105  
	#SIGRELSE
 0x400

	)
106  
	#SIGIGNORE
 0x800

	)
107  
	#SIGPAUSE
 0x1000

	)
109 #i‡
deföed
(
__EXTENSIONS__
Ë|| (
__STDC__
 - 0 == 0) || \

110 
deföed
(
_POSIX_C_SOURCE
Ë|| deföed(
_XOPEN_SOURCE
)

112 #i‡
deföed
(
__EXTENSIONS__
Ë|| ((
__STDC__
 - 0 == 0) && \

113 !
deföed
(
_POSIX_C_SOURCE
Ë&& !deföed(
_XOPEN_SOURCE
)) || \

114 (
	g_POSIX_C_SOURCE
 > 2)

118 
	~<sys/sigöfo.h
>

122 
	s
{

123 
	g__sigbôs
[4];

124 } 
	tsig£t_t
;

126 
	s
{

127 
	g__sigbôs
[2];

128 } 
	tk_sig£t_t
;

140 
	ssiga˘i⁄
 {

141 
	gß_Êags
;

142 
	u
{

143 #ifdef 
__˝lu•lus


144 (*
	g_h™dÀr
)();

146 (*
	g_h™dÀr
)();

148 #i‡
deföed
(
__EXTENSIONS__
Ë|| ((
__STDC__
 - 0 == 0) && \

149 !
deföed
(
_POSIX_C_SOURCE
Ë&& !deföed(
_XOPEN_SOURCE
)) || \

150 (
	g_POSIX_C_SOURCE
 > 2)

151 (*
	g_siga˘i⁄
)(, 
	gsigöfo_t
 *, *);

153 } 
	g_fun˝å
;

154 
sig£t_t
 
	gß_mask
;

155 
	gß_ªsv
[2];

157  
	#ß_h™dÀr
 
_fun˝å
.
_h™dÀr


	)
158  
	#ß_siga˘i⁄
 
_fun˝å
.
_siga˘i⁄


	)
161  
	#SA_NOCLDSTOP
 0x00020000

	)
164 #i‡
deföed
(
__EXTENSIONS__
) || \

165 ((
	g__STDC__
 - 0 =0Ë&& !
deföed
(
_POSIX_C_SOURCE
))

170  
	#SA_ONSTACK
 0x00000001

	)
171  
	#SA_RESETHAND
 0x00000002

	)
172  
	#SA_RESTART
 0x00000004

	)
175 #i‡
deföed
(
__EXTENSIONS__
Ë|| ((
__STDC__
 - 0 == 0) && \

176 !
deföed
(
_POSIX_C_SOURCE
)) || (_POSIX_C_SOURCE > 2)

177  
	#SA_SIGINFO
 0x00000008

	)
180 #i‡
deföed
(
__EXTENSIONS__
Ë|| ((
__STDC__
 - 0 == 0) && \

181 !
deföed
(
_POSIX_C_SOURCE
))

182  
	#SA_NODEFER
 0x00000010

	)
185  
	#SA_NOCLDWAIT
 0x00010000

	)
188  
	#SA_WAITSIG
 0x00010000

	)
194  
	#NSIG
 45

	)
195  
	#MAXSIG
 44

	)
200  
	#S_SIGNAL
 1

	)
201  
	#S_SIGSET
 2

	)
202  
	#S_SIGACTION
 3

	)
203  
	#S_NONE
 4

	)
205  
	#MINSIGSTKSZ
 2048

	)
206  
	#SIGSTKSZ
 8192

	)
208  
	#SS_ONSTACK
 0x00000001

	)
209  
	#SS_DISABLE
 0x00000002

	)
211 
	ssigÆt°ack
 {

212 *
ss_•
;

213 
	gss_size
;

214 
	gss_Êags
;

217 
sigÆt°ack
 
	t°ack_t
;

221 #ifde‡
_KERNEL


222 
	~<sys/t_lock.h
>

224 
k_sig£t_t


226 
nuŒsmask
,

227 
fûl£t
,

228 
hﬁdvf‹k
,

229 
ˇ¡mask
,

230 
ˇ¡ª£t
,

231 
ign‹edeÁu…
,

232 
°›deÁu…
,

233 
c‹edeÁu…
;

235  
	#sigmask
(
n
) (()1 << ((“Ë- 1Ë& (32 - 1)))

	)
236  
	#sigw‹d
(
n
) ((()(“Ë- 1))>>5)

	)
238  
	#sigem±y£t
(
s
) (*(sË
nuŒsmask
)

	)
239  
	#sigfûl£t
(
s
) (*(sË
fûl£t
)

	)
240  
	#sigadd£t
(
s
, 
n
) ((s)->
__sigbôs
[
	`sigw‹d
“)] |
	`sigmask
“))

	)
241  
	#sigdñ£t
(
s
, 
n
) ((s)->
__sigbôs
[
	`sigw‹d
“)] &~
	`sigmask
“))

	)
242  
	#sigismembî
(
s
, 
n
) (
	`sigmask
“Ë& (s)->
__sigbôs
[
	`sigw‹d
“)])

	)
243  
	#sigi£m±y
(
s
) (!(((s)->
__sigbôs
[0]Ë| ((s)->__sigbôs[1])))

	)
244  
	#sigutok
(
us
, 
ks
) ((ks)->
__sigbôs
[0] = (us)->__sigbits[0], \

245 (
ks
)->
__sigbôs
[1] = (
us
)->__sigbôs[1])

	)
246  
	#sigktou
(
ks
, 
us
) ((us)->
__sigbôs
[0] = (ks)->__sigbits[0], \

247 (
us
)->
__sigbôs
[1] = (
ks
)->__sigbits[1], \

248 (
us
)->
__sigbôs
[2] = 0, \

249 (
us
)->
__sigbôs
[3] = 0)

	)
250 
	s
{

251 
	gsig
;

252 
	g≥rm
;

253 
	gcheck≥rm
;

254 
	gsicode
;

255 
sigvÆ
 
	gvÆue
;

256 } 
	tsig£nd_t
;

258 
	ssigqbuckë
 {

259 
sigqueue_t
 
	gsqb_buckë
;

260 
sigqbuckë
 *
	gsqb_lök
;

261 } 
	tsigqbuckë_t
;

263 
	ssigqhdr
 {

264 
sigqbuckë
 *
	gsqb_lök
;

265 
	gsqb_cou¡
;

266 
	gsqb_≥xôed
;

267 
kmuãx_t
 
	gsqb_lock
;

268 } 
	tsigqhdr_t
;

270  
	#_SIGQUEUE_MAX
 32

	)
272 #i‡
deföed
(
__STDC__
)

273 
£tsiga˘
(, (*)(), 
k_sig£t_t
, );

274 
sig‹£t
(
k_sig£t_t
 *, k_sigset_t *);

275 
sig™d£t
(
k_sig£t_t
 *, k_sigset_t *);

276 
sigdiff£t
(
k_sig£t_t
 *, k_sigset_t *);

277 
sigª∂a˚
(
k_sig£t_t
 *, k_sigset_t *);

279 
£tsiga˘
();

280 
sig‹£t
();

281 
sig™d£t
();

282 
sigdiff£t
();

283 
sigª∂a˚
();

288 #ifdef 
__˝lu•lus


	@/usr/include/sys/sleepq.h

5 #i‚de‡
_SYS_SLEEPQ_H


6  
	#_SYS_SLEEPQ_H


	)
8 #¥agm®
idít
 "@(#)sleepq.h 1.17 94/07/29 SMI"

10 
	~<sys/machlock.h
>

12 #ifdef 
__˝lu•lus


22 
	s¶ìpq
 {

23 
_kthªad
 * 
sq_fú°
;

24 } 
	t¶ìpq_t
;

29 
	s_¶ìpq_hód
 {

30 
¶ìpq_t
 
sq_queue
;

31 
di•_lock_t
 
sq_lock
;

32 } 
	t¶ìpq_hód_t
;

34 #ifdef 
_KERNEL


36 #ifdef 
__STDC__


38 
¶ìpq_ö£π
(
¶ìpq_t
 *, 
_kthªad
 *);

39 
¶ìpq_wake⁄e
(
¶ìpq_t
 *);

40 
¶ìpq_wakóŒ
(
¶ìpq_t
 *);

41 
¶ìpq_wake⁄e_ch™
(
¶ìpq_t
 *, 
ˇddr_t
);

42 
¶ìpq_wakóŒ_ch™
(
¶ìpq_t
 *, 
ˇddr_t
);

43 
_kthªad
 *
¶ìpq_un¶ìp
(
¶ìpq_t
 *, _kthread *);

44 
_kthªad
 *
¶ìpq_dequeue
(
¶ìpq_t
 *, _kthread *);

46 
¶ìpq_hód_t
 *
sqhash
(
ˇddr_t
 
wch™
);

50 
¶ìpq_ö£π
();

51 
¶ìpq_wake⁄e
();

52 
¶ìpq_wakóŒ
();

53 
¶ìpq_wake⁄e_ch™
();

54 
¶ìpq_wakóŒ_ch™
();

55 
_kthªad
 *
¶ìpq_un¶ìp
();

56 
_kthªad
 *
¶ìpq_dequeue
();

58 
¶ìpq_hód_t
 *
sqhash
();

82  
	#NSLEEPQ
 512

	)
83  
	#sqhashödex
(
X
) (((
u_öt
)X >> 2Ë+ ((u_öt)(XË>> 9Ë& (
NSLEEPQ
 - 1))

	)
87 #ifdef 
__˝lu•lus


	@/usr/include/sys/t_lock.h

11 #i‚de‡
_SYS_T_LOCK_H


12  
	#_SYS_T_LOCK_H


	)
14 #¥agm®
idít
 "@(#)t_lock.h 1.42 94/11/02 SMI"

16 #i‚def 
_ASM


17 
	~<sys/machlock.h
>

18 
	~<sys/dki_lköfo.h
>

19 
	~<sys/¶ìpq.h
>

20 
	~<sys/tu∫°ûe.h
>

21 
	~<sys/muãx.h
>

22 
	~<sys/rwlock.h
>

23 
	~<sys/£m≠h‹e.h
>

24 
	~<sys/c⁄dv¨.h
>

27 #ifdef 
__˝lu•lus


31 #i‚def 
_ASM


47  
	#LOCK_NAME_LEN
 18

	)
50 #i‡
deföed
(
_KERNEL
)

52 
n˝us
;

54 
kmuãx_t
 
unß„_drivî
;

56  
	#UNSAFE_DRIVER_LOCK_HELD
() (
	`muãx_ow√d
(&
unß„_drivî
))

	)
57  
	#UNSAFE_DRIVER_LOCK_NOT_HELD
() \

58 (!
	`muãx_ow√d
(&
unß„_drivî
Ë|| 
∑nic°r
)

	)
65 
di•_lock_íãr
(
di•_lock_t
 *);

66 
di•_lock_exô
(
di•_lock_t
 *);

67 
di•_lock_exô_n›ªem±
(
di•_lock_t
 *);

68 
di•_lock_íãr_high
(
di•_lock_t
 *);

69 
di•_lock_exô_high
(
di•_lock_t
 *);

70 
di•_lock_öô
(
di•_lock_t
 *
Õ
, *
«me
);

71 
di•_lock_de°roy
(
di•_lock_t
 *
Õ
);

72 
di•_lock_åa˚
(
di•_lock_t
 *
Õ
);

74  
	#DISP_LOCK_HELD
(
Õ
) 
	`LOCK_HELD
((
lock_t
 *)÷p))

	)
82 #i‚de‡
NO_LOCKS_HELD


83  
	#NO_LOCKS_HELD
 1

	)
85 #i‚de‡
NO_COMPETING_THREADS


86  
	#NO_COMPETING_THREADS
 1

	)
93 #ifdef 
__˝lu•lus


	@/usr/include/sys/turnstile.h

5 #i‚de‡
_SYS_TURNSTILE_H


6  
	#_SYS_TURNSTILE_H


	)
8 #¥agm®
idít
 "@(#)turnstile.h 1.27 94/10/27 SMI"

10 
	~<sys/ty≥s.h
>

11 
	~<sys/∑øm.h
>

12 
	~<sys/púec.h
>

13 
	~<sys/¶ìpq.h
>

15 #ifdef 
__˝lu•lus


19  
	#NTSTILE_SQ
 2

	)
26 
	e
{

27 
QOBJ_UND
 = -1,

28 
QOBJ_DEF
 = 0,

29 
QOBJ_READER
 = 0,

30 
QOBJ_WRITER
 = 1,

31 
QOBJ_CV
 = 0,

32 
QOBJ_MUTEX
 = 0,

33 
QOBJ_SEMA
 = 0

34 } 
	tqobj_t
;

37  
	#TSTILE_FREE
 0

	)
38  
	#TSTILE_ACTIVE
 1

	)
40 
tu∫°ûe
 
	ttu∫°ûe_t
;

42 
ush‹t_t
 
	ttu∫°ûe_id_t
;

44 
	stu∫°ûe
 {

45 
	ut°ûe_un
 {

50 
tu∫°ûe_t
 *
ts_f‹w
;

57 
púec_t
 
ts_¥ioöv
;

58 } 
tsun
;

64 
¶ìpq_t
 
ts_¶ìpq
[
NTSTILE_SQ
];

71 
tu∫°ûe_id_t
 
ts_id
;

72 
uch¨_t
 
ts_Êags
;

73 
di•_lock_t
 
ts_wlock
;

80 *
ts_sobj_¥iv_d©a
;

83 #ifdef 
_KERNEL


89  
	#TS_ROWSZ
 512

	)
90  
	#TS_COLSZ
 128

	)
91  
	#TS_ROWBITS
 9

	)
92  
	#TS_COLBITS
 7

	)
93  
	#TS_ROWMASK
 ((1 << 
TS_ROWBITS
Ë- 1)

	)
98  
	#TS_ROWCOL
(
row
, 
cﬁ
) (cﬁ << 
TS_ROWBITS
 |Ñow)

	)
103  
	#TS_COL
(
ts_id
) (—s_idË>> 
TS_ROWBITS
)

	)
108  
	#TS_ROW
(
ts_id
) (—s_idË& 
TS_ROWMASK
)

	)
113  
	#TS_NEW
(
n
, 
c⁄d
) \

114 (
tu∫°ûe_t
 *)
	`kmem_zÆloc
(
n
 *  (tu∫°ûe_t), 
c⁄d
)

	)
120  
	#TS_VALID
(
r
, 
c
) (‘ < 
t°ûe_mod
.
tsm_row˙t
) && \

121 (
c
 < 
t°ûe_mod
.
tsm_cﬁsz
))

	)
124  
	#TSTILE_PRIO_INVERTED
(
ts
) \

125 ((
ts
)->
tsun
.
ts_¥ioöv
.
pi_bíef
 !
NULL
)

	)
126  
	#TSTILE_INSERT
(
ts
, 
qnum
, 
c
) \

127 
	`¶ìpq_ö£π
(&(
ts
)->
ts_¶ìpq
[
qnum
], 
c
)

	)
128  
	#TSTILE_WAKEONE
(
ts
, 
qnum
) \

129 
	`¶ìpq_wake⁄e
(&(
ts
)->
ts_¶ìpq
[
qnum
])

	)
130  
	#TSTILE_WAKEALL
(
ts
, 
qnum
) \

131 
	`¶ìpq_wakóŒ
(&(
ts
)->
ts_¶ìpq
[
qnum
])

	)
132  
	#TSTILE_SLEEPQ
(
ts
, 
sobj_›s
) \

133 ((
ts
)->
ts_¶ìpq
[
	`SOBJ_QNUM
(
sobj_›s
)])

	)
134  
	#TSTILE_DEQ
(
ts
, 
qnum
, 
t
) \

135 
	`¶ìpq_dequeue
(&(
ts
)->
ts_¶ìpq
[
qnum
], 
t
)

	)
136  
	#TSTILE_UNSLEEP
(
ts
, 
qnum
, 
t
) \

137 
	`¶ìpq_un¶ìp
(&(
ts
)->
ts_¶ìpq
[
qnum
], 
t
)

	)
138  
	#TSTILE_EMPTY
(
ts
, 
qnum
) \

139 ((
ts
)->
ts_¶ìpq
[
qnum
].
sq_fú°
 =
NULL
)

	)
142 #ifdef 
__STDC__


144 
t°ûe_öô
();

145 
t°ûe_m‹e
(, );

146 
tu∫°ûe_t
 *
t°ûe_poöãr
(
tu∫°ûe_id_t
);

147 
tu∫°ûe_t
 *
t°ûe_poöãr_vîify
(
tu∫°ûe_id_t
);

148 
tu∫°ûe_t
 *
t°ûe_Æloc
();

149 
t°ûe_‰ì
(
tu∫°ûe_t
 *, 
tu∫°ûe_id_t
 *);

150 
_kthªad
 *
t°ûe_un¶ìp
(
tu∫°ûe_t
 *, 
qobj_t
,

151 
_kthªad
 *);

152 
t°ûe_ö£π
(
tu∫°ûe_t
 *, 
qobj_t
, 
_kthªad
 *);

153 
t°ûe_wake⁄e
(
tu∫°ûe_t
 *, 
qobj_t
);

154 
t°ûe_wakóŒ
(
tu∫°ûe_t
 *, 
qobj_t
);

155 
t°ûe_deq
(
tu∫°ûe_t
 *, 
qobj_t
, 
_kthªad
 *
t
);

156 
¥i_t
 
t°ûe_max¥i
(
tu∫°ûe_t
 *);

157 
t°ûe_¥io_övîãd
(
tu∫°ûe_t
 *);

158 
t°ûe_em±y
(
tu∫°ûe_t
 *, 
qobj_t
);

159 
_kthªad
 *
t°ûe_öhîô‹
(
tu∫°ûe_t
 *);

163 
t°ûe_öô
();

164 
t°ûe_m‹e
();

165 
tu∫°ûe_t
 *
t°ûe_poöãr
();

166 
tu∫°ûe_t
 *
t°ûe_poöãr_vîify
();

167 
tu∫°ûe_t
 *
t°ûe_Æloc
();

168 
t°ûe_‰ì
();

169 
_kthªad
 *
t°ûe_un¶ìp
();

170 
t°ûe_ö£π
();

171 
t°ûe_wake⁄e
();

172 
t°ûe_wakóŒ
();

173 
t°ûe_deq
();

174 
¥i_t
 
t°ûe_max¥i
();

175 
t°ûe_¥io_övîãd
();

176 
t°ûe_em±y
();

177 
_kthªad
 *
t°ûe_öhîô‹
();

183 #ifdef 
__˝lu•lus


	@/usr/include/sys/condvar.h

13 #i‚de‡
_SYS_CONDVAR_H


14  
	#_SYS_CONDVAR_H


	)
16 #¥agm®
idít
 "@(#)condvar.h 1.6 94/07/29 SMI"

18 #i‚def 
_ASM


19 
	~<sys/ty≥s.h
>

20 #ifde‡
_KERNEL


21 
	~<sys/thªad.h
>

25 #ifdef 
__˝lu•lus


29 #i‚def 
_ASM


35 
	s_kc⁄dv¨
 {

36 
ush‹t_t
 
_›aque
;

37 } 
	tkc⁄dv¨_t
;

39 
	e
{

40 
	mCV_DEFAULT
,

41 
	mCV_DRIVER


42 } 
	tkcv_ty≥_t
;

45 #i‡
deföed
(
_KERNEL
)

51 
cv_öô
(
kc⁄dv¨_t
 *, *, 
kcv_ty≥_t
, *);

52 
cv_de°roy
(
kc⁄dv¨_t
 *);

53 
cv_waô
(
kc⁄dv¨_t
 *, 
kmuãx_t
 *);

54 
cv_timedwaô
(
kc⁄dv¨_t
 *, 
kmuãx_t
 *, );

55 
cv_waô_sig
(
kc⁄dv¨_t
 *, 
kmuãx_t
 *);

56 
cv_timedwaô_sig
(
kc⁄dv¨_t
 *, 
kmuãx_t
 *, );

57 
cv_waô_sig_sw≠
(
kc⁄dv¨_t
 *, 
kmuãx_t
 *);

58 
cv_sig«l
(
kc⁄dv¨_t
 *);

59 
cv_brﬂdˇ°
(
kc⁄dv¨_t
 *);

60 
kc⁄dv¨_t
 *
cv_Æloc
(*, 
kcv_ty≥_t
, *);

61 
cv_‰ì
(
kc⁄dv¨_t
 *);

67 #ifdef 
__˝lu•lus


	@/usr/include/sys/lwp.h

5 #i‚def 
_SYS_LWP_H


6  
	#_SYS_LWP_H


	)
8 #¥agm®
idít
 "@(#)lwp.h 1.26 95/03/15 SMI"

10 
	~<sys/synch.h
>

11 
	~<sys/uc⁄ãxt.h
>

13 #ifdef 
__˝lu•lus


20  
	#LWP_DETACHED
 0x00000040

	)
21  
	#LWP_SUSPENDED
 0x00000080

	)
27  
	#__LWP_ASLWP
 0x00000100

	)
32 
	slwpöfo
 {

33 
time°ruc_t
 
lwp_utime
;

34 
time°ruc_t
 
lwp_°ime
;

35 
lwpöfo_∑d
 [64];

38 #i‚de‡
_KERNEL


40 
	tlwpid_t
;

42 
_lwp_makec⁄ãxt
(
uc⁄ãxt_t
 *, ((*)(*)),

43 *, *, 
ˇddr_t
, 
size_t
);

44 
_lwp_¸óã
(
uc⁄ãxt_t
 *, , 
lwpid_t
 *);

45 
_lwp_kûl
(
lwpid_t
, );

46 
_lwp_öfo
(
lwpöfo
 *);

47 
_lwp_exô
();

48 
_lwp_waô
(
lwpid_t
,Üwpid_t *);

49 
lwpid_t
 
_lwp_£lf
();

50 
_lwp_su•íd
(
lwpid_t
);

51 
_lwp_c⁄töue
(
lwpid_t
);

52 
_lwp_£çriv©e
(*);

53 * 
_lwp_gë¥iv©e
();

57 #ifdef 
__˝lu•lus


	@/usr/include/sys/machlock.h

5 #i‚de‡
_SYS_MACHLOCK_H


6  
	#_SYS_MACHLOCK_H


	)
8 #¥agm®
idít
 "@(#)machlock.h 1.14 94/10/20 SMI"

10 #ifdef 
__˝lu•lus


14 #i‚def 
_ASM


16 
	~<sys/ty≥s.h
>

18 #ifde‡
__STDC__


19 
lock_£t
(
lock_t
 *
Õ
);

20 
lock_åy
(
lock_t
 *
Õ
);

21 
ulock_åy
(
lock_t
 *
Õ
);

22 
lock_˛ór
(
lock_t
 *
Õ
);

23 
ulock_˛ór
(
lock_t
 *
Õ
);

25 
lock_£t_•l
(
lock_t
 *
Õ
, 
∂
);

26 
lock_˛ór_•lx
(
lock_t
 *
Õ
, 
s
);

28 
lock_£t
();

29 
lock_åy
();

30 
ulock_åy
();

31 
lock_˛ór
();

32 
ulock_˛ór
();

34 
lock_£t_•l
();

35 
lock_˛ór_•lx
();

38  
	#LOCK_HELD_VALUE
 0xff

	)
39  
	#LOCK_INIT_CLEAR
(
Õ
) (*÷pË0)

	)
40  
	#LOCK_INIT_HELD
(
Õ
) (*÷pË
LOCK_HELD_VALUE
)

	)
41  
	#LOCK_HELD
(
Õ
) (*÷pË!0)

	)
43 
lock_t
 
	tdi•_lock_t
;

49  
	#SPIN_LOCK
(
∂
) (’lË> 
	`ù…o•l
(
LOCK_LEVEL
))

	)
57  
	#LOCK_SAMPLE_INTERVAL
(
i
) (((iË& 0xffË=0)

	)
62 
hªs_lock
;

63 
˛ock_ªs
;

67  
	#LOCK_LEVEL
 10

	)
68  
	#CLOCK_LEVEL
 10

	)
78  
	#PTR24_LSB
 5

	)
79  
	#PTR24_MSB
 (
PTR24_LSB
 + 24)

	)
80  
	#PTR24_ALIGN
 32

	)
81  
	#PTR24_BASE
 0xe0000000

	)
83 #ifdef 
__˝lu•lus


	@/usr/include/sys/msacct.h

5 #i‚def 
_SYS_MSACCT_H


6  
	#_SYS_MSACCT_H


	)
8 #¥agm®
idít
 "@(#)msacct.h 1.7 93/07/13 SMI"

10 #ifdef 
__˝lu•lus


15  
	#LMS_USER
 0

	)
16  
	#LMS_SYSTEM
 1

	)
17  
	#LMS_TRAP
 2

	)
18  
	#LMS_TFAULT
 3

	)
19  
	#LMS_DFAULT
 4

	)
20  
	#LMS_KFAULT
 5

	)
21  
	#LMS_USER_LOCK
 6

	)
22  
	#LMS_SLEEP
 7

	)
23  
	#LMS_WAIT_CPU
 8

	)
24  
	#LMS_STOPPED
 9

	)
30  
	#NMSTATES
 10

	)
32 #ifdef 
__˝lu•lus


	@/usr/include/sys/rwlock.h

13 #i‚de‡
_SYS_RWLOCK_H


14  
	#_SYS_RWLOCK_H


	)
16 #¥agm®
idít
 "@(#)rwlock.h 1.3 94/07/29 SMI"

18 #ifdef 
__˝lu•lus


22 #i‚def 
_ASM


24 
	e
{

25 
RW_SLEEP
,

26 
RW_SLEEP_STAT
,

27 
RW_DRIVER_NOSTAT
 = 2,

28 
RW_DRIVER_STAT
 = 3,

29 
RW_DEFAULT


30 } 
	tkrw_ty≥_t
;

32 
	e
{

33 
	mRW_WRITER
,

34 
	mRW_READER


35 } 
	tkrw_t
;

37 #i‡
deföed
(
_LOCKTEST
Ë|| deföed(
_MPSTATS
)

38  
	#RW_DRIVER
 
RW_DRIVER_STAT


	)
40  
	#RW_DRIVER
 
RW_DRIVER_NOSTAT


	)
43 
	s_krwlock
 {

44 *
	m_›aque
[3];

45 } 
	tkrwlock_t
;

48 #i‡
deföed
(
_KERNEL
)

50  
	#RW_READ_HELD
(
x
) (
	`rw_ªad_hñd
((x)))

	)
51  
	#RW_WRITE_HELD
(
x
) (
	`rw_wrôe_hñd
((x)))

	)
52  
	#RW_LOCK_HELD
(
x
) (
	`rw_lock_hñd
((x)))

	)
53  
	#RW_ISWRITER
(
x
) (
	`rw_iswrôî
(x))

	)
55 
rw_öô
(
krwlock_t
 *, *, 
krw_ty≥_t
, *);

56 
rw_de°roy
(
krwlock_t
 *);

57 
rw_íãr
(
krwlock_t
 *, 
krw_t
);

58 
rw_åyíãr
(
krwlock_t
 *, 
krw_t
);

59 
rw_ªad_locked
(
krwlock_t
 *);

60 
rw_exô
(
krwlock_t
 *);

61 
rw_downgøde
(
krwlock_t
 *);

62 
rw_åyupgøde
(
krwlock_t
 *);

63 
rw_ªad_hñd
(
krwlock_t
 *);

64 
rw_wrôe_hñd
(
krwlock_t
 *);

65 
rw_lock_hñd
(
krwlock_t
 *);

66 
rw_iswrôî
(
krwlock_t
 *);

67 
rw_muãx_öô
();

68 
_kthªad
 *
rw_ow√r
(
krwlock_t
 *);

74 #ifdef 
__˝lu•lus


	@/usr/include/sys/semaphore.h

14 #i‚de‡
_SYS_SEMAPHORE_H


15  
	#_SYS_SEMAPHORE_H


	)
17 #¥agm®
idít
 "@(#)semaphore.h 1.4 94/07/29 SMI"

19 #i‚def 
_ASM


20 #ifde‡
_KERNEL


21 
	~<sys/thªad.h
>

26 #ifdef 
__˝lu•lus


30 #i‚def 
_ASM


35 
	e
{

36 
SEMA_DEFAULT
,

37 
SEMA_DRIVER


38 } 
	tk£ma_ty≥_t
;

40 
	s_k£ma
 {

41 * 
	m_›aque
[2];

42 } 
	tk£ma_t
;

44 #i‡
deföed
(
_KERNEL
)

46  
	#SEMA_HELD
(
x
) (
	`£ma_hñd
((x)))

	)
48 
£ma_öô
(
k£ma_t
 *, , *,

49 
k£ma_ty≥_t
, *);

50 
£ma_de°roy
(
k£ma_t
 *);

51 
£ma_p
(
k£ma_t
 *);

52 
£ma_p_sig
(
k£ma_t
 *);

53 
£ma_v
(
k£ma_t
 *);

54 
£ma_åyp
(
k£ma_t
 *);

55 
£ma_hñd
(
k£ma_t
 *);

56 
£ma_muãx_öô
();

61 #ifdef 
__˝lu•lus


	@/usr/include/sys/ucontext.h

8 #i‚de‡
_SYS_UCONTEXT_H


9  
	#_SYS_UCONTEXT_H


	)
11 #¥agm®
idít
 "@(#)ucontext.h 1.13 94/03/17 SMI"

13 
	~<sys/ty≥s.h
>

14 
	~<sys/ªg£t.h
>

15 
	~<sys/sig«l.h
>

17 #ifdef 
__˝lu•lus


21 
	suc⁄ãxt
 {

22 
u_l⁄g
 
uc_Êags
;

23 
uc⁄ãxt
 *
uc_lök
;

24 
sig£t_t
 
uc_sigmask
;

25 
°ack_t
 
uc_°ack
;

26 
mc⁄ãxt_t
 
uc_mc⁄ãxt
;

27 
uc_fûÀr
[23];

28 } 
	tuc⁄ãxt_t
;

30  
	#GETCONTEXT
 0

	)
31  
	#SETCONTEXT
 1

	)
40  
	#UC_SIGMASK
 001

	)
41  
	#UC_STACK
 002

	)
42  
	#UC_CPU
 004

	)
43  
	#UC_MAU
 010

	)
44  
	#UC_FPU
 
UC_MAU


	)
45  
	#UC_INTR
 020

	)
47  
	#UC_MCONTEXT
 (
UC_CPU
|
UC_FPU
)

	)
53  
	#UC_ALL
 (
UC_SIGMASK
|
UC_STACK
|
UC_MCONTEXT
)

	)
55 #ifde‡
_KERNEL


57 
ßvec⁄ãxt
(
uc⁄ãxt_t
 *, 
k_sig£t_t
);

61 #ifdef 
__˝lu•lus


	@/usr/include/sys/unistd.h

17 #i‚de‡
_SYS_UNISTD_H


18  
	#_SYS_UNISTD_H


	)
20 #¥agm®
idít
 "@(#)unistd.h 1.24 95/08/24 SMI"

22 
	~<sys/„©uª_ã°s.h
>

24 #ifdef 
__˝lu•lus


31  
	#_SC_ARG_MAX
 1

	)
32  
	#_SC_CHILD_MAX
 2

	)
33  
	#_SC_CLK_TCK
 3

	)
34  
	#_SC_NGROUPS_MAX
 4

	)
35  
	#_SC_OPEN_MAX
 5

	)
36  
	#_SC_JOB_CONTROL
 6

	)
37  
	#_SC_SAVED_IDS
 7

	)
38  
	#_SC_VERSION
 8

	)
40  
	#_SC_PASS_MAX
 9

	)
41  
	#_SC_LOGNAME_MAX
 10

	)
42  
	#_SC_PAGESIZE
 11

	)
43  
	#_SC_XOPEN_VERSION
 12

	)
45  
	#_SC_NPROCESSORS_CONF
 14

	)
46  
	#_SC_NPROCESSORS_ONLN
 15

	)
47  
	#_SC_STREAM_MAX
 16

	)
48  
	#_SC_TZNAME_MAX
 17

	)
50  
	#_SC_AIO_LISTIO_MAX
 18

	)
51  
	#_SC_AIO_MAX
 19

	)
52  
	#_SC_AIO_PRIO_DELTA_MAX
 20

	)
53  
	#_SC_ASYNCHRONOUS_IO
 21

	)
54  
	#_SC_DELAYTIMER_MAX
 22

	)
55  
	#_SC_FSYNC
 23

	)
56  
	#_SC_MAPPED_FILES
 24

	)
57  
	#_SC_MEMLOCK
 25

	)
58  
	#_SC_MEMLOCK_RANGE
 26

	)
59  
	#_SC_MEMORY_PROTECTION
 27

	)
60  
	#_SC_MESSAGE_PASSING
 28

	)
61  
	#_SC_MQ_OPEN_MAX
 29

	)
62  
	#_SC_MQ_PRIO_MAX
 30

	)
63  
	#_SC_PRIORITIZED_IO
 31

	)
64  
	#_SC_PRIORITY_SCHEDULING
 32

	)
65  
	#_SC_REALTIME_SIGNALS
 33

	)
66  
	#_SC_RTSIG_MAX
 34

	)
67  
	#_SC_SEMAPHORES
 35

	)
68  
	#_SC_SEM_NSEMS_MAX
 36

	)
69  
	#_SC_SEM_VALUE_MAX
 37

	)
70  
	#_SC_SHARED_MEMORY_OBJECTS
 38

	)
71  
	#_SC_SIGQUEUE_MAX
 39

	)
72  
	#_SC_SIGRT_MIN
 40

	)
73  
	#_SC_SIGRT_MAX
 41

	)
74  
	#_SC_SYNCHRONIZED_IO
 42

	)
75  
	#_SC_TIMERS
 43

	)
76  
	#_SC_TIMER_MAX
 44

	)
78  
	#_SC_2_C_BIND
 45

	)
79  
	#_SC_2_C_DEV
 46

	)
80  
	#_SC_2_C_VERSION
 47

	)
81  
	#_SC_2_FORT_DEV
 48

	)
82  
	#_SC_2_FORT_RUN
 49

	)
83  
	#_SC_2_LOCALEDEF
 50

	)
84  
	#_SC_2_SW_DEV
 51

	)
85  
	#_SC_2_UPE
 52

	)
86  
	#_SC_2_VERSION
 53

	)
87  
	#_SC_BC_BASE_MAX
 54

	)
88  
	#_SC_BC_DIM_MAX
 55

	)
89  
	#_SC_BC_SCALE_MAX
 56

	)
90  
	#_SC_BC_STRING_MAX
 57

	)
91  
	#_SC_COLL_WEIGHTS_MAX
 58

	)
92  
	#_SC_EXPR_NEST_MAX
 59

	)
93  
	#_SC_LINE_MAX
 60

	)
94  
	#_SC_RE_DUP_MAX
 61

	)
95  
	#_SC_XOPEN_CRYPT
 62

	)
96  
	#_SC_XOPEN_ENH_I18N
 63

	)
97  
	#_SC_XOPEN_SHM
 64

	)
99  
	#_CS_PATH
 65

	)
102  
	#_SC_2_CHAR_TERM
 66

	)
103  
	#_SC_XOPEN_XCU_VERSION
 67

	)
106  
	#_SC_PHYS_PAGES
 500

	)
107  
	#_SC_AVPHYS_PAGES
 501

	)
112  
	#_SC_COHER_BLKSZ
 503

	)
113  
	#_SC_SPLIT_CACHE
 504

	)
114  
	#_SC_ICACHE_SZ
 505

	)
115  
	#_SC_DCACHE_SZ
 506

	)
116  
	#_SC_ICACHE_LINESZ
 507

	)
117  
	#_SC_DCACHE_LINESZ
 508

	)
118  
	#_SC_ICACHE_BLKSZ
 509

	)
119  
	#_SC_DCACHE_BLKSZ
 510

	)
120  
	#_SC_DCACHE_TBLKSZ
 511

	)
121  
	#_SC_ICACHE_ASSOC
 512

	)
122  
	#_SC_DCACHE_ASSOC
 513

	)
128  
	#_SC_THREAD_DESTRUCTOR_ITERATIONS
 568

	)
129  
	#_SC_GETGR_R_SIZE_MAX
 569

	)
130  
	#_SC_GETPW_R_SIZE_MAX
 570

	)
131  
	#_SC_LOGIN_NAME_MAX
 571

	)
132  
	#_SC_THREAD_KEYS_MAX
 572

	)
133  
	#_SC_THREAD_STACK_MIN
 573

	)
134  
	#_SC_THREAD_THREADS_MAX
 574

	)
135  
	#_SC_TTY_NAME_MAX
 575

	)
136  
	#_SC_THREADS
 576

	)
137  
	#_SC_THREAD_ATTR_STACKADDR
 577

	)
138  
	#_SC_THREAD_ATTR_STACKSIZE
 578

	)
139  
	#_SC_THREAD_PRIORITY_SCHEDULING
 579

	)
140  
	#_SC_THREAD_PRIO_INHERIT
 580

	)
141  
	#_SC_THREAD_PRIO_PROTECT
 581

	)
142  
	#_SC_THREAD_PROCESS_SHARED
 582

	)
143  
	#_SC_THREAD_SAFE_FUNCTIONS
 583

	)
146  
	#_SC_PPC_GRANULE_SZ
 601

	)
147  
	#_SC_PPC_TB_TICKSPSECH
 602

	)
148  
	#_SC_PPC_TB_TICKSPSECL
 603

	)
154  
	#_PC_LINK_MAX
 1

	)
155  
	#_PC_MAX_CANON
 2

	)
156  
	#_PC_MAX_INPUT
 3

	)
157  
	#_PC_NAME_MAX
 4

	)
158  
	#_PC_PATH_MAX
 5

	)
159  
	#_PC_PIPE_BUF
 6

	)
160  
	#_PC_NO_TRUNC
 7

	)
161  
	#_PC_VDISABLE
 8

	)
162  
	#_PC_CHOWN_RESTRICTED
 9

	)
164  
	#_PC_ASYNC_IO
 10

	)
165  
	#_PC_PRIO_IO
 11

	)
166  
	#_PC_SYNC_IO
 12

	)
167  
	#_PC_LAST
 12

	)
169 #i‚def 
_POSIX_VERSION


170  
	#_POSIX_VERSION
 199506L

	)
173 #i‚def 
_POSIX2_VERSION


174  
	#_POSIX2_VERSION
 199209L

	)
177 #i‚def 
_POSIX2_C_VERSION


178  
	#_POSIX2_C_VERSION
 199209L

	)
181 #i‚def 
_XOPEN_VERSION


182  
	#_XOPEN_VERSION
 3

	)
183  
	#_XOPEN_XPG3


	)
186 #i‚def 
_XOPEN_XCU_VERSION


187  
	#_XOPEN_XCU_VERSION
 4

	)
190  
	#_POSIX2_C_BIND
 1

	)
191  
	#_POSIX2_CHAR_TERM
 1

	)
192  
	#_POSIX2_LOCALEDEF
 1

	)
193  
	#_POSIX2_C_DEV
 1

	)
194  
	#_POSIX2_SW_DEV
 1

	)
195  
	#_POSIX2_UPE
 1

	)
197  
	#_XOPEN_XPG4


	)
199 #ifdef 
__˝lu•lus


	@/usr/include/v7/sys/privregs.h

5 #i‚de‡
_SYS_PRIVREGS_H


6  
	#_SYS_PRIVREGS_H


	)
8 #¥agm®
idít
 "@(#)privregs.h 1.3 95/02/24 SMI"

10 #ifdef 
__˝lu•lus


23 
	~<v7/sys/p§.h
>

24 
	~<sys/f§.h
>

26 #i‚def 
_ASM


28 
	sªgs
 {

29 
r_p§
;

30 
r_pc
;

31 
r_≈c
;

32 
r_y
;

33 
r_g1
;

34 
r_g2
;

35 
r_g3
;

36 
r_g4
;

37 
r_g5
;

38 
r_g6
;

39 
r_g7
;

40 
r_o0
;

41 
r_o1
;

42 
r_o2
;

43 
r_o3
;

44 
r_o4
;

45 
r_o5
;

46 
r_o6
;

47 
r_o7
;

50  
	#r_ps
 
r_p§


	)
51  
	#r_r0
 
r_o0


	)
52  
	#r_•
 
r_o6


	)
56 #ifde‡
_KERNEL


58  
	#lw±‹egs
(
lwp
) ((
ªgs
 *)(÷wp)->
lwp_ªgs
))

	)
59  
	#lw±oÂu
(
lwp
) ((
Âu
 *)(÷wp)->
lwp_Âu
))

	)
65  
	#SAVE_GLOBALS
(
RP
) \

66 
°
 %
g1
, [
RP
 + 
G1
*4]; \

67 
°d
 %
g2
, [
RP
 + 
G2
*4]; \

68 
°d
 %
g4
, [
RP
 + 
G4
*4]; \

69 
°d
 %
g6
, [
RP
 + 
G6
*4]; \

70 
mov
 %
y
, %
g1
; \

71 
°
 %
g1
, [
RP
 + 
Y
*4]

	)
73  
	#RESTORE_GLOBALS
(
RP
) \

74 
ld
 [
RP
 + 
Y
*4], %
g1
; \

75 
mov
 %
g1
, %
y
; \

76 
ld
 [
RP
 + 
G1
*4], %
g1
; \

77 
ldd
 [
RP
 + 
G2
*4], %
g2
; \

78 
ldd
 [
RP
 + 
G4
*4], %
g4
; \

79 
ldd
 [
RP
 + 
G6
*4], %
g6
;

	)
81  
	#SAVE_OUTS
(
RP
) \

82 
°d
 %
i0
, [
RP
 + 
O0
*4]; \

83 
°d
 %
i2
, [
RP
 + 
O2
*4]; \

84 
°d
 %
i4
, [
RP
 + 
O4
*4]; \

85 
°d
 %
i6
, [
RP
 + 
O6
*4];

	)
87  
	#RESTORE_OUTS
(
RP
) \

88 
ldd
 [
RP
 + 
O0
*4], %
i0
; \

89 
ldd
 [
RP
 + 
O2
*4], %
i2
; \

90 
ldd
 [
RP
 + 
O4
*4], %
i4
; \

91 
ldd
 [
RP
 + 
O6
*4], %
i6
;

	)
93  
	#SAVE_WINDOW
(
SBP
) \

94 
°d
 %
l0
, [
SBP
 + (0*4)]; \

95 
°d
 %
l2
, [
SBP
 + (2*4)]; \

96 
°d
 %
l4
, [
SBP
 + (4*4)]; \

97 
°d
 %
l6
, [
SBP
 + (6*4)]; \

98 
°d
 %
i0
, [
SBP
 + (8*4)]; \

99 
°d
 %
i2
, [
SBP
 + (10*4)]; \

100 
°d
 %
i4
, [
SBP
 + (12*4)]; \

101 
°d
 %
i6
, [
SBP
 + (14*4)];

	)
103  
	#RESTORE_WINDOW
(
SBP
) \

104 
ldd
 [
SBP
 + (0*4)], %
l0
; \

105 
ldd
 [
SBP
 + (2*4)], %
l2
; \

106 
ldd
 [
SBP
 + (4*4)], %
l4
; \

107 
ldd
 [
SBP
 + (6*4)], %
l6
; \

108 
ldd
 [
SBP
 + (8*4)], %
i0
; \

109 
ldd
 [
SBP
 + (10*4)], %
i2
; \

110 
ldd
 [
SBP
 + (12*4)], %
i4
; \

111 
ldd
 [
SBP
 + (14*4)], %
i6
;

	)
113  
	#STORE_FPREGS
(
FP
) \

114 
°d
 %
f0
, [
FP
]; \

115 
°d
 %
f2
, [
FP
 + 8]; \

116 
°d
 %
f4
, [
FP
 + 16]; \

117 
°d
 %
f6
, [
FP
 + 24]; \

118 
°d
 %
f8
, [
FP
 + 32]; \

119 
°d
 %
f10
, [
FP
 + 40]; \

120 
°d
 %
f12
, [
FP
 + 48]; \

121 
°d
 %
f14
, [
FP
 + 56]; \

122 
°d
 %
f16
, [
FP
 + 64]; \

123 
°d
 %
f18
, [
FP
 + 72]; \

124 
°d
 %
f20
, [
FP
 + 80]; \

125 
°d
 %
f22
, [
FP
 + 88]; \

126 
°d
 %
f24
, [
FP
 + 96]; \

127 
°d
 %
f26
, [
FP
 + 104]; \

128 
°d
 %
f28
, [
FP
 + 112]; \

129 
°d
 %
f30
, [
FP
 + 120];

	)
131  
	#LOAD_FPREGS
(
FP
) \

132 
ldd
 [
FP
], %
f0
; \

133 
ldd
 [
FP
 + 8], %
f2
; \

134 
ldd
 [
FP
 + 16], %
f4
; \

135 
ldd
 [
FP
 + 24], %
f6
; \

136 
ldd
 [
FP
 + 32], %
f8
; \

137 
ldd
 [
FP
 + 40], %
f10
; \

138 
ldd
 [
FP
 + 48], %
f12
; \

139 
ldd
 [
FP
 + 56], %
f14
; \

140 
ldd
 [
FP
 + 64], %
f16
; \

141 
ldd
 [
FP
 + 72], %
f18
; \

142 
ldd
 [
FP
 + 80], %
f20
; \

143 
ldd
 [
FP
 + 88], %
f22
; \

144 
ldd
 [
FP
 + 96], %
f24
; \

145 
ldd
 [
FP
 + 104], %
f26
; \

146 
ldd
 [
FP
 + 112], %
f28
; \

147 
ldd
 [
FP
 + 120], %
f30
;

	)
151 #ifdef 
__˝lu•lus


	@/usr/include/sys/fsr.h

5 #i‚de‡
_SYS_FSR_H


6  
	#_SYS_FSR_H


	)
8 #¥agm®
idít
 "@(#)fsr.h 1.2 94/11/18 SMI"

10 #ifdef 
__˝lu•lus


36  
	#FSR_CEXC
 0x0000001f

	)
37  
	#FSR_AEXC
 0x000003e0

	)
38  
	#FSR_FCC
 0x00000c00

	)
39  
	#FSR_PR
 0x00001000

	)
40  
	#FSR_QNE
 0x00002000

	)
41  
	#FSR_FTT
 0x0001c000

	)
42  
	#FSR_VER
 0x000e0000

	)
43  
	#FSR_TEM
 0x0f800000

	)
44  
	#FSR_RP
 0x30000000

	)
45  
	#FSR_RD
 0xc0000000

	)
46  
	#FSR_VER_SHIFT
 17

	)
47  
	#FSR_FCC1
 0x00000003

	)
48  
	#FSR_FCC2
 0x0000000C

	)
49  
	#FSR_FCC3
 0x00000030

	)
54  
	#FSR_CEXC_NX
 0x00000001

	)
55  
	#FSR_CEXC_DZ
 0x00000002

	)
56  
	#FSR_CEXC_UF
 0x00000004

	)
57  
	#FSR_CEXC_OF
 0x00000008

	)
58  
	#FSR_CEXC_NV
 0x00000010

	)
63  
	#FSR_AEXC_NX
 (0x1 << 5)

	)
64  
	#FSR_AEXC_DZ
 (0x2 << 5)

	)
65  
	#FSR_AEXC_UF
 (0x4 << 5)

	)
66  
	#FSR_AEXC_OF
 (0x8 << 5)

	)
67  
	#FSR_AEXC_NV
 (0x10 << 5)

	)
72  
	#FTT_NONE
 0

	)
73  
	#FTT_IEEE
 1

	)
74  
	#FTT_UNFIN
 2

	)
75  
	#FTT_UNIMP
 3

	)
76  
	#FTT_SEQ
 4

	)
77  
	#FTT_ALIGN
 5

	)
78  
	#FTT_DFAULT
 6

	)
79  
	#FSR_FTT_SHIFT
 14

	)
80  
	#FSR_FTT_IEEE
 (
FTT_IEEE
 << 
FSR_FTT_SHIFT
)

	)
81  
	#FSR_FTT_UNFIN
 (
FTT_UNFIN
 << 
FSR_FTT_SHIFT
)

	)
82  
	#FSR_FTT_UNIMP
 (
FTT_UNIMP
 << 
FSR_FTT_SHIFT
)

	)
83  
	#FSR_FTT_SEQ
 (
FTT_SEQ
 << 
FSR_FTT_SHIFT
)

	)
84  
	#FSR_FTT_ALIGN
 (
FTT_ALIGN
 << 
FSR_FTT_SHIFT
)

	)
85  
	#FSR_FTT_DFAULT
 (
FTT_DFAULT
 << 
FSR_FTT_SHIFT
)

	)
90  
	#FSR_TEM_NX
 (0x1 << 23)

	)
91  
	#FSR_TEM_DZ
 (0x2 << 23)

	)
92  
	#FSR_TEM_UF
 (0x4 << 23)

	)
93  
	#FSR_TEM_OF
 (0x8 << 23)

	)
94  
	#FSR_TEM_NV
 (0x10 << 23)

	)
99  
	#RP_DBLEXT
 0

	)
100  
	#RP_SINGLE
 1

	)
101  
	#RP_DOUBLE
 2

	)
102  
	#RP_RESERVED
 3

	)
107  
	#RD_NEAR
 0

	)
108  
	#RD_ZER0
 1

	)
109  
	#RD_POSINF
 2

	)
110  
	#RD_NEGINF
 3

	)
122  
	#FPRS_DL
 0x1

	)
123  
	#FPRS_DU
 0x2

	)
124  
	#FPRS_FEF
 0x4

	)
126 #ifdef 
__˝lu•lus


	@/usr/include/sys/synch.h

5 #i‚def 
_SYS_SYNCH_H


6  
	#_SYS_SYNCH_H


	)
8 #¥agm®
idít
 "@(#)synch.h 1.21 93/04/13 SMI"

10 
	~<sys/ty≥s.h
>

12 #ifdef 
__˝lu•lus


16 #i‚def 
_UINT8_T


17  
	#_UINT8_T


	)
18 
	tuöt8_t
;

20 #i‚def 
_UINT32_T


21  
	#_UINT32_T


	)
22 
	tuöt32_t
;

24 #i‚def 
_UINT64_T


25  
	#_UINT64_T


	)
26 
u_l⁄gl⁄g_t
 
	tuöt64_t
;

33 
	s_lwp_muãx
 {

34 
	s_muãx_Êags
 {

35 
uöt8_t
 
	gÊag
[4];

36 
uöt32_t
 
	gty≥
;

37 } 
	gÊags
;

38 
	u_muãx_lock_un
 {

39 
	s_muãx_lock
 {

40 
uöt8_t
 
	g∑d
[8];

41 } 
	glock64
;

42 
uöt64_t
 
	gow√r64
;

43 } 
	glock
;

44 
uöt64_t
 
	gd©a
;

45 } 
	tlwp_muãx_t
;

47  
	#muãx_lockw
 
lock
.
lock64
.
∑d
[7]

	)
53 
	s_lwp_c⁄d
 {

54 
	s_lwp_c⁄d_Êags
 {

55 
uöt8_t
 
	gÊag
[4];

56 
uöt32_t
 
	gty≥
;

57 } 
	gÊags
;

58 
uöt64_t
 
	gd©a
;

59 } 
	tlwp_c⁄d_t
;

66 
	s_lwp_£ma
 {

67 
uöt32_t
 
	gcou¡
;

68 
uöt32_t
 
	gty≥
;

69 
uöt8_t
 
	gÊags
[8];

70 
uöt64_t
 
	gd©a
;

71 } 
	tlwp_£ma_t
;

76  
	#USYNC_THREAD
 0

	)
77  
	#USYNC_PROCESS
 1

	)
78  
	#TRACE_TYPE
 2

	)
80 #ifdef 
__˝lu•lus


	@/usr/include/v7/sys/psr.h

5 #i‚de‡
_SYS_PSR_H


6  
	#_SYS_PSR_H


	)
8 #¥agm®
idít
 "@(#)psr.h 1.2 94/10/06 SMI"

10 #ifdef 
__˝lu•lus


26  
	#PSR_CWP
 0x0000001F

	)
27  
	#PSR_ET
 0x00000020

	)
28  
	#PSR_PS
 0x00000040

	)
29  
	#PSR_S
 0x00000080

	)
30  
	#PSR_PIL
 0x00000F00

	)
31  
	#PSR_EF
 0x00001000

	)
32  
	#PSR_EC
 0x00002000

	)
33  
	#PSR_RSV
 0x000FC000

	)
34  
	#PSR_ICC
 0x00F00000

	)
35  
	#PSR_C
 0x00100000

	)
36  
	#PSR_V
 0x00200000

	)
37  
	#PSR_Z
 0x00400000

	)
38  
	#PSR_N
 0x00800000

	)
39  
	#PSR_VER
 0x0F000000

	)
40  
	#PSR_IMPL
 0xF0000000

	)
42  
	#PSL_ALLCC
 
PSR_ICC


	)
44 #i‚de‡
_ASM


45 
	tpsw_t
;

51  
	#PSL_USER
 (
PSR_S
)

	)
52  
	#PSL_USERMASK
 (
PSR_ICC
)

	)
54  
	#PSL_UBITS
 (
PSR_ICC
|
PSR_EF
)

	)
57 #i‚def 
__•¨cv9


61  
	#USERMODE
(
ps
) ((’sË& 
PSR_PS
Ë=0)

	)
64 #ifdef 
__˝lu•lus


	@
1
.
1
/usr/include
104
1821
append.c
args.c
bitmap.c
classhnt.c
color.c
colormap.c
connect.c
da_draw.c
da_edit.c
da_file.c
da_meta.c
da_pix.c
da_undo.c
debug.h
dialog.c
display.c
drawapp.c
drawapp.h
drawstr.c
entry.c
error.c
fontht.c
fontname.c
gc.c
geometry.c
icon.c
key.c
label.c
loadfont.c
myxlib.h
oval.c
pixmap.c
probDist.c
probDist.h
pushb.c
query.c
returns.h
sizehint.c
startupx.c
toolkit.c
toolkit.h
topwind.c
tranwind.c
uniform.c
uniform.h
usage.c
visual.c
window.c
wmhints.c
wmname.c
xor.c
/usr/include/ctype.h
/usr/include/errno.h
/usr/include/math.h
/usr/include/stdio.h
/usr/include/stdlib.h
/usr/include/string.h
/usr/include/sys/time.h
/usr/include/sys/types.h
/usr/include/floatingpoint.h
/usr/include/sys/errno.h
/usr/include/sys/feature_tests.h
/usr/include/sys/isa_defs.h
/usr/include/sys/machtypes.h
/usr/include/sys/mutex.h
/usr/include/sys/select.h
/usr/include/sys/va_list.h
/usr/include/sys/wait.h
/usr/include/time.h
/usr/include/sys/dki_lkinfo.h
/usr/include/sys/ieeefp.h
/usr/include/sys/procset.h
/usr/include/sys/siginfo.h
/usr/include/sys/dl.h
/usr/include/sys/machsig.h
/usr/include/sys/proc.h
/usr/include/sys/cred.h
/usr/include/sys/thread.h
/usr/include/sys/timer.h
/usr/include/sys/user.h
/usr/include/sys/auxv.h
/usr/include/sys/class.h
/usr/include/sys/klwp.h
/usr/include/sys/param.h
/usr/include/sys/pcb.h
/usr/include/sys/pirec.h
/usr/include/sys/regset.h
/usr/include/sys/resource.h
/usr/include/sys/signal.h
/usr/include/sys/sleepq.h
/usr/include/sys/t_lock.h
/usr/include/sys/turnstile.h
/usr/include/sys/condvar.h
/usr/include/sys/lwp.h
/usr/include/sys/machlock.h
/usr/include/sys/msacct.h
/usr/include/sys/rwlock.h
/usr/include/sys/semaphore.h
/usr/include/sys/ucontext.h
/usr/include/sys/unistd.h
/usr/include/v7/sys/privregs.h
/usr/include/sys/fsr.h
/usr/include/sys/synch.h
/usr/include/v7/sys/psr.h
